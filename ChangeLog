2024-08-22 lttng-tools 2.12.16 (National Take Your Cat to the Vet Day)
	* Fix: Do not null out lttng_consumer_stream channel on deletion
	* Fix: Crash when unregistering UST apps during shutdown
	* lttng-ctl: Hide symbol introduced by fix
	* Fix: consumerd: wrong timer mentioned in error logging
	* Fix: consumerd: type confusion in lttng_consumer_send_error

2024-03-28 lttng-tools 2.12.15 (Respect Your Cat Day)
	* Fix: baddr-statedump: use $(LIBTOOL) --mode=execute
	* Fix: relayd: live client not notified of inactive streams
	* Fix: relayd: live: dispose of zombie viewer metadata stream
	* Fix: sessiond: freeze on channel creation on restart
	* common: move utils_create_lock_file to its own file
	* tests: tools/clear/test_ust wait for specific test app pid
	* Tests: use CPU ids from online ranges
	* Tests: Preemptively fail infinite blocking tests when low on disk space
	* Fix: lttng-add-context: leak of application context parameters

2023-06-20 lttng-tools 2.12.14 (National Ice Cream Soda Day)
	* Tests fix: test_callstack: output of addr2line incorrectly parsed
	* Fix: adding a user space probe fails on thumb functions
	* Fix: Tests that assume CPU 0 is present
	* Fix: Wrong assumption about possible CPUs
	* Tests: fix: parse-callback reports missing addr2line
	* Tests: snapshot tests complain that nothing is output
	* Tests: Test snapshot maximum size correctly
	* Tests: Add get_possible_cpus_count utility
	* Fix: ini parser: truncation of value name

2023-01-05 lttng-tools 2.12.13 (National Whipped Cream Day)
	* Fix: lttng: poptGetArg doesn't provide string ownership
	* Fix: relayd: missing space in trace creation logging statement
	* Fix: never use 'no' in a command variable
	* Fix: consumer: snapshot: assertion on subsequent snapshot
	* Fix: sessiond: instance uuid is not sufficiently unique

2022-08-22 lttng-tools 2.12.12 (National Bao Day)
	* Fix: waiter: futex wait: handle spurious futex wakeups
	* Fix: futex wait: handle spurious futex wakeups
	* Fix: utils: unhandled close return value
	* Fix: agent port file is o+w when launching as root
	* Fix: tests: don't assume sequential cpuids
	* Fix: ust-consumerd: set `hangup_flush_done` in a locked context
	* Revert "Fix: sessiond: rotation trigger leak"
	* Fix: lttng-snapshot: use after free of max size argument
	* Fix: lttng: snapshot: add-output: leak of max size parameter
	* Tests: fix: lttng-create: leaked command parameter
	* Fix: sessiond: rotation trigger leak
	* Tests: fix: schedule api: leak of rotation schedule list
	* Fix: lttng: enable-rotation: leak of command parameter
	* Fix: lttng: track: leaked command parameter
	* Fix: lttng: enable-channel: leak of popt arguments
	* Tests: fix: leak of some attributes of ltt_ust_session
	* Fix: liblttng-ctl: non-packed structure used for tracker serialization
	* Fix: test: lttng kernel modules still loaded after running test_clock_override

2022-04-13 lttng-tools 2.12.11 (International Day of Pink)
	* Fix: notification: assert on len > 0 for dropped notification message
	* Fix: sessiond: cmd_enable_channel: negative error code used

2022-03-28 lttng-tools 2.12.10 (National Hot Tub Day)
	* Fix: Remove liblttng-ctl.so dependency on liburcu-cds.so and liburcu-common.so

2022-03-28 lttng-tools 2.12.9 (National Hot Tub Day)
	* Fix: lttng-elf: wrong error label used by error path
	* Fix: use the correct endian compat macros
	* Fix: lttng-elf: untrusted entry size divisor
	* Fix: event: erroneous bound check on perf counter name size
	* Fix: relayd: missing session unlock on error path
	* fix: warning '-Wstringop-truncation' with GCC 11.2
	* Add Log4j 2.x agent tests for the 'log4j' domain
	* Fix: relayd: session id is ignored by 2.11+ create session command
	* Fix: consumerd: use-after-free of metadata bucket
	* Fix: ust-consumerd: leak of stream control structure
	* Fix: liblttng-ctl: erroneous flat size computation
	* Build fix: relayd: mismatching function signatures
	* Build fix: use of mutable keyword in C file
	* Fix: relayd: connection abruptly closed on viewer stream creation failure
	* Fix: relayd: live client fails on clear of multi-domain session
	* Tests: fix: select_poll_epoll: test assumes epoll fd value
	* Fix: rotation: hang on destroy when using scheduled rotation based on timer
	* Fix: consumerd: fd still open after `lttng snapshot record` returns
	* Fix: event: unchecked return value for lttng_strncpy
	* Fix: event: format specifier for ssize_t
	* Fix: sessiond: lttng_channel object is not reclaimed
	* Fix: common: local_attr might leak
	* Fix: session: end goto label used for error path
	* Fix: ser/des: missing null terminator on payload append
	* Fix: test: test plan/skip must come after TAP initialization
	* Fix: test: missing test plan for non-x86/arm platforms (i.e powerpc)
	* Fix: liblttng-ctl comm: lttng_event_field is not packed
	* Fix: liblttng-ctl comm: lttng_event_context is not packed
	* Fix: liblttng-ctl comm: lttng_event is not packed
	* libcommon: move event.c to libcommon-lgpl
	* Fix: liblttng-ctl comm: lttng_channel is not packed
	* Fix: lttng-ctl: erroneous uses of LTTNG_PACKED
	* Backport: lttng_buffer_view_is_valid, lttng_buffer_view_contains_string
	* Fix: conversion from KB to bytes overflow on arm32
	* Fix: Unexpected payload size in cmd_recv_stream_2_11
	* Tests: add kernel test into the `make check` test suite.

2022-01-26 lttng-tools 2.12.8 (National Peanut Brittle Day)
	* Relicence all source and header files included in LGPL code
	* Fix: sessiond: use of null session when session is not found
	* Move utils_expand_path and utils_expand_path_keep_symlink to libpath.la
	* Link lttng executable on libcommon-lgpl.a
	* Introduce libcommon-lgpl for liblttng-ctl
	* Rename libcommon.so to libcommon-gpl.so
	* Copyright ownership transfer
	* Copyright ownership transfer
	* Fix: relayd: erroneous rundir permission logging message
	* Fix: sessiond: rotation thread: fatal error when not finding a session
	* Fix: relayd: rotation failure for multi-domain session
	* Fix: lttng-ctl: lttng_list_sessions: initialize out_sessions to NULL when returning 0
	* Fix: lttng: initialize variable in run_command_string
	* Fix: consumer-stream: live viewers observe timestamps going backwards
	* Fix: relayd: ressource leaks on viewer_stream_create error
	* Fix: relayd: live: erroneous message timestamp observed from live viewer
	* Fix: relayd: failure to open chunk files concurrently with session clear
	* Fix: relayd: live: metadata stream reference count < 0 assert

2021-12-17 lttng-tools 2.12.7 (National Ugly Christmas Sweater Day)
	* Validate channel context mismatch across UST applications
	* Fix: relayd: compare viewer chunks by ID rather than address
	* Fix: relayd: live: erroneous message timestamp observed from live viewer
	* Fix: relayd comm: improperly packed rotate streams command header
	* test: snapshot after regenerate metadata
	* Fix: ust-consumer: segfault on snapshot after regenerate metadata
	* Tests: live kernel: no plan printed when non-root
	* Fix: sessiond: snapshot: leak of trace chunk
	* Fix: test: use BABELTRACE_BIN instead of babeltrace
	* Fix: relayd: `!vsession->current_trace_chunk` assertion failed
	* Fix: tests: fix unused-but-set warning in test_fd_tracker.c
	* Fix: sessiond: fix possible buffer overflow warning
	* Fix: lttng-ctl: tracing_group memory leaks
	* Fix: Tests: unchecked `close()` return value
	* Fix: relayd: live: mishandled initial null trace chunk
	* Fix: configure.ac: reporting SDT uprobe as a UST feature
	* Fix: Tests: leaking epoll fd

2021-10-18 lttng-tools 2.12.6 (National Chocolate Cupcake Day)
	* Fix: sessiond: previously created channel cannot be enabled
	* Fix: ust: app stuck on recv message during UST comm timeout scenario
	* Fix: ust: UST communication can return -EAGAIN
	* Fix: ust: segfault on lttng start on filter bytecode copy
	* Build fix: Missing message in LTTNG_DEPRECATED invocation
	* include: remove spurious spaces in condition/session-rotation.h
	* tests: fix header of regression/ust/getcpu-override/run-getcpu-override
	* fix: wrong define used for GCC version check
	* Fix: userspace-probe: unreported error on string copy error
	* Fix: userspace-probe: truncating binary path for SDT
	* Fix: statements with side-effects in assert statements
	* Fix: lttng_trace_archive_location_serialize is called on freed memory
	* Fix: sessiond: ust session is inactive during ust_app_global_update
	* Fix: Tests: race condition in test_ns_contexts_change
	* Fix: Tests: race condition in test_event_tracker
	* Fix: man: lttng-rotate: trace file count/size limitation does not apply

2021-08-06 lttng-tools 2.12.5 (International Beer Day)
	* Fix: runas: less-than-zero comparison of an unsigned value
	* Fix: runas: supplementary groups are ignored on lttng save
	* Fix: lttng: free sessions in cmd_destroy
	* Fix: lttng: free domains and channels in get_session_stats_str
	* Fix: rotation client example: leak of handle on error
	* .gitreview: Set default branch to 'stable-2.12'
	* tests: Move tap-driver.sh out of the autotools aux directory
	* Fix: use of uninitialised bytes valgrind warning
	* Fix: bump minimal urcu dependency to 0.11
	* Fix: consumer: unbalanced RCU read-side lock on error
	* Fix: tests: missing LOG_DRIVER and LOG_DRIVER_FLAGS
	* Fix: list_lttng_agent_events: unbalanced RCU read-side lock on error

2021-05-18 lttng-tools 2.12.4 (No Dirty Dishes Day)
	* Fix: snapshot path have domain subdir duplicate "ust/ust" or "kernel/kernel"
	* Fix: relayd: failure to read index entry or stream packet after clear
	* Fix: sessiond: leak of config_path on duplicate --config option
	* Fix: relayd: live: data is missing between viewer attach and retry
	* Fix: lttng-ctl: erroneous check if user is part of the tracing group
	* Fix: kernel consumer: get next subbuffer EAGAIN handling
	* Fix: kernel consumer: signal metadata ready condition variable
	* Fix: consumerd: unbalanced subbuffer 'get' when checking operation availability
	* Fix: tests: gen-ust-events-ns: Uninitialized argument value
	* Fix: consumerd: strlen called on uninitialized path
	* Fix: tests: health thread stall: only stop consumerd when required
	* Fix: tests: quote variable in case it's not set
	* Fix: sessiond: session destroy hang in per-uid when context cannot be added
	* Fix: backward relayd: path contains a leading "ust" folder
	* Fix: lttng_destroy_session_no_wait: return 0 on success
	* config: fix typo in error message
	* Tests: array expressions without contant index are invalid
	* Fix: validate that array expression contains constant
	* Fix: test: base-path tests are not run
	* Fix: filter: memory leak in filter_parser_ctx
	* Fix: sessiond: fix -Wshadow error in save.c
	* Fix: utils: avoid strncpy overlap in utils_partial_realpath
	* Clean-up: utils: make utils_partial_realpath static
	* Fix: added missing test_channel and removed double defined test_syscall
	* Fix: sessiond: kernel: invalid error code check
	* Tests: fix: unchecked sscanf return value
	* compiler warning cleanup: is_signed_type: compare -1 to 1

2021-02-22 lttng-tools 2.12.3 (National Margarita Day)
	* Fix: ust-consumer: metadata thread not woken-up after version change
	* Clean-up: ust-consumer: simplify metadata cache unlock on error path
	* Fix: sessiond: timer: unitiliazed sigevent fields
	* Fix: sessiond: ust-registry: dereference of NULL pointer on allocation failure
	* Fix: ust-consumer: metadata cache lock not taken when sampling max offset
	* Fix: use MT-safe strtok_r in multithreaded context
	* Fix: liblttng-ctl: unreported truncations when copying strings
	* Fix: configure: support Autoconf 2.70
	* Fix: sessiond: metadata not created on app unregistration during start
	* Cleanup: use `modprobe --remove` rather than `rmmod`
	* Tests: Fix: 99% fill ratio for high buffer usage is too high for larger events
	* Fix: common: poll: compat_poll_wait never finishes
	* Build fix: implicit declaration of function 'PERROR' on Solaris
	* Fix: PERROR spam when `tracing` group does not exist
	* Fix: memcpy used on potentially overlapping regions

2020-08-03 lttng-tools 2.12.2 (National Watermelon Day)
	* Tests: rework tracefile_count test to meet the tracefile count limit
	* Fix: extraneous empty/inactive flush on rotation out of a trace chunk
	* Fix: relayd: double unlock on viewer stream creation error
	* Fix: relayd: live connection fails to open file during clear
	* Fix: relayd: wrong stream type used in DBG statement
	* Fix: lttng: leak of userspace probe path on listing
	* Fix: uprobe: missing error code on allocation failure
	* Fix: sessiond: don't negate error code on list error
	* Fix: send/received actual size is overwritten by 'expected' size
	* Fix: partial recv lead to client disconnect
	* tests: return the proper TAP exit code
	* Tests: live/test_{lttng_,}kernel: use lttng_test_filter_event instead of sched_switch
	* Fix: consumer: Move sanity check within `consumer_subbuffer` functions
	* Fix: sessiond: wrong variable checked for error code
	* Fix: consumerd: double unlock on rotate channel error path
	* Fix: consumerd: packet sent before channel rotation
	* Fix: relayd: wrong specifier used in DBG format string
	* Tests: add a "new metadata after clear" test
	* Fix: relayd: send_viewer_streams sends stack data in padding
	* Fix: stream intersection fails on snapshot of cleared session
	* Fix: relayd: viewer metadata is not rotated after a session clear
	* Fix: post-clear trace chunk has a late beginning packet
	* Fix: kconsumer: missing wait for metadata thread in do_sync_metadata
	* Fix: tests: interrupting get_next_notification causes test to fail
	* Fix: consumer.c: wrong order of parameter in `DBG()` statement
	* Fix: consumer: dangling chunk on buffer allocation failure
	* Fix: consumerd: uninitialized written_bytes on no-data sleep
	* Build fix: consumerd misnamed label
	* consumerd: on_sleep not called on stream when no data is available
	* Fix: invalid discarded events on start/stop without event production
	* tests: truncate metadata file for regenerate metadata test
	* Fix: consumerd: user space metadata not regenerated
	* tests: gen-ust-events-ns/tp.h: Fix build with musl libc
	* Fix: tests: output_dir contains the consumerd pipe
	* Fix: unix: don't PERROR on EAGAIN for non-blocking sockets
	* Fix: sessiond: sessiond and agent deadlock on destroy
	* Fix: incorrect specifier %lu used with size_t argument
	* Fix: consumerd: live client receives incomplete metadata
	* consumerd: refactor: split read_subbuf into sub-operations
	* consumerd: move rotation logic to domain-agnostic read path
	* sessiond: enforce mmap output type for kernel metadata channel
	* consumerd: tag metadata channel as being part of a live session
	* consumerd: pass channel instance to stream creation function
	* consumerd: cleanup: use buffer view interface for mmap read subbuf
	* consumerd: move address computation from on_read_subbuffer_mmap
	* consumerd: refactor: combine duplicated check_*_functions
	* kerner-ctl: add RING_RING_BUFFER_GET_NEXT_SUBBUF_METADATA_CHECK
	* Add lttng_dynamic_buffer_append_view util
	* Fix: lttng: Destroying session message repeated during destruction
	* Fix: liblttng-ctl: leak of tracker handle in lttng_[un]track_pid
	* Fix: common: fs_handle_seek returns negative value on success
	* Fix: common: abort on rotation after time manipulation
	* Tests: test_exclusion: exclusion after tracing active
	* Tests: `gen-ust-nevents`: add syncpoints
	* Tests: accept built-in kernel modules

2020-05-12 lttng-tools 2.12.1 (International Nurses' Day)
	* API: missing includes in lttng.h
	* API: missing clear and clear-handle includes in lttng.h
	* API: sort lttng.h includes
	* Fix: API: missing end brace for C++ linkage specification.
	* Fix: tests: `-Wstringop-overflow` warning
	* Fix: load: incomplete error handling for load_session_from_file

2020-04-07 lttng-tools 2.12.0 (National Beer Day)
	* lttng-crash(1): document the command's positional argument
	* lttng-sessiond(8): append missing argument to short options
	* lttng-sessiond(8): sort the option list by long option name
	* lttng-relayd(8): mention the `--config` option
	* Fix: lttng-load: support legacy PID tracker specification
	* Fix: sessiond: invalid session configuration on EXCLUDE_ALL policy
	* Fix: relayd: unchecked allocation result of unlinked file pool
	* Clean-up: trace-ust comment still refers to only PID trackers
	* lttng-crash: use `spawn_viewer()` to launch trace viewer
	* lttng-view: clean-up: move `--viewer` code to specific file
	* lttng-crash: clean-up: fix alignment of format string
	* lttng-view: clean-up: rename `parse_options()` -> `parse_viewer_option()`
	* Fix: python: suppress -Wmissing-prototypes warning with SWIG 3.0.10
	* lttng-view: clean-up: use singular form for type name
	* lttng-view: clean-up: remove references to LTTv
	* Fix: relayd: harmonize path format in backward-compat mode
	* Bump session.xsd version to 2.12
	* lttng-relayd(8): normalize style and add details
	* doc/man: refer to Babeltrace 2 instead of Babeltrace 1
	* lttng-clear(1): normalize style and add details
	* Fix: filter-grammar-test: add dependencies between steps
	* Fix: relayd: assertion fails on creation of session by peer < 2.11
	* Fix: relayd: crash on creation of session by peer < 2.11
	* Fix: consumer: fallback to flush when flush empty is unsupported
	* Fix: consumerd: incorrect clear logging statement
	* Fix: sessiond: error reported on session destruction for old modules
	* Fix: sessiond: erroneous error code returned on rotation failure
	* Fix: lttng-destroy: missing newline on session destruction message
	* relayd: clean-up: reference is repeated in comment
	* Typo: 'Descritptor' -> 'Descriptor'
	* Typo: 'Accomodate' -> 'Accommodate'
	* Fix: tracker: NULL pointer dereference after NULL check

2020-03-27 lttng-tools 2.12.0-rc3 (International Stay at Home Month)
	* Fix: remove duplicated AC_INIT directive

2020-03-27 lttng-tools 2.12.0-rc2 (International Stay at Home Month)
	* Fix: sessiond: NULL pointer dereference after NULL check
	* Fix: sessiond: missing goto in error handler
	* Fix: sessiond: user/group name can be leaked on malformed command
	* configure: add -Wmissing-declarations, -Wmissing-prototypes, and more
	* Fix: sessiond: make the --without-lttng-ust version of launch_application_notification_thread static
	* Fix: tests: include callsites.h from callsites.c
	* Fix: relayd: cast idigit argument to unsigned char
	* Fix: tests: make some functions static
	* Fix: tests: add `void` parameter to functions that take no parameters
	* Fix: common: make lttng_trace_chunk_remove_subdirectory_recursive static
	* Fix: common: add `void` parameter to log_add_time declaration
	* CONTRIBUTING.md: harmonize list style with the rest of the docs
	* CONTRIBUTING.md: clarify the guidelines for commit messages
	* Fix: lttng-list: don't warn when the kernel domain has no channels
	* Refactor: lttng-ctl: follow terminology of the tracker documentation
	* lttng: list: replace domain headers with the official names
	* lttng: list: print `per-user` and `per-process` buffer types
	* Docs: overhaul of lttng-track(1) and lttng-untrack(1)
	* Fix: MI: bump MI schema version to 4.0 in mi-lttng.c
	* Fix: sessiond: occasional badfd error on repeated SIGTERM
	* Fix: lttng: incorrect domain list printed when no domain is provided
	* Fix all -Wdiscarded-qualifiers warning instances
	* Remove part of last name to fit in a 80 character line
	* Fix: Tests: trace path wildcards not expanded
	* Fix: Tests: `gen-ust-events` doesn't error out on invalid option
	* Fix: Tests: utils.sh: merge `validate_{directory,folder_is}_empty` functions
	* Fix: Tests: undefined `NR_USEC_WAIT` bash variable
	* directory-handle: print `errno` reason on `unlinkat()` error
	* Fix: lttng-ctl: _handle can be NULL
	* Fix: sessiond: domain subdirectory not deleted on empty clear
	* Ignore -Wincomplete-setjmp-declaration warnings
	* tests: put -no-pie in LDFLAGS instead of CFLAGS
	* Silence `POSIX Yacc` warnings
	* Fix -Wmissing-declarations warnings in filter-parser.y
	* Include cmd-2-2.h in cmd-2-1.h
	* Make create_file function static in gen-ust-tracef.c
	* Make remove_file_from_hierarchy function static in test_directory_handle.c
	* Make fd_count function static in test_fd_tracker.c
	* Add declarations for exported functions in health_exit.c
	* Add declarations for exported functions in health_fail.c
	* Make functions in live_test.c static
	* Add declarations for exported functions in consumer_testpoints.c
	* Make parse_arguments static in base_client.c
	* Fix all -Wmissing-declarations warning instances
	* Fix: fd-tracker: mark symbols as hidden
	* Fix: liblttng-ctl: hide new tracker config symbols
	* configure: add --enable-Werror
	* configure: use AX_APPEND_COMPILE_FLAGS to detect supported warning flags
	* Tests: notification.c: remove extra space
	* Tests: remove unused libhealthexit code
	* Fix: remove broken health monitoring test `test_thread_exit`
	* Fix: directory-handle: use of free'd handle on fstat() error
	* Fix: relayd: use of relay_session ref count before initialization
	* Fix: relayd: unchecked return value when opening relay socket
	* tests: append to AM_CFLAGS instead of overriding it
	* Tests: gen-ust-nevents: use options instead of arguments
	* Tests: Cleanup: test_exclusion: more detailed output
	* Fix: Tests: `test_exclusion` passing for the wrong reason
	* Fix: trace-chunk: useless assignment to 'ret'
	* Fix: lttng: track-untrack: error assigned to wrong variable
	* Fix: relayd: live: unchecked poll set creation return value
	* Fix: relayd: live: unchecked return value when opening relay socket
	* Fix: relayd: unchecked poll set creation return value
	* Fix: lttng: uninitialized pointer free'd when no sessiond is present
	* Fix: tracker: inclusion of internal header in public header
	* Tests: Fix: `wait_on_file()` returns too early
	* Fix: Tests: utils.sh: fix unbound variable
	* Tests: Fix typo: registerd -> registered
	* Tests: Cleanup: remove unused bash variable
	* Typo: 'toogle' -> 'toggle'
	* Fix: lttng-sessiond: control reaches end of non-void function warning
	* Fix: possible null dereference
	* Fix: string might be uninitialized
	* Fix: force the use of our _FORTIFY_SOURCE definition

2020-02-04 lttng-tools 2.12.0-rc1
	* Tests: fix: test_relayd_working_directory fails as user
	* Fix: sessiond: snapshot errors don't clear session's trace chunk
	* Fix: sessiond: bounded snapshot record fails when no streams exist
	* Tests: fix: test_relayd_working_directory fails as root
	* Fix: trace-chunk: dereference after NULL check
	* Clean-up: mi: remove logically dead code
	* Fix: trace-chunk: dereference after null check of old_path
	* Clean-up: unchecked return value
	* Fix: unchecked return value of cds_lfht_destroy()
	* Fix: relayd: return from function without unlocking session lock
	* Clean-up: consumerd: remove unreachable code
	* Clean-up: trace-chunk: remove unreachable code
	* Fix: unchecked return value of lttng_directory_handle_create()
	* Tests: fd-tracker: fix: leak of test paths
	* session-descriptor: fix comment typos in session-descriptor.h
	* Fix: directory-handle: typo in equals method breaks compat build
	* Fix: potential use of uninitialized return value
	* Clean-up: remove instances of loop initial declarations
	* Fix: relayd: register listener threads as rcu readers
	* relayd: track directory handles through the fd-tracker
	* tests: Move to kernel style SPDX license identifiers
	* Fix: include stdlib.h in compat/string.h
	* Cleanup: remove superfluous tests.txt
	* fix: add include guards to compat/path.h
	* Move to kernel style SPDX license identifiers
	* Sync ax_have_epoll.m4 with autoconf-archive
	* .gitignore: ignore gen-kernel-test-events
	* Fix: lttng: sanity check of `--probe` description
	* lttng-view: make babeltrace2 the default viewer
	* lttng-view: clean-up: remove unneeded empty line
	* lttng-view: clean-up: static struct viewers array should be const
	* lttng-view: clean-up: remove commented and unused references to lttv
	* relayd: register fd tracker instance to all created trace chunks
	* relayd: track relayd control connection sockets
	* relayd: track relayd data connection sockets
	* relayd: replace uses of block FDs by the fs_handle interface
	* fd-tracker: restore suspended handles from their inode's path
	* directory-handle: query if instance is backed by a file descriptor
	* directory-handle: make lttng_directory_handle_stat public
	* fd-tracker: replace custom optional implementation by LTTNG_OPTIONAL
	* directory-handle: add an equals method
	* trace chunk: allow associating an fd_tracker to a trace chunk
	* fd-tracker: refactor: extract fs_handle interface from fd_tracker
	* fd-tracker: remove use of VLA for unsuspendable_fd APIs
	* relayd: share the same output directory handle accross sessions
	* Fix: relayd: fail to create session when trace chunk is not found
	* relayd: track the health unix socket with the fd-tracker
	* relayd: track the health thread's poll fd with fd-tracker
	* LTTNG-RELAYD(8): document the --fd-pool-size option
	* relayd: rename fd-cap parameter to fd-pool-size
	* relayd: track the live client connections socket
	* relayd: track the control and data listener socket
	* relayd: track the live listener socket
	* relayd: track stdio output file descriptors
	* relayd: track the live viewer worker thread's epoll fd
	* relayd: track the live listener thread's epoll fd
	* relayd: track the live_conn_pipe with the fd-tracker
	* relayd: track listener's epoll fd using the fd-tracker
	* relayd: track worker thread's epoll fd using the fd-tracker
	* relayd: track clients of the health unix socket with the fd-tracker
	* relayd: track the health quit pipe with the fd-tracker
	* relayd: track the relay_conn_pipe with the fd-tracker
	* relayd: track the quit pipe with the fd-tracker
	* relayd: Don't bypass the fd tracker when closing file descriptors
	* relayd: initialize the global fd tracker from fd_cap option
	* relayd: clean-up: reduce the number of exit paths in main()
	* relayd: add fd-cap option to limit the number of opened FDs
	* Fix: use lttng_tracker_id_status enum values
	* Fix: update context types for Python bindings
	* Fix: lttng: placing probe on symbol starting with `_`
	* Fix: build failure with -fno-common
	* Fix: Tests: missing stream redirect causes test failure
	* Fix: automatic enum value overwrites existing error code value
	* doc: Fix bind address example for lttng-relayd
	* Build fix: dist target builds fails due to missing header file
	* Fix: track-untrack.c: regression of `--all --pid` option ordering
	* track-untrack.c: error out on unknown CLI options
	* Add test_event_tracker to the TESTS variable
	* Add missing `test_event_tracker` to fast_regression
	* Cleanup: track-untrack.c: declare all `int` on the same line
	* Fix: relayd: hostname check is too restrictive
	* Cleanup: remove extra whitespace from include directive
	* Fix: skip start trace for app that are already started.
	* Fix: keep active session state on redundant start command
	* Fix: build failures when `--without-lttng-ust`
	* Sync lttng-ust ABI version in ust-abi-internal.h
	* Sync lttng-modules ABI version in internal kernel-ioctl.h
	* Fix: lttng-clear: invalid free of session name
	* Fix: initialize var_data to NULL
	* tracker: update API documentation
	* Cleanup: remove struct lttng_handle from tracker.h
	* Refactoring: introduce lttng_tracker_ids_serialize
	* Refactoring: move count to an output parameter
	* Refactoring: introduce lttng_tracker_ids data structure
	* Refactoring: use an opaque lttng_tracker_id type
	* Fix: Initialize ret to zero
	* Update track/untrack man page
	* Error early on invalid tracker type for UST domain
	* ust-app: remove dead code
	* Fix: Skip uid registry when metadata key value is 0
	* trackers: bump MI version to 4.0
	* tests: test uid/gid/pid/vuid/vgid/vpid trackers
	* trackers: update list/track/untrack commands
	* trackers: support tracking feature
	* trackers: add sessiond tracker list implementation
	* trackers: update lttng-modules tracer ABI
	* trackers: introduce new tracker types
	* trackers: change error code from "pid" to "id"
	* format: use AfterCaseLabel: true for switch case
	* Fix: sessiond: check for lttng-modules ABI 2.1 rather than 2.8
	* Doc: man page: lttng-relayd LTTNG_RELAYD_DISALLOW_CLEAR env. var.
	* Doc: lttng-clear(8) man page
	* tests: mi for clear command
	* tests: lttng clear command
	* tests: gen-ust-events: abort() on argument error
	* tests: gen-ust-events: add touch and wait sync points before exit.
	* tests: gen-ust-events: use options instead of arguments
	* relayd: live: implement support for clear feature
	* relayd: implement support for clear feature
	* relayd: viewer-stream: introduce viewer_stream_close_files and viewer_stream_sync_tracefile_array_tail
	* relayd: viewer_session: expose viewer_session_set_trace_chunk_copy symbol
	* trace-chunk: implement no-op and delete release commands
	* sessiond: document effect of rotated_after_last_stop on clear
	* sessiond: snapshot: set trace chunk to NULL before closing it
	* relayd: return invalid protocol error on close chunk disallowed clear
	* relayd: set has rotated only for explicit rotations
	* trace-chunk: Introduce chunk "path", relayd session "ongoing_rotation", sessiond session "rotated"
	* consumer: add extra debug output
	* relayd: add extra debug output
	* sessiond: implement clear command
	* sessiond: add clear notifier
	* sessiond: introduce cleared_after_last_stop
	* sessiond: implement ust app clear session
	* sessiond: implement kernel clear session
	* sessiond: implement consumer clear channel
	* consumer: implement clear channel
	* common trace-chunk: introduce lttng_trace_chunk_get_name_overridden
	* common: trace-chunk: track all files within a chunk
	* sessiond: cmd_rotate_session: introduce command argument
	* sessiond: query relayd configuration for availability of clear feature
	* relayd: Implement get_configuration relayd protocol command
	* common: index and trace-chunk file creation/open API change
	* common: index: remove redundant separator for empty channel string
	* sessiond: refactoring: introduce start/stop_kernel_session
	* sessiond-comm: add clear command support to consumer protocol
	* sessiond-comm: Document feature branch specific commands range
	* relayd: tracefile array: Allow head position to skip ahead
	* relayd tracefile array: add tracefile_array_reset
	* common dynamic-array: Introduce dynamic array clear
	* relayd: environment variable to disable clear command
	* lttng: Implement lttng clear session command
	* lttng-ctl: Expose sessiond cmd_clear_session command
	* common error: Add errors for clear feature
	* ust-consumer: Expose user space clear buffer operation
	* kernel-ctl: Expose kernel clear buffer operation
	* Test: rotate_utils.sh: consider chunk archive with ust/ as empty
	* Send ust and kernel domain directory handle to consumer
	* Fix: consumer: do not flush on transition from NULL chunk
	* Fix: consumer: honor "active" flush flag
	* Fix: sessiond cmd.h: include missing lttng-sessiond.h
	* Fix: sessiond: ust-app: per-pid buffers: Create empty ust/ directory
	* Fix: utils: utils_stream_file_path separator
	* Fix: consumerd: use packet sequence number for rotation position
	* align.h: Implement ALIGN_FLOOR macro
	* Fix: relayd: per-pid live: no new metadata vs close
	* Fix: relayd: use packet sequence number for rotation position
	* Fix: relayd stream.c: LTTNG_OPTIONAL_GET address confusion
	* Fix: optional.h macro missing parentheses and guards
	* Fix: use of strnlen breaks build on Solaris 10
	* dynamic-array: fix documentation of lttng_dynamic_pointer_array_get_pointer
	* Fix: make dist fails on sdt-probe test with autotools v1.16+
	* Fix: tests: metadata presence on relayd is not deterministic
	* Fix: move testpoint after state update
	* Make lttng_directory_handle reference countable
	* Clean-up: apply clang-format to the newly added fd-tracker
	* Fix build: fd-tracker is not part of librelayd
	* Add git-review config
	* doc: fix typo in lttng-enable-event man page
	* tests: make functions static in test_notification.c
	* tests: make functions static in test_utils_compat_poll.c
	* tests: make functions static in test_utils_expand_path.c
	* tests: make functions static in test_session.c
	* tests: make functions static in test_uri.c
	* tests: include foo.h in foo.c
	* compat: remove always true assertion in compat-poll.c
	* Fix: sessiond: RCU read lock imbalance on get trace chunk id error
	* tests: add declaration for test_function in userspace-probe-elf-binary.c
	* tests: add declarations for functions in gen-syscall-events-callstack.c
	* tests: make entry_handler static in ini_config test
	* Format lists in src/common/Makefile.am
	* sessiond: make functions static in ust-registry.c
	* sessiond: make thread_consumer_management function static
	* sessiond: make thread_rotation function static
	* Fix: build: ust -> kernel mix-up in noinst_SCRIPTS
	* Fix: relayd: missing metadata stream causes all traces to be skipped
	* lttng-ctl: add local declarations for obsolete functions in lttng-ctl.c
	* sessiond: remove unused log_job_destruction function
	* sessiond: make disable_context static
	* sessiond: make ltt_sessions_ht_alloc static
	* relayd: make functions static in ctf-trace.c
	* Make validate_url_option_combination static in create.c
	* Make _utils_expand_path static
	* Remove unused function uri_create
	* uri: put `inline` at beginning of strpbrk_or_eos declaration
	* tests: put `static` keyword at beginning of variable declaration
	* common: make some functions static in mi-lttng.c
	* consumerd: make lttng_consumer_close_all_metadata static
	* README.md: libuuid is no longer a dependency
	* Replace libuuid with internal implementation
	* consumerd: remove unused function consumer_del_data_stream
	* m4: sync ax_pthread.m4 with autoconf archive
	* configure.ac: Remove duplicated CMD_DESCR_ROTATE definition
	* Fix: tests: missing argument in test output print statement
	* Silence bogus warning when building with old GCC versions
	* Clean-up: open_pipe_cloexec() has useless boilerplate
	* Clean-up: tests: unchecked closedir value in test_fd_tracker
	* Fix: fd-tracker: dereference of lttng_inode after NULL check
	* Fix: fd-tracker: error path lead to null dereference of handle
	* Fix: fd-tracker: crash on close of partially initialized handle
	* Tests: add fd-tracker tests for the unlink operation
	* fd-tracker: use lttng_inode to store fs_handle's path
	* fd-tracker: add the lttng-inode interface
	* fd-tracker: add the unlink operation to fs handles
	* Test: add a unit test for the fd tracker
	* fd-tracker: add pipe management wrappers to fd-tracker
	* fd-tracker: add epoll/poll management wrappers to fd-tracker
	* fd-tracker: add an fd-tracker util to common
	* relayd: close stdin on launch
	* Fix: relayd: fully initialize viewer stream before publishing it
	* Clean-up relayd: session_release can be marked as static
	* Fix: relayd: don't send streams if there is no metadata
	* Fix: update apps on untrack only when session is active
	* Fix: consumerd: assert on null trace chunk on session restart
	* Fix: sessiond: don't wait for a rotation from a null chunk to finish
	* Fix: sessiond: duplicated rotation notification sent
	* Fix: relayd: remove assert of non-null stream trace chunk on rotate
	* Docs: verb/noun confusion in comment
	* Fix: sessiond: no rotation performed from null chunk to new chunk
	* Fix: invalid use of destructor in dynamic pointer array
	* Fix: relayd: check for a trace chunk before writing a packet
	* Fix: relayd: viewer session trace chunk not released on detach
	* Require automake >= 1.12
	* relayd: rename viewer_session_set_trace_chunk and hide it
	* Fix: relayd: session trace chunk is copied too late
	* Fix: overly restrictive datetime regexp rejects valid dates
	* Fix: relayd: disallow 0-length session names for 2.4+ peers
	* Docs: RELAYD(8): document the --group-output-by-session/host options
	* Tests: unit testing for backward compatibility of group-output-by-session
	* relayd: Add backward compatibility for --group-output-by-session
	* Tests: regression testing for lttng-relayd --group-output-by-*
	* Tests: lttng_snapshot_add_output_ok: allow specifying output type
	* relayd: introduce --group-output-by-session
	* Fix: sessiond: ust: deadlock with per-pid buffers
	* relayd: close viewer stream trace chunk earlier on release
	* Fix: relayd: put chunk reference when closing stream
	* Fix: relayd: tracefile rotation: viewer opening missing index file
	* Tests: fix shellcheck warning
	* Tests: base path: lttng load for session configuration
	* Cleanup: remove unused internal lttng_session_descriptor_get_base_path
	* Refactor: Move set session path to own function
	* Fix: move set base_path of session to URI configuration
	* Fix: tests: re-add link to urcu-bp for _LGPL_SOURCE tests
	* Fix: tests: use DL_LIBS variable in ust multi-lib test
	* Fix: lttng: initialize sessions pointer to NULL
	* Use pkgconfig to detect and configure liblttng-ust
	* Fix: check for dtrace and sdt.h before enabling SDT uprobe tests
	* Fix: consumerd: crash occurs when taking snapshot of ust channel
	* Fix: trace-chunk: log the cause of file open failures
	* Fix: relayd: live: crash when creating viewer streams
	* Fix: relayd: live: crash on attach to a session without trace chunk
	* Fix: relayd: live: some listed sessions are not attacheable
	* Fix: relayd: don't put un-acquired trace chunk reference
	* Fix: relayd: don't put un-acquired viewer trace chunk reference
	* Fix: consumerd: NULL pointer dereference during metadata sync
	* consumerd: clean-up: stream attribute accessed without locking stream
	* Tests: namespace tests fail to build on older libc
	* Fix: check for lttng-ust >= 2.11 at configure
	* sessiond: build fails in --without-lttng-ust configuration
	* Tests: use "kill -0" for app existence check in NS tests
	* Tests: add kernel namespace context change tests
	* Tests: add UST namespace context change tests
	* Tests: add kernel namespace contexts tests
	* Tests: add UST namespace contexts tests
	* MI: add support for namespace and uid/gid contexts
	* Add UST uid/gid contexts
	* Add kernel uid/gid contexts
	* Add UST namespace contexts
	* Add kernel namespace contexts
	* Update local copy of ust-abi.h to reflect addition of ns contexts
	* Tests: fix: tmp dir can be a symlink
	* Docs: relayd: document LTTNG_RELAYD_WORKING_DIRECTORY env variable
	* Docs: relayd: document the --working-directory/-w option in man page
	* Introduce LTTNG_RELAYD_WORKING_DIRECTORY environment variable
	* Tests: add an lttng-relayd working directory test
	* relayd: introduce --working-directory/-w options
	* Fix: compile fails for x32 arch
	* Typo: occured -> occurred
	* Fix typo 'Attemp' -> 'Attempt'
	* Fix: sessiond: use system LTTng-UST headers when available
	* doc/man: use specific revision date for each manual page
	* lttng-rotate.1.txt: update voice and document the `archives` subdir.
	* Fix: sessiond: unbalanced health register/unregister on error
	* Fix: sessiond: NULL thread_state provided to pthread_cleanup callback
	* Fix: sessiond: leak of trace chunk on destruction error
	* common: cleanup error message mentioning mkdir
	* Fix: sessiond: session destruction errors are unreported
	* Fix: consumer: double unlock of rcu read lock on error
	* Fix: sessiond: application channel creation failure stops start cmd
	* sessiond: clean-up: enhance logging on event allocation failure
	* Fix: sessiond: don't assert on event creation error
	* sessiond: clean-up: typo in ust-app.c comment
	* .gitignore: ignore vscode files
	* Fix: lttng-elf.c: dereferencing pointer before null check
	* Fix: sessiond: unbounded elf section data size allocation
	* Fix: sessiond: double socket close on allocation failure
	* Fix: sessiond: TOCTOU error on save of session configuration
	* Fix: tests: replace truncation-prone logging helper
	* DIST OOT: use build_dir version.i file
	* Introduce EXTRA_VERSION_PATCHES
	* Use EXTRA_VERSION_NAME and EXTRA_VERSION_DESCRIPTION
	* Introduce EXTRA_VERSION_NAME and EXTRA_VERSION_DESCRIPTION
	* Fix: relayd: Dereference after null check
	* Fix: sessiond: app sock and notif shm not created by the main thread
	* Fix: sessiond: client socket not created by the main thread
	* Fix: relayd: Dereference before null check
	* Fix: relayd: unchecked return values
	* Fix: ust-consumer.c: Double unlock of channel lock
	* Fix: sessiond: Dereference before null check
	* Fix: sessiond: Dereference after null check
	* Fix: relayd: Explicit null dereferenced
	* Cleanup: relayd: Logically dead code
	* Fix: enable_events.c: typo in `WARN()` message
	* Cleanup: enable_events.c: fix erroneous comment
	* Cleanup: relayd: identical code for different branches
	* Fix: common: Unchecked return value of `closedir()`
	* Fix: relayd: Dereference after null check
	* Fix: Tests: test_session.c: Structurally dead code
	* Fix: session-descriptor.c: Dereference before null check
	* Fix: common: Dereference after null check
	* Fix: test_utils_compat_poll.c: Unchecked return value
	* Fix: liblttng-ctl: wrong variable used during argument validation
	* Fix: liblttng-ctl: ABI-breaking size change of lttng_session struct
	* Fix: liblttng-ctl: config and mi strings inadvertantly exported
	* Fix: liblttng-ctl: compat_sync_file_range inadvertantly exported
	* Fix: liblttng-ctl: poll compatibility symbols inadvertently exported
	* Fix: lttng-ctl: unvalidated session destruction handle API arguments
	* Docs: document the session destruction handle API
	* Fix: Tests: Segfault in `test_utils_expand_path()`
	* Fix: lttng-ctl: missing __cplusplus closing brace
	* Fix: trace chunk reported unknown before close command execution
	* Fix: sessiond: leak of application socket on chmod failure
	* sessiond: clean-up: silence warning that agent event is leaked
	* Fix: tests: leak of prefix on error to register lttng namespace
	* Fix: use newly created event filter for condition check
	* Fix: lttng-crash: detect truncated files
	* Fix: sessiond: fs.protected_regular sysctl breaks app registration
	* relayd: clean-up: mix-up between LTTNG_PATH_MAX and LTTNG_NAME_MAX
	* Fix: destroy command: put consumer output after destroy notifier
	* Refactor: remove logically dead code
	* Fix: Null check before destroying health_sessiond
	* Fix: Move initialization of queue_pipe_fd after null check of handle
	* Fix: release reference to new chunk on copy error
	* Fix: Close socket handle on error
	* Fix: lttng: out-of-bound copy of arguments in 'view' command handler
	* Revert "lttng: fix: out-of-bounds copy of original 'view' command arguments"
	* Fix: relayd: session destruction does not complete in live mode
	* Add a copy method to the trace chunk interface
	* relayd: move viewer stream chunk reference release to destroy
	* relayd: move relay_session locking outside of make_viewer_streams
	* Fix: release reference to trace chunk on index file creation failure
	* trace-chunk: clean-up: mark close command properties as static const
	* trace-chunk: clean-up: misleading label name
	* ust-consumer: fix: metadata stream lock taken before destroy
	* sessiond: fix: memory leak of section name in elf parser
	* kconsumer: clean-up: initialize ctf_index before populating it
	* sessiond: fix: strncpy called with source length
	* sessiond: fix: possible unaligned access in packed structure
	* relayd: clean-up: strncpy uses the length of the source as length
	* lttng: fix: out-of-bounds copy of original 'view' command arguments
	* lttng: clean-up: silence bogus string truncation warning
	* sessiond: clean-up: mixed log levels enums used to look-up event
	* sessiond: fix: possible unaligned access in packed structure
	* sessiond: fix: possible unaligned access in packed structure
	* sessiond: fix: possible unaligned access in packed structure
	* sessiond: fix: possible unaligned access in packed structure
	* lttng-ctl: fix: possible unaligned access in packed structure
	* lttng-ctl rotate: fix: possible unaligned access in packed structure
	* runas: fix: possible unaligned access in packed structure
	* consumer: fix: possible unaligned access in packed structure
	* inet: fix: possible unaligned access in packed structure (inet/inet6)
	* consumer: fix: unaligned accesses to index fields
	* lttng-sessiond: clean-up: set free'd pointer to NULL
	* lttng: fix: potential 0-length allocation in pid list parsing
	* Tests: fix: uninitialized session_id used on list_sessions failure
	* Tests: fix: uninitialized values passed to close() on error
	* Clean-up: assert that get_count_order() returns a positive value
	* Clean-up: suppress bogus scan-build warning
	* Tests: fix: leak caused by misuse of realloc in multi-lib-test
	* sessiond: clean-up: init ret value of _session_set_trace_chunk_no_lock_check
	* sessiond: fix: print_escaped_ctf_string mishandles empty string
	* lttng-ctl: fix: lttng_data_pending confuses communication status
	* relayd: fix: rotate_truncate_stream() assumes non-null next chunk
	* Fix: dereference of NULL pointer in stream_write()
	* Fix: report bytecode_push failure when pushing symbol
	* Fix: only invoke PERROR() on failure to close sessiond_socket
	* Clean-up: lttng: check status returned when checking rotation state
	* Fix: communication error unreported in relay_rotate_session_streams
	* Fix: unreported error in relay_close_trace_chunk
	* Clean-up: remove dead assignment from ht cleanup thread launcher
	* Clean-up: remove dead assignment from thread_rotation
	* Clean-up: remove dead assignment in setup_channel_trace_path
	* Clean-up: remove dead assignments while setting session trace chunk
	* Fix: report path truncation on addition of local uri to consumer
	* Clean-up: lttng: silence warning in regenerate command handler
	* Clean-up: lttng: silence warning in metadata command handler
	* Clean-up: remove NULL check on sesison_create mandatory arguments
	* Fix: session may be NULL in relay_create_session error path
	* Clean-up: silence erroneous leak warning
	* Fix: leak of lttng_elf_shdr in lttng-elf.c
	* Fix: leaked chunk reference in lttng_consumer_create_trace_chunk
	* Clean-up: remove unused stream file creation and unlink functions
	* Fix: use the trace chunk to truncate streams on late rotation
	* Clean-up: format using remaining buffer len rather than total len
	* Fix sessiond: report flush errors on session stop
	* Fix: leak of trace_path on error in ust_app_snapshot_record
	* Fix: uninitialized directory handle finalized on error path
	* Fix: release reference to created chunk if it can't be published
	* Fix: destroy chunk registry on element creation failure
	* Fix: return NULL on trace chunk registry failure
	* Fix: forward fatal error in evaluate_condition_for_client()
	* Fix relayd: check for NULL in session_put
	* Fix typo in regenerate statedump test util
	* Fix: time constants already defined on macOS
	* Fix: missing include strings.h for bcopy on Solaris 10/11
	* Fix: strndup does not exist on Solaris 10
	* Fix: strnlen is not defined on Solaris 10
	* Fix: redefinition of USEC_PER_SEC macro on macOS
	* Fix: sessiond does not build without lttng-ust support
	* Fix: sessiond: handle NULL control output in session descriptor base path getter
	* Tests: metadata env scope values
	* Support LTTNG_KERNEL_SESSION_SET_CREATION_DATETIME of lttng-modules
	* Support LTTNG_KERNEL_SESSION_SET_NAME of lttng-modules
	* Metadata: add env fields to ease lttng path hierarchy creation for viewer
	* Fix: lttng_directory_handle_init fails on opening base relayd output
	* Fix: init_session_output_path is valid for peer >= 2.11 only
	* Fix: chunk state is not set when relayd does not support trace chunks
	* Fix: check validity of a stream before invoking ust flush command
	* Fix: namespace our gettid wrapper
	* pprint.m4: add missing copyright header
	* Fix: reintroduce lazy kernel modules load, fix empty syscall list
	* Fix: check for lttng modules presence before testing
	* sessiond: use epoll()/poll() instead of select()
	* lttng-ctl: notifications: use epoll()/poll() instead of select()
	* epoll/poll compat: expose interruptible API
	* tests: invoke full_cleanup from script trap handlers, use modprobe -r
	* Cleanup: test: don't stop relayd twice
	* Fix: test: utils.sh: exit from process on full_cleanup
	* Fix: utils.sh: handle SIGPIPE
	* Fix: tests: error handling in high throughput limits test (v2)
	* Improve handling of test SIGTERM/SIGINT (v2)
	* Fix: incorrect conversion specifier used with size and padding
	* Fix: incorrect conversion specifier used with packet size
	* Fix: mismatch of ust_app_get_size_one_more_packet_per_stream prototype
	* Fix: mismatch of ust_app_snapshot_record prototype
	* Fix: lttcomm_consumer_close_trace_chunk_reply undefined without UST
	* Fix: kernel/ust snapshot backward compat for 2.10 relay
	* relayd protocol: reply path for close chunk and create session 2.11
	* Fix: streaming and snapshot backward compat for relayd < 2.11
	* Fix: relayd: create_index_file error handling
	* Fix: don't use newlines in logging message
	* Fix: relayd outputs traces of legacy sessionds to home dir
	* relayd comm: add base path to create session
	* tests: add base-path tests
	* test utils: support URI in lttng_snapshot_add_output
	* Fix: close consumer sockets before waiting for them
	* Fix: consumer: put each chunk on teardown
	* Fix: validate that session, host and basepath are legal
	* Fix: honor base path for network URIs
	* Fix: bindings import segfaults on missing hash_key_u64
	* Cleanup: typo: overriden -> overridden
	* Fix: relay: relay_rotate_session_streams uninitialized return value
	* Fix: test_kernel rotation: expect 60 rather than 64
	* Save registration time for app
	* Fix: tests: update rotation ust number of tests
	* Clean-up: missing word `lock` in comment
	* Use case-scope error labels handling LTTNG_CONSUMER_ROTATE_CHANNEL
	* Use case-scope error labels handling LTTNG_CONSUMER_PUSH_METADATA
	* Use case-scope error labels when handling LTTNG_CONSUMER_GET_CHANNEL
	* Use case-scope error labels handling LTTNG_CONSUMER_ROTATE_CHANNEL
	* Use case-scope error labels handling LTTNG_CONSUMER_DESTROY_CHANNEL
	* Use case-scope error labels handling LTTNG_CONSUMER_STREAMS_SENT
	* Use case-scope error labels when handling LTTNG_CONSUMER_ADD_STREAM
	* Clean-up: set stream's channel pointer to NULL after releasing ref
	* Fix: mark consumer channels as logically deleted during deletion
	* Cleanup: mark utils_get_home_dir as returning a const string
	* Fix: use utils_get_home_dir for anonymous trace chunk path
	* Fix: tests: typo in rotation util
	* Fix: keep ust/kernel session items around for destroy notifier
	* Tests: add a test for the "skip non-empy" rmdir flag
	* Fix: rmdir recursive: skip non-empty directories with flag
	* Fix: uninitialized variable returned by relay_rotate_session_streams
	* Fix: allow quiet rotation at destroy of live session
	* Fix: relayd: live: read index file header
	* Fix: index: use parenthesis around define
	* Fix: test_crash: don't kill first app twice
	* Fix: perform a rotation to a null trace chunk on session destruction
	* relayd: log destination trace chunk of ROTATE_STREAMS command
	* Clean-up: declare dummy pipe payload as a char instead of a string
	* Fix: consumer: assert that stream chunk != NULL (not channel)
	* relayd fix: trace chunk is reclaimed before close command
	* Fix: rotation of a stopped session hangs indifinitely
	* Fix: initialize kernel stream max subbuffer size on creation
	* Fix: use relay_id from ust_session or kernel_session consumer
	* Fix: lttng-ctl: public session.h control API: restore 0 success return value
	* Fix: remote kernel stream paths contain too much information
	* Fix: destroy command: send credentials with command
	* relayd: open live viewer files from the current stream's trace chunk
	* Fix: don't perform an automatic session rotation in snapshot mode
	* Fix: incorrect time unit used when waiting on destruction handle
	* relayd: implement file and session rotation on top of trace chunks
	* Fix: remove assertions of the existence of a trace chunk
	* Fix: only create trace chunk if the output of a session supports it
	* Fix: use stream's current tracefile count rather than the max
	* relayd: use bool for is_metadata relay_stream attribute
	* relayd: create stream files relative to a session's trace chunk
	* Fix: leak of consumer_output when using an explicit snapshot output
	* Fix: reception buffer of control connection is leaked
	* Fix: ensure a newline is printed before exit on client destroy
	* Send session creation time to relay daemon when supported
	* relayd: remove unnecessary allocation in session path formatting
	* relayd: add remote trace chunk close command
	* Create userspace buffers using ua_sess effective credentials
	* Use lttng_credentials instead of bespoke uid/gid members in ua_sess
	* relayd: add remote trace chunk creation command
	* Add .clang-format
	* Don't allow slashes and dots in overriden trace chunk names
	* relayd: Retrieve a relay_session's trace chunk on creation
	* relayd: Transmit current trace chunk id in create_sesssion command
	* Use a "comm" variant of the LTTNG_OPTIONAL helper in sessiond-comm
	* Remove unused relay daemon commands
	* relayd: create an implicit trace chunk on session creation
	* relayd: create sessiond trace chunk registry on session creation
	* Use directory handle to rename trace chunk directory
	* Docs: add directory handle header documentation
	* Add rmdirat and renameat to run-as commands
	* Print the location of trace chunk produced at session destruction
	* Docs: misleading documentation of compat_epoll_create
	* Remove unused ust_sock member of command_ctx
	* Tests: clarify the tap output of the kernel session rotation test
	* Fix: wait for the completion of implicit session rotations
	* Fix: don't hide EBADF error subbuffer write
	* Tests: don't expect a UST directory after inactive per-PID rotation
	* Tests: remove check for an empty chunk produced on destruction
	* Fix: metadata stream is not marked as quiescent after packet commit
	* Create stream files relative to a stream's current trace chunk
	* Cleanup: remove duplicated code in snapshot record command
	* Fix: run_as_mkdirat returns value of errno
	* Fix: double close of directory fd in runas worker
	* relayd: add the sessiond_trace_chunk_registry interface
	* Move index initialization to ctf-index.h
	* Export utils_stream_file_path outside of common/utils.c
	* Add file creation/unlinking utils to directory handle
	* relayd: send sessiond uuid and session id as part of create session
	* Transmit sessiond uuid to consumerd on launch
	* Add lttng_uuid_copy() util
	* Add lttng_uuid_is_nil() util
	* Add lttng_uuid_is_equal util to lttng_uuid
	* Add a consumer daemon INIT command
	* Generate a UUID on lttng-sessiond launch
	* Remove unneeded creation of the UST domain sub-directory
	* .gitignore: ignore ccls and clangd files
	* Create an initial trace chunk on first start of an ltt_session
	* Allow direct access to the dirfd of a directory handle
	* Create a consumer daemon trace chunk registry on launch
	* Add the trace chunk and trace chunk registry interfaces
	* Add a time_to_iso8601_str() utility
	* Add a method to create a directory handle relative to another one
	* Maintain a channel-per-session_id hash table in the consumers
	* Document lttng_directory_handle_init_from_dirfd
	* Allow lttng_directory_handle to be moved
	* Add a copy method to lttng_directory_handle
	* Remove unused bitfield.h header
	* Tests build fix: undefined MAGIC_VALUE macro
	* Build fix: undeclared variable in poll compat
	* Fix: error when listing sessions with no session
	* Update base test for binding
	* Fix: python binding: expose domain buffer type
	* Clean-up: correct typo from epoll to poll
	* Clean code base from redundant verification
	* Change lttng_poll_wait behaviour of compat-poll to match compat-epoll
	* Fix: hang in thread_rotation when using compat-poll
	* Adapt poll layer behaviour to match the epoll layer
	* Change LTTNG_POLL_GETNB behaviour for poll flavor
	* Add Unit test to poll compatibility layer
	* Fix: lttng_poll_mod calls compat_(e)poll_add
	* Fix: getenv can return null
	* Bump LTTNG_UST_ABI to 8.0
	* Fix: directory handle credentials parameter is not const
	* doc: Add reference to USDT probes
	* Clean-up: Remove double buffer initialisation
	* Fix: getgrnam is not MT-Safe, use getgrnam_r
	* Fix: logging: log_add_time() save/restore errno
	* Fix relayd: initialize beacon to -1ULL
	* Fix: relayd: handling of lttng_read errors >= 0
	* Harmonize pprint macro across projects
	* Update the ac_define_dir macro from the autoconf archive
	* Harmonize rw_prog_cxx_works macro across projects
	* Namespace check_sdt_works custom macro
	* Update macros from the autoconf archive
	* Fix: relayd not spawned on default-url live session creation
	* Clean-up: remove empty line in lttng create command
	* Add mkdirat utils and runas wrappers
	* Clean-up: remove commented code from test
	* Fix tests: NULL pointer dereference in ltt_session unit tests
	* Fix tests: NULL pointer dereference in ust channel unit tests
	* Fix tests: NULL pointer dereference in ltt_ust_context unit tests
	* Fix tests: NULL pointer dereference in ltt_session unit tests
	* Log the wait-shm's path on shm_open failure
	* Generate session name and default output on sessiond's end
	* Move completed trace archive chunks to an "archives" sub-folder
	* Fix: lttng_rotate_session does not handle socket close
	* Fix: hide internal libcommon time utilities
	* lttng: make the configuration file interface const correct
	* Fix: command reply message is leaked for variable-len replies
	* Fix: skip test when ust doesn't have perf support
	* Tests: check for lttng-modules presence
	* Fix: Properly sanitize input parameter
	* Fix tests: link libpause_consumer on liblttng-ctl
	* tap-driver.sh: flush stdout after each test result
	* Fix tests: snapshot size validation failure runs too many test cases
	* Fix tests: the tree origin can be a symlink itself
	* Fix tests: skip test_getcpu_override on single core systems
	* Enforce DL_LIBS value instead of hard coded -ldl
	* Fix: Add POPT_CFLAGS to lttng_CFLAGS
	* Fix: consumer snapshot: handle unsigned long overflow
	* Clean-up: hide internal kernel_consumer_add_channel() symbol
	* Fix: no-output sessions do not enforce snapshot constraints
	* Fix: wrong error code returned by kernel_snapshot_record()
	* Clarify incorrect channel output type logging message
	* Mark lttng_kconsumer_snapshot_channel as static
	* Docs: clarify the meaning of the snapshot_mode flag in ltt_session
	* lttng: clean-up the printout of snapshot outputs
	* lttng: clean-up printout of session output destination
	* Docs: document the format of the lttng_session path member
	* Docs: lttng-ctl has no default live timer period
	* Fix: missing include can cause structures to not be packed
	* Fix: check illegal combinations of ctrl-url/data-url/ouput/set-url
	* Fix: lttng_uri structure must be packed as it is used for IPC
	* Fix: missing mentions of tracing session rotation in basic help
	* Fix: release reference to ltt_session on error instead of free()
	* Fix relayd: session leaked on communication error during creation
	* Prevent channel buffer allocation larger than memory
	* Fix: destroy called twice on quit pipe
	* Use uuid_to_str() when formatting metadata
	* Add an internal uuid formatting utility
	* Remove duplicate check for dlopen
	* Tests: take multiple snapshots in streaming mode
	* Fix: don't destroy the sockets if the snapshot was successful
	* Fix: run-as thread deadlock on itself in restart error path
	* Fix: session list lock must be held on session put operation
	* Support minute and hour as time suffixes
	* Test fix: passing bool argument to va_start is undefined
	* Fix: missing rcu read locking in trigger "unregister all" command
	* Fix: create_kernel_session asserts on failure
	* Fix: only free trace_path when it is dynamically allocated
	* Fix: wrong error check on kernel session creation
	* Fix: don't put() thread on shutdown failure
	* Fix: dereference on NULL pointer on allocation failure
	* Fix: leak of filter bytecode and expression on agent event re-enable
	* Test fix: python logging test spams its output
	* Fix: leak of lttng-consumerd global HTs in run-as worker
	* Fix: leak of sessiond configuration on launch of run-as worker
	* Fix: leak of rundir config string
	* Fix: only synchronize application configuration on tracing start
	* Fix: run_command_wait() handle partial write
	* Fix: do not repurpose iterator while it is being used
	* Fix: handle_notification_thread_command: handle partial read
	* Fix: notification thread: free session trigger list on error
	* Fix: notification thread: RCU-safe reclaim of hash table nodes
	* Fix: error logged on partial recvmsg() in MSG_DONTWAIT
	* Print UTF-8 SI suffix only when allowed by the locale
	* Cleanup: duplicate LDADD of libcommon for utils unit tests
	* Move time utils to their own time.c file
	* Fix: sessiond: don't allocate buffers and files for inactive sessions
	* Cleanup: ust start/stop trace
	* Fix: relayd: rotation pending off-by-one
	* Fix: tests: test_crash should start sessions
	* Fix: missing session reference release on kernel poll update
	* Fix: set client socket permissions after launch of client thread
	* Fix: use assignment-suppression for unused sscanf arguments
	* Fix: report initialization error of app registration thread
	* Fix: report initialization error of client thread
	* Cleanup: consumer socket creation debug msg always prints fd:-1
	* Cleanup: remove unused label
	* Fix: may be used uninitialized warnings
	* userspace-probe: tests: add testcase for unsupported instrumentation
	* userspace-probe: Print error on binary not found
	* userspace-probe: Print error for unsupported instrumentation mode
	* Fix: use sys/types.h for ssize_t on Cygwin
	* Add *.exe to gitignore for Cygwin
	* Revert stubbing of runas functions
	* Revert stubbing of unix socket functions
	* Fix: warning 'fd' may be used uninitialized
	* Fix: worker structure is leaked in run_as process
	* Fix: ensure the ht clean pipe is empty before processing quit pipe
	* Perform the clean-up of application notify sockets in main thread
	* Clean-up: remove redundant exit labels from sessiond initialization
	* Make the launch of the application registration thread blocking
	* Stop the application registration thread before orphaned threads
	* Rename ust-thread to notify-apps
	* Teardown the notification thread after the sessiond clean-up
	* Launch the consumer management thread using lttng_thread
	* Stop sessions before destroying on teardown of session daemon
	* Remove the sessiond "ready" counter mechanism
	* Load session configurations from lttng-sessiond's main thread
	* Launch the kernel management thread using lttng_thread
	* Launch agent management thread using lttng_thread
	* Mark lttng_pipe as const where possible
	* Launch the application notification thread using lttng_thread
	* Launch the application management thread with lttng_thread
	* Launch application registration thread using lttng_thread
	* Launch the ust registration dispatch thread using lttng_thread
	* Launch the client management thread using lttng_thread
	* Launch the timer thread using lttng_thread
	* Launch the rotation thread using lttng_thread
	* Fix: flush the rotation thread's job queue on exit
	* Stop rotation pending check timer from the rotation thread
	* Launch the notification thread using lttng_thread
	* Launch the health management thread using lttng_thread
	* Launch the ht-cleanup thread using lttng_thread util
	* Add a thread utility class and thread list
	* Don't perform an implicit rotation on session stop
	* Wait for the destruction of sessions before tearing down main thread
	* Fix: rotation_unavailable returned on failure to read time
	* Fix: mark rotation pending check timer is never marked as disabled
	* Acquire a reference to a session when a timer is active
	* Reference count ltt_session objects
	* Fix: typo 'occured' -> 'occurred'
	* Fix: typo 'retrive' -> 'retrieve'
	* Fix: typo 'convet' -> 'convert'
	* Fix: typo 'leat' -> 'least'
	* Fix: max_t/min_t macros are missing cast on input
	* Fix: Connect timeout arithmetic in inet/inet6 (v4)
	* Fix: cmd_snapshot_record can return unexpected error codes
	* Docs: document why a negative socket may be passed
	* lttng-enable-event.1.txt: fix SDT acronym, add missing "are supported"
	* lttng-enable-rotation.1.txt: --timer option should be fairly precise
	* doc/man: remove AUTHORS section
	* lttng-enable-event.1.txt: uprobe: update style and content
	* doc/man: add links between man pages about session rotation
	* lttng-enable-event.1.txt: document dynamic user space probes
	* lttng-{enable,disable}-rotation.1.txt: both types can be specified
	* lttng-disable-rotation.1.txt: remove LIMITATIONS section
	* lttng-enable-rotation.1.txt: add that SIZE/PERIOD are approximations
	* lttng-rotate.1.txt: lttng-relayd(8) also has --output option
	* Fix: sessiond: ust_app_rotate_session error handling
	* Fix: sessiond: snapshot: handle consumer return codes
	* Fix: consumer: snapshot error return code
	* Fix: sessiond: consumer.c: rotation error handling
	* Fix: consumer: rotation error return codes
	* Fix: create_channel_per_pid: remove channel on error
	* Fix: channel errors on local stress-tests
	* Fix: channel_ust_create: remove channel on agent error
	* Fix: cmd_rotate_session() returns unexpected error codes
	* Fix: session rotation logging statement references snapshot
	* Clean-up: typo in logging message Totation -> Rotation
	* Fix: rotation error may leave session in "ONGOING" state
	* Fix: session_list lock must be held to launch a rotation
	* Add an ASSERT_LOCKED(lock) macro
	* Clean-up: move global sessiond symbols out of main.o
	* Fix: split index and data file rotation logic
	* Fix: trace_archive_id is not sent in add_stream command
	* Fix: condition unsubscription error leaves session locked
	* Fix: rotation thread does not unregister from RCU on init error
	* Remove unused nr_stream_rotate_pending from consumer channel
	* Fix: session destruction blocks indefinitely if rotation is ongoing
	* Clean-up: remove non-existent function's declaration
	* Always choose large event header for UST channels
	* Fix relayd: stream index file created in the wrong directory
	* relayd: add payload logging to session rotation commands
	* relayd: rename stream prev_seq to prev_data_seq
	* Fix: take index seq number into account for rotation pending check
	* Fix: take index sequence number into account for data pending check
	* relayd: keep track of prev_index_seq in relayd_stream
	* Fix: session conditions not evaluated at subscription/registration
	* Remove unnecessary check of output parameter
	* Allow get_next_notification to return when interrupted
	* Fix: register rotation thread as RCU thread
	* Docs: comment typo fix (accomodates -> accommodates)
	* Fix: uninitialized variable may be used in local rotation check
	* Rename sessiond-timer.[hc] to timer.[hc]
	* Fix: rotation may never complete in per-PID buffering mode
	* Fix: perform local data pending before checking data pending with relayd
	* Fix: missing header breaks the cygwin build
	* Fix: double put on error path
	* Fix: holding the stream lock does not equate to having data pending
	* Fix: skip uid registry when metadata key is 0
	* Docs: document the meaning of a ust app channel key set to 0
	* Fix: acquire stream lock during kernel metadata snapshot
	* Fix: skip closed session on viewer listing
	* Fix: use LTTNG_VIEWER_ATTACH_UNK to report a closed session
	* Doc: withinin -> within
	* Fix: cleanup relayd sockets on rotation command communication error
	* Fix: perform relayd socket pair cleanup on control socket error
	* Fix: relayd control socket mutex is not destroyed
	* Tests: do not bound test app iterations when in background mode
	* Tests: add missing rotation and autoload tests to check target
	* Tests: remove temporary folder
	* Tests: remove mi result files when done
	* Tests: Remove unused set +x
	* Tests: Kill relayd after sessiond to ensure a clean tear down
	* Tests: Remove unused variable
	* Tests: Use stop relayd from utils.sh
	* Tests: remove declaration already present in utils.sh
	* Tests: added test_autoload to noinst_SCRIPTS
	* Fix: Memory leak on run_as worker restart error path
	* Fix: non-zero return of open handled as error
	* Fix: global run_as worker lock released during restart
	* Fix: runas worker attempts to send invalid fd to master
	* Cleanup: remove superfluous empty line
	* Fix runas: don't attempt close negative fd
	* Fix: tests: missing frame pointer for callstack test on some compiler
	* Set version to 2.12.0-pre
	* Add release name and description to configure.ac

2018-08-31 lttng-tools 2.11.0-rc1 (National Trail Mix Day)
	* Missing kernel test files in dist target
	* elf: support dynamic symbol table lookup
	* Fix: leak of event attributes on copy failure
	* Test fix: check length of input string
	* Test cleanup: wrong indentation style in test_ust_data.c
	* Test fix: leak of exclusions on allocation error
	* Fix: runas check fd value before calling close()
	* Docs: multiple rotation schedules can be active
	* Docs: immadiate rotations can be performed with active schedules
	* Fix: ret variable is used instead of cmd_ret in disable-rotation
	* Cleanup: unused assignation on rotation error
	* Cleanup: unused assignation on rotation already pending
	* Fix: unchecked writer open element return value
	* Remove unused session current_archive_location accessor
	* Fix: incorrect error message on regenerate missing argument
	* Fix: incorrect error message on metadata missing argument
	* Fix: snapshot command mishandles missing arguments
	* Cleanup: improve readability of filter expression condition
	* Fix: potential use of NULL path in stat() use
	* Cleanup: unused assignment of curr_data_ptr in lttng_elf
	* Fix: uninitialized data/ret in runas offset commands
	* Fix: uninitialized fd value used in runas
	* Fix: report setegid()/seteuid() failure in runas
	* Fix: leak of binary path on location creation error
	* Fix: missing return value check in notification serialization
	* Fix: possible leak of path in _utils_expand_path
	* Fix: silent truncation in _utils_expand_path
	* Cleanup: unused assignment of ret_code in ROTATE_CHANNEL
	* Fix: passing null to closedir() on error
	* Fix: unchecked access to pids array
	* Fix: missing jump to error on allocation failure
	* Cleanup: unused assignation of ret value
	* Cleanup: unused assignation of ELF parsing error
	* Fix: leak of probe_locs on error
	* Fix: leak on agent event listing error
	* Fix: possible null dereference on communication error
	* Fix: returned pids may be uninitialized
	* Fix: invalid destruction of lookup_method
	* Fix: unused value in SDT probe description parsing
	* Fix: use of uninitialized variable in C++ userspace-probe testapp
	* Fix: use of uninitialized value in error path
	* Fix: leaking string by setting pointer to NULL before freeing it
	* Fix: passing negative param to dup(2) on error
	* Fix: use-after-free in UST test case
	* Fix: leak in error handling of userspace param parsing
	* Fix: Remove dead code in fd passing function
	* Cleanup: avoid duplicating userspace-probe desc twice
	* Fix: memory leak in userspace probe param parsing
	* Fix: missing error handling goto statement in runas
	* Fix: use-after-free on error of lttng_event creation and copy
	* Add function instrumentation type accessors to function location type
	* Docs fix: probe location description is erroneous
	* Fix: event leak during event load
	* Hide lttng_event_copy symbol
	* Docs: document new lttng_event methods
	* Fix: leak of lookup_method_name in uprobe load
	* Docs: distinction  between function and tracepoint probe locations
	* Fix: abort on unknown location type in destructor
	* Clean-up: location lookup destroy can be type-agnostic
	* Fix: hide internal uprobe configuration symbols
	* Fix: event copy constructor frees original event on error
	* Fix: userspace probe accessors are not const-correct
	* Cleanup: use lttng_* string utility functions
	* Silence macro redefinition warnings on macOS
	* Fix: lttng-save command producing wrong XML fields
	* Error out if filter expression is attached to unsupported event types
	* Implement userspace-probe regression tests
	* Implement lttng-mi for userspace-probe
	* Implement lttng-save and lttng-load for userspace-probe
	* Implement lttng-list for userspace-probe
	* Add --userspace-probe kernel event type
	* Implement $PATH binary searching function for userspace-probe
	* Add userspace location in ltt_kernel_event structure
	* Implement userspace probe location extraction and registration
	* Implement 2-step registration of userspace probe events
	* Use lttng_event_{create, destroy} to manage lttng_event struct
	* Fix: remove unnecessary stderr output on expected behaviour
	* trace_ust_create_event() now returns an error code
	* trace_kernel_create_event() now returns an error code
	* run_as: add extract SDT probe offsets command
	* run_as: add extract ELF symbol offset command
	* run_as: adapt run_as implementation to support complex payloads
	* Add SDT userspace probe location
	* Add lttng_event copy constructor
	* Implement SDT probe description parsing function
	* Add lttng_userspace_probe_location copy constructor
	* Cleanup: move session saving of K(ret)probe and function tracing to dedicated functions
	* Implement ELF function offset extraction function
	* Add utils_expand_path_keep_symlink fonction
	* Fix: kernel adds creds on recv with SO_PASSCRED unix socket option
	* lttng-ctl: implement listing of userspace probe locations
	* Add invalid userspace probe location error
	* Fix: memory is not zeroed on first set_capacity
	* Add a util to create a buffer view from a raw buffer
	* Fix: dynamic buffer mishandles setting capacity to 0
	* lttng-ctl: send userspace probe location on enable_event
	* lttng-ctl: locate extended event attributes at reception
	* Add utils to send file descriptors to the sessiond
	* lttng-ctl: add accessors of userspace probe location to lttng_event
	* lttng-ctl: add userspace probe location interface
	* Add lttng_dynamic_buffer_get_capacity_left util
	* Add ALIGN_TO util to macros.h
	* lttng-ctl: add an lttng_event_extended distinct from communication structures
	* lttng-ctl: move lttng_event functions to a new file
	* Tests: possible NULL dereference in rotation notification test
	* Clean-up: remove dead code from rotation test
	* Fix: size of concrete class used in memcpy of base class
	* Tests: add a session rotation ongoing/completed notification test
	* Clean-up: remove useless check of event name
	* Fix: mix of lttng_error_code and cmd_error_code enums
	* Add notification session rotation hooks
	* Implement rotation command handlers in notification system
	* Fix: return 0 on successful location serialization
	* Fix: return size from location deserialization function
	* Add a trace archive location accessor to the session API
	* Fix: notification channel not released on error path
	* Implement rotation ongoing/completed commands
	* Fix: remove session_info from sessions_ht on destruction
	* Bind newly registered triggers to session or channel objects
	* Docs: clarify the contents of channel_infos_ht
	* Add a hashing function for session rotation conditions
	* Build a list of triggers applying to a given session on creation
	* Add a comment clarifying the ownership of triggers
	* Fix: use condition's type to compute its hash
	* Cleanup: enforce const-correctness in notification thread
	* Fix: add session_info object to sessions_ht
	* Add session rotation ongoing/completed notification commands
	* Add session rotation ongoing/completed conditions
	* Fix: use the correct condition type in logging statements
	* Add a by-address equality short-circuit to condition comparison
	* Fix: assume that conditions are valid before being compared
	* Cleanup: remove superfluous argument to consumed size create
	* Docs: prefer 'release' to 'free' in API documentation
	* Add trace archive location serialization/deserialization methods
	* Tests: add notap versions of start/stop tracing helpers
	* Tests: typo in notification test case description
	* Use the dynamic buffer to serialize notification objects
	* Fix: consumers don't honor protocol on rotate pending relay command
	* Fix: client_list_element leak on failure to evaluate a condition
	* Fix: possible NULL dereference in uri_parse_str_urls()
	* Typo fix in uri parsing error logging
	* Fix: unchecked return value of cds_lfht_destroy
	* Fix: clean-up sessiond condig structure on initialization error
	* Fix: unchecked return value in sessiond path configuration
	* Fix: path leak on formatting error
	* Fix: use of uninitialized 'nb_pipes_fd'
	* Clean-up: useless assert that unsigned value is >= 0
	* Test fix: size schedule leaked in a schedule API test case
	* Fix: unreported error on rotate timer stop failure
	* save/load: support session rotation schedule descriptors
	* mi: serialize relay rotation locations
	* Fix: use negative code for errors in enum
	* Add rotate-client to .gitignore
	* Docs: adapt the rotation client example to the API changes
	* Remove generic error reporting from the lttng client
	* Test: session rotation schedule API
	* rotation-api: introduce rotation schedule descriptors
	* rotation-api: pass session name explicitly
	* Set consumer's verbosity to the max level on --verbose-consumer
	* Fix: Tests: use -no-pie linker option only when available
	* Fix: check for removal of session's shm_path in destroy()
	* Document the contents of the shm_path fields of the ust session registry
	* Implement MI and save/load support for callstack contexts
	* Tests: Add callstack contexts tests
	* Add kernel and userspace callstack event context
	* Fix: missing context enum values in session xml schema
	* lttng-enable-event(1): update the Filter expression section
	* Filter: document ust app ctx limitation
	* Filter: add FILTER_OP_RETURN_S64 instruction
	* Filter: make bitwise and, or, xor higher prio than relational expressions
	* Filter: Update shifting tests
	* Add () for bitwise and comparator tests
	* Filter: Implement rshift, lshift, bit not operators
	* Filters: generate backward compatible "get field" and "get context" instructions
	* Filter: index array, sequences, implement bitwise binary operators
	* Implement support for brackets in filter expressions
	* Tests: add session auto-loading test cases
	* Replace deprecated readdir_r() with readdir()
	* Bash completion: ignore namespace for xmllint parsing
	* Use https in links to the lttng.org website
	* Log the session to which a ROTATE_PENDING command applies
	* Initialize relay_stream chunk_id to its session's current trace archive id
	* Pass the consumerd stream's trace archive id to the relayd
	* Fix: propagate archive id to the consumer daemon on stream creation
	* Typo in ust consumer log message (channek -> channel)
	* Use dynamic payload for the add stream realyd command
	* Dynamic payload for relayd create session command
	* Fix: backward relayd communication compatibility.
	* Add unused attribute to lttng_to_index_major param
	* Replace strncpy by lttng_strncpy in lttngctl session configuration API
	* Replace strncpy by lttng_strncpy in utils_stream_file_name()
	* Use dynamic buffer to build session configuration path
	* Replace strncpy by lttng_strncpy in session config
	* Silence strncpy warning emitted by GCC 8 in XSD path construction
	* Silence strncpy warning emitted by GCC 8 in lttng_strncpy()
	* Silence strncpy warning emitted by GCC 8 in ini parser
	* Fix: use signed variable for refcounting of consumer_relayd_sock_pair
	* Cleanup: sobjd is never used by reply_ust_register_channel()
	* Cleanup: chan is never used by save_agent_events()
	* Cleanup: open_memstream and close_memstream compat is never used
	* Remove unnecessary inclusions of version.h
	* Add multilib test files to .gitignore
	* Cleanup: ua_sess is never used create_ust_app_channel_context()
	* Cleanup: consumer_data is never used by update_kernel_stream()
	* Cleanup: app is never used by alloc_ust_app_session()
	* Cleanup: ust_session_id unused by buffer_reg_uid_consumer_channel_key
	* Cleanup: wpipe already contain kernel_tracer_fd
	* Cleanup: domain type is never used by send_consumer_relayd_socket()
	* Cleanup: uid and gid are never used by run_as_noworker()
	* Cleanup: sessiond_id is never used by relayd_create_session_2_*
	* Cleanup: sock is never used by ask_channel()
	* Cleanup: ctx is never used by monitor_timer()
	* Cleanup: signo is never used by metadata_switch_timer
	* Cleanup: channel is never used by metadata_cache_check_version()
	* Cleanup: relayd id is never used by write_relayd_metadata_id()
	* Cleanup: attr is not used by open_ust_stream_fd()
	* Cleanup: *_domain are never used by create_session
	* doc/man: update rotation man pages to follow API's terminology
	* Print consumerd32/64/kernel configuration
	* Test: change use of space for tabs in utils.sh
	* Tests: add duplicated providers tests
	* Tests: add function to validate the number of an event name in metadata
	* Tests: allow the use of regular expressions to match events
	* Fix: calling ht_{hash, match}_enum with wrong argument
	* Fix: probes should be compared strictly by events metadata
	* Test for lttng-logger
	* Test mi: rename sessiond load directory constant
	* mi: support "add-context --list"
	* Fix: test_ust-dl is generated at configure-time
	* Fix: cmd line options overwrite env variable config options
	* Fix: perform the initialization memory barrier out of loop body
	* Clean-up: explicit mb before decrementing lttng_sessiond_ready
	* Clean-up: use a define for support thread count
	* Port: fix format warnings on Cygwin
	* Add missing include for ssize_t on Cygwin
	* Fix: sessions with agent channels fail to load
	* Fix: don't wait for the load thread before serving client commands
	* Add test_utils_parse_time_suffix to .gitignore
	* Clean-up: kernel_consumer_add_stream() does not need to be public
	* Fix: sessiond fails to launch on --without-ust configuration
	* Fix: agent thread poll set creation failure results in deadlock
	* Fix: test uses sizeof() on the wrong operand of strncpy
	* Rename kernel_consumer_send_channel_stream()
	* Rename consumer_init_channel_comm_msg()
	* Cleanup: send_fds functions are not const-correct
	* Remove unused ltt_session look-up result
	* Clean-up: reduce indentation level of create_channel_per_uid()
	* Enforce locking assumptions during channel creation
	* Cleanup: misleading create_ust_app_session() name
	* Rename rotate_count to current_archive_id
	* Cleanup: name of send_sessiond_channel() is misleading
	* Print the git version used to build from a distribution tarball
	* Docs: lttng-version uses the intransitive form of "broke"
	* Fix: relayd streams can be leaked on connection error
	* Cleanup: fix typo in relayd comment
	* Fix: ret may be used uninitialized in sample_channel_positions()
	* Cleanup: ret is unused in relay_process_data_receive_header()
	* Fix build: in_git_repo is used before being set
	* Fix: partial writes of padding are not checked
	* Propagate whether a connection was closed cleanly or after an error
	* Fix: relayd protocol field present from minor 8 is not checked
	* Add DBG statement for TCP keep-alive options
	* Fix: relay_recv_metadata does not check for partial write
	* Use non-blocking recvmsg() for data/ctrl connections of lttng-relayd
	* Fix: unprivilieged sessiond agent port clashes with root sessiond
	* Fix: erroneous use of extern keyword
	* Fix: failure to launch agent thread is not reported
	* Fix: agent may not be ready on launch
	* Cleanup: misleading variable name
	* Fix: checking for existing session daemon is done after daemonizing
	* Fix: null pointer dereference in lttng_rotation_handle_destroy
	* sessiond: rename syscall.h so it does not conflict with system
	* Tests: Handle rotations happening on two separate days during testing
	* Tests: Clean trace_path after each subtest
	* Tests: Use for loop for identical validation
	* Tests: Count number of chunk using ls
	* Fix: quiet option is not set in sessiond-config
	* Fix: hold consumer socket lock for consumer_send_msg
	* Fix: use signed member to transport enum value
	* Fix: use off_t type for lseek function return value to avoid overflow
	* Extend the rotation API to provide network trace archive locations
	* Increase LTTNG_HOST_NAME_MAX from 64 to 255
	* Add lttng_trace_archive_location lttng-ctl API
	* Clarify notification channel info ht destruction error log
	* Fix: goto end after end label
	* Check return value of cds_lfht_destroy
	* Fix: destroy schedule attr
	* Tests: fix oot and dist for rotation tests
	* Tests: add rotation tests scripts to noinst_SCRIPTS and EXTRA_DIST
	* Tests: SESSION_NAME defined on each iteration of kernel rotation test
	* Tests: Reduce scope of TRACE_PATH to a function
	* Tests: PID_RELAYD is never used
	* Tests: use functions from utils.sh in rotation tests
	* Tests: consolidate session creation with a uri parameter in utils.sh
	* Tests: use modprobe to test for the presence of lttng-modules
	* Tests: missing license header in rotation utils
	* Tests: missing parenthesis in userspace rotation test
	* Tests: use enable_ust_lttng_channel_ok instead of a custom lttng invocation
	* Tests: remove TRACE_PATH at the end of the rotation test only
	* Tests: exit $out gets overridden by EXIT trap from tap/tap.sh
	* Tests: Use SIGTERM instead of SIGKILL
	* Add --post-script to tap-driver.sh
	* Tests: add rotation tests to the "check" target
	* Fix: fail on truncation of kernel channel path
	* Fix: fail on truncation of snapshot path
	* Dedicated error message when relay does not support rotations
	* Fix: add missing includes for embedded help
	* Document tracing session rotation features
	* Check for pending notification on notification channel activity
	* Clarify error logging statement of rotation thread
	* Fix: rotation state marked as completed before relayd has completed
	* Fix: cmd_rotate_set_schedule returns positive error codes
	* Fix: unchecked return value of domain_mkdir()
	* Add initial "no rotation" state to session rotation states
	* Fix: erroneous use of kernel consumer error codes
	* Fix: unhandled prev_seq initial value
	* Size-based rotation
	* Add lttng_notification_channel_has_pending_notification()
	* Fix: channel lock must be taken to check for pending notifications
	* Docs: typo in notification channel header
	* Fix: circular inclusion of lttng.h results in warning
	* Remove unneeded domain.h include
	* Docs: wrong enum value used in evaluation API description
	* Remove unneeded forward declaration in condition headers
	* Add the GMT offset in the rotated chunk path
	* Tests for the session rotation feature
	* Fix validate_trace_empty test check
	* Example client to use the session rotation API
	* Save, restore and list the rotation parameters
	* Session consumed size notification
	* Fix: previous channel total is not updated
	* Add likely/unlikely annotations on channel sample handling path
	* Separate session info from channel info in notification thread
	* Rotate timer
	* Simplify lock handling in enqueue_timer_rotate_job()
	* Use utils_parse_time_suffix in create and enable-channel command
	* Introduce utils_parse_time_suffix
	* Fix: use metadata key instead of fd for consumer rotation command
	* Fix: double similar condition
	* Fix: missing type definitions in mi-lttng-3.0.xsd
	* Fix: out of tree build fails on missing header
	* lttng rotate command
	* Relay rotate pending command
	* Rotate command
	* Sessiond timer thread
	* Fix: ret is uninitialized on standard path
	* Sessiond rotation thread
	* Consumer rotate a channel
	* Consumer perform the rotation when extracting a packet
	* Consumer rotate stream
	* Implement the RELAYD_ROTATE_PENDING relay daemon command
	* Implement the RELAYD_ROTATE_STREAM relay daemon command
	* Channel rotate pipe between sessiond and the consumers
	* Support to dump the kernel metadata cache from the beginning
	* Add ustctl_flush_buffer to the consumer API
	* Common consumer functions to read current positions
	* Dedicated function to wakeup the consumer metadata pipe
	* Keep read-only copies of fields from the channel to the stream
	* Cleanup: keep the number of pipes used by poll in a variable
	* Fix: kernel snapshot handling of EAGAIN
	* Command to rename a folder
	* Fix: create_output_path() relayd util is not const-correct
	* Fix: relayd send_command() util not logging on failure
	* Clean-up: relayd send_command() helper is not const-correct
	* Clean-up: remove unneeded cast
	* Create the session and domain directories on start
	* Command to make a directory on the consumer or relay
	* Use free running metadata channel key between sessiond and kernel consumer
	* Fix: leftover use of channel fd as identifier
	* Clean-up: use LTTNG_PATH_MAX rather than PATH_MAX
	* Keep the base directory of a relay session separate
	* Change trace_path to session_root_path and chunk_path
	* Make kernel tracer version global to the session daemon
	* Clean-up: typo fixes in notification thread comments
	* Bump minor notification protocol version
	* Clean-up: hash table utils are unnecessarily non-const
	* Fix: stream_per_chan_id_ht should allow duplicates
	* Fix: lttng logs nanoseconds
	* Fix: use a free running channel key between sessiond and kernel consumer
	* Tests: Fix: arm64 use sys_openat instead of sys_open
	* Fix: set errno with value from SO_ERROR on error.
	* Fix: missing value handling for lttng_event_context_type
	* Fix: Use SOL_SOCKET level for SO_KEEPALIVE on all platform
	* Fix: error out on leftover arguments
	* Load preemptirq lttng-modules probe
	* Fix: reply to version check even on protocol mismatch
	* Fix: error handling on relay version check
	* Document add-context limitation for started session
	* Fix: add-context cannot be performed after a session has been started
	* Fix: duplicated kernel consumer socket locking
	* Tests: Change syscall tests to use `gen-syscall-events` testapp
	* Tests: Add test app to generate syscalls
	* Tests: Move script synchronization functions to utils library
	* Fix: remove unused event types in MI XML schema
	* Updating lttng-ust-ctl header file
	* Tests: cleanly exit from test apps on reception of SIGTERM
	* Document consumer socket locking assumptions
	* Fix: consumer socket lock not held during snapshot record
	* Fix: set_relayd_for_snapshot does not acquire the consumer socket lock
	* Fix: send_channel_monitor_pipe does not take the consumer socket lock
	* Document the locking assumptions of consumerd-relayd socket passing
	* Assert that the consumer lock is held while sending FDs to consumerd
	* Assert that the consumer socket lock is taken during communication
	* Tests: refuse to run test suite if lttng processes are present
	* Fix: metadata channel leak when using the snapshot tracing mode
	* Fix: do not flag consumer as disabled on relayd comm failure
	* Fix: cleanup inactive FDs in the consumer polling thread
	* man: document dead-peer detection for lttng-relayd
	* lttng-relayd: use TCP keep-alive mechanism to detect dead-peer
	* Tests: add kernel notification tests to the root regression list
	* Docs: clarify which socket serves as the ust_app_ht_by_sock's key
	* Docs: refer to apps_notify_thread instead of 'the other thread'
	* Docs: describe the apps_thread's working in function header
	* Tests: race between consumer pause and trace start/stop
	* Clean-up: remove unneeded rcu_read_lock acquisition
	* Docs: document locking assumption of function
	* Fix: notification thread not notified of channel creation on app error
	* Clean-up: consumer_add_metadata_stream always returns 0
	* Fix: scope ownership of a stream for ust-consumer
	* Clean-up: reduce scope of dyanamically-allocated string
	* Fix: using putenv() and free()-ing the value is invalid
	* Clean-up: unnecessary duplicated call to exit()
	* Fix: unknown consumer type considered a libc error
	* Fix: consumerd(64/32)_lib_dir can be NULL
	* Fix: evaluate trigger condition on registration
	* Fix: nonsensical message printed by lttng track/untrack
	* Fix: O_CLOEXEC is erroneously used on pipe creation
	* Fix: wrong parameter to fcntl in pipe_set_flag
	* Fix: use lttng_clock_gettime instead of clock_gettime
	* Fix: close channel monitor pipe after killing the metadata_timer_thread
	* Fix: path of snapshots with a relay and default URI
	* Fix: use file based synchronization for python logging test
	* Test: add file based synchronization point for python test app
	* Fix: wrong use of the relay_streams_sent in snapshot
	* Fix: the return code of lttcomm_send_unix_sock is signed
	* Fix warning: src/bin/lttng/utils.c: cast incompatible pointer
	* Fix: src/common/pipe.h: include <sys/types.h> for ssize_t and mode_t
	* Fix: detect dlmopen() and disable corresponding tests if not available
	* Fix: Use tmpdir for intermediary files
	* Fix: include scripts for distribution
	* Fix: typo in lttng-consumerd file default
	* Fix: missing NULL checks in logging statements
	* Fix: kernel consumerd sock paths need rundir substitution
	* Test: kernel testing for notification
	* Fix: create lttng run dir regardless of user privilege
	* Fix: Make version.h generation work with dash
	* lttng-enable-event(1): filtering: specify that `$ctx.cpu_id` is available
	* centralize sessiond config option handling
	* Fix: buffer overflow warning in python bindings
	* Tests fix: BT2 does not output the metadata of a trace collection
	* Update version to 2.11.0-pre
	* Typo: occured -> occurred
	* Fix: ensure kernel context is in a list before trying to delete it
	* Harmonize return code conventions in context handling
	* Fix: uninitialized return value on error path
	* lttng enable-channel: disallow --overwrite and --blocking-timeout
	* lttng-enable-channel(1): reword --blocking-timeout, document in description
	* lttng enable-channel: --blocking-timeout opt.: use `inf` instead of -1
	* Cleanup: remove unused internal structure
	* Cleanup: remove unnecessary extern qualifier
	* Docs: document the trigger API
	* Docs: document the notification API
	* Docs: document the notification channel API
	* Docs: document the evaluation API
	* Docs: document the lttng_condition API
	* Docs: document the lttng_buffer_usage condition API
	* Docs: document the lttng_action_notify action type
	* Docs: document the lttng_action API
	* Fix: ambiguous ownership of kernel context by multiple channels
	* lttng-enable-channel(1): move --output description to maintain A-Z ordering
	* lttng-enable-channel(1): document --monitor-timer
	* Prettify channel listing
	* Use pipe instead of eventfd() for notification command queue
	* Cleanup: useless reset of ret to zero
	* Fix: ret is never used on error_open code path
	* Fix: use error code path instead of break when errors happen before execl
	* Cleanup: ignore useless check of execl() return value
	* Fix: wrong variable assignment on error
	* Cleanup: remove dead increment of pointer
	* Fix: missing error handling in use of print_tabs()
	* Cleanup: functions shall have a single exit point
	* Cleanup: remove dead assignment
	* Cleanup: remove dead assignment
	* Cleanup: remove dead assignment
	* Cleanup: remove dead assignment
	* Cleanup: remove dead assignment
	* Cleanup: remove dead assignment
	* Cleanup: remove dead assignment
	* Cleanup: remove dead assignment
	* Cleanup: remove dead assignment
	* Cleanup: dead assignment
	* Fix: ret is used instead or err to set an error code
	* Cleanup: remove dead assignment
	* Cleanup: remove dead assignment
	* Fix: report error using fd instead of ret
	* lttng-enable-channel(1): reword and fix style of --blocking-timeout description
	* Fix: doc/man: use a single XSL file and match local names
	* Tests: rework select_poll_epoll test to improve verbosity on failure
	* Only print relevant session statistics on stop
	* Fix: NULL passed to memcpy in error path
	* Only print relevant session statistics in channel listing
	* Uniformize the printing of units in session listing
	* Fix: lost packet accounting always lost on snapshot
	* Fix: report error on session listing
	* Tests: don't assume a 4K page size in test_notification
	* Fix live-comm: merge TCP socket write-write sequence in a single write
	* Docs: move notification thread documentation to header
	* Docs: grammar fix in comment
	* Fix: evaluate condition/trigger on subscription
	* Test: Trigger conditions is evaluated on subscription
	* save/load: add blocking_timeout attribute to channel
	* Introduce monitor_timer_interval to session configuration schema
	* Test: Reduce scope of variables used in multi app notification test
	* Hide internal buffer-view symbols
	* Hide internal session configuration symbols
	* Hide internal dynamic-buffer symbols
	* Hide internal string-utils symbols
	* Typo: occured -> occurred
	* Fix: join consumer timer thread
	* Cleanup: use CMM accessors for consumer_quit variable
	* Fix: test_utils_expand_path passes NULL to sprintf
	* Fix: reject triggers if they depend on an unavailable feature
	* Fix: check lttng-modules ABI version for RING_BUFFER_SNAPSHOT_SAMPLE_POSITIONS support
	* Fix: Send remove channel to notification thread only when necessary
	* Fix: notification test: resources leak and return handling
	* Fix: parse monitor timer parameter as an unsigned 64-bit integer
	* Introduce "--blocking-timeout" channel parameter
	* Fix: lttng list of channels should return errors
	* Fix: discard event/lost packet counters
	* Fix: test: proper redirection of stderr to stdout
	* Docs: notification comment refers to a structure by its former name
	* Fix: missing errno.h include in time.h compat header
	* Cleanup: remove stale file from .gitignore
	* Disable binaries on platforms where they are not supported
	* Cleanup: add silent rules support for docs
	* Cleanup: popt library detection
	* Cleanup: remove duplicated pthread detection code
	* Cleanup: remove unused m4/libxml.m4
	* Cleanup: bison and flex detection
	* Cleanup: merge two instances of AC_CHECK_FUNCS
	* Cleanup: lttng-ust library detection
	* Cleanup: kmod library detection
	* Cleanup: dlmopen detection
	* Cleanup: uuid library detection
	* Fix: Don't override user variables within the build system
	* Fix: registry can be null on lookup
	* Test: Replace test relying on pselect6(2) man page ambiguity
	* Tests: channel subbuffers must be larger or equal to PAGE_SIZE
	* Tests: regression testing for notification API
	* Tests: add consumer testpoint to pause data consumption
	* Fix: explicitly send client credentials during handshake
	* Test: utils: introduce LTTNG_SESSIOND_ENV_VARS
	* Test: utils.sh: use getconf to start either 32 or 64 consumerd
	* Optimization: remove unnecessary buffer resizes on partial recvs
	* Docs: improve the documentation of the dynamic buffer interface
	* Add comment to round_to_power_of_2()
	* Clean-up: simplify the implementation of dynamic buffer set_capacity
	* Fix: space left in buffer may be uninitilized on capacity increase
	* Assert that dynamic buffer size <= capacity
	* Clean-up: improve readability of dynamic buffer append condition
	* Fix: inbound buffer may be set too short on partial command reception
	* Clean-up: fix misleading code alignment
	* Clean-up: remove useless comment
	* Fix: return LTTNG_ERR_INVALID_TRIGGER on validation failure
	* Fix: missing includes in buffer-usage.h
	* Unit tests for notification api
	* Run unit tests before regression tests
	* Fix: semaphore semantics are expected from notification command eventfd
	* relay: use urcu_ref_get_unless_zero
	* Fix: use "flush empty" ioctl for snapshots
	* Fix: lttng-consumerd: cpu hotplug: send "streams_sent" command
	* Fix: lttng-sessiond: cpu hotplug: send channel to consumer only once
	* Fix: lttng-sessiond: cpu hotplug stream number mismatch
	* Tests: use SIGKILL to shutdown daemons in test_thread_exit and test_tp_fail
	* Fix: consumer_timer_signal_thread_qs waits on LTTNG_CONSUMER_SIG_SWITCH
	* Revert "Fix: futex can be free'd while used by waker thread"
	* Fix: thread exit vs futex wait/wakeup race
	* Fix: use lttng_waiter instead of futex in notification thread
	* Add lttng_waiter utils
	* Fix: pthread_join on thread start error
	* Fix: missing check on notification thread join
	* Fix: status_loc argument of waitpid() is used on error
	* Fix: leak of deserialized trigger sent from client
	* Clean-up: missing static qualifier on internal function
	* Fix: duplicate values used in lttng_evaluation_status enum
	* Fix: missing header inclusions in buffer-usage.h
	* Fix: COMPAT_EPOLL_PROC_PATH is available from Linux 2.6.28
	* Fix: skip empty revents in notificationthread
	* Clean-up: warning caused by unused label
	* Fix: futex can be free'd while used by waker thread
	* Fix: missing header causes build failure with --disable-epoll
	* Fix: return NULL pointer on memory allocation failure
	* Clean-up: unused variable warning in poll compat
	* doc: how to trace consumerd with valgrind
	* Cleanup: initialize kernel ioctl ABI structures to 0
	* Cleanup: initialize data to 0
	* Fix: consumer data lock deadlock caused by monitor timer
	* Fix: assert() on null index_file in lttng_index_file_write()
	* Fix: fail on relayd lookup when finding a relayd is expected
	* Clean-up: use lttng_read() wrapper instead of read()
	* Fix: NULL pointer dereference in lttng_condition_serialize
	* Fix: Exclusion check iterates multiple times on same array
	* Fix: return of free'd string on error in strutils_split()
	* Fix: free of uninitialized value on error path
	* Silence bogus Coverity warning of uninitialized value
	* Silence bogus Coverity warning of uninitialized value
	* Silence bogus Coverity warning of uninitialized value
	* Silence bogus Coverity warning of uninitialized value
	* Fix: dereference before null check of channel attributes
	* Fix: memory leak of client_list_element
	* Fix: unchecked lttng_dynamic_buffer_set_size return value
	* Add 2.10 release beer name and description
	* Build: missing includes for ssize_t definition on Cygwin
	* Fix: consumer-timer.c includes ust-ctl.h even --without-lttng-ust
	* Fix: missing header in Makefile breaks the dist build
	* Tests fix: tracefile-size tests assume PAGE_SIZE subbuffers
	* Fix: use of uninitialized channel attributes in client
	* Clean-up: only declare help_msg in embedded help case
	* Fix: use of session_name instead of channel_name in condition hash
	* Fix: lttng-live: send HUP reply when per-PID streams are gone
	* Test: use output_path instead of argument position
	* Bump default kernel, and UST per-uid/per-pid buffer size
	* Fix: syscall_table_nb_entry invalid value when no syscalls TPs are defined
	* Add string-utils to dist subdirs in libcommon
	* Tests fix: initialize kernel extended channel attributes
	* Tests fix: initialize UST extended channel attributes
	* lttng-enable-event(1): document globbing patterns in event names and filters
	* Tests: add globbing pattern tests to test_java_log4j
	* Tests: add globbing pattern tests to test_java_jul
	* Tests: add globbing pattern tests to test_python_logging
	* Tests: add globbing pattern tests to test_valid_filter
	* Tests: add globbing pattern tests to test_invalid_filter
	* Tests: add globbing pattern tests to test_event_wildcard
	* Tests: add globbing pattern tests to test_exclusion
	* Tests: utils: add gen-ust-nevents-str util
	* Tests: add string-utils library unit tests
	* Add support for "full" star globbing patterns in event names and filters
	* Add string-utils convenience library
	* doc: lttng-destroy(1): document --no-wait option
	* doc: lttng-stop(1): replace tabs with spaces
	* doc/man: add typical `$` and `#` prompts to command lines
	* bin/lttng: remove double "help" command and sort list
	* lttng help: use command's --help directly
	* Add --enable-embedded-help option to embed --help messages in binaries
	* Expose monitor timer interval to lttngctl and client
	* Tests: add placeholder symbol to allow unit tests to link
	* Implement consumer ring buffer position sampling
	* Add new snapshot ustctl API
	* Add kernctl RING_BUFFER_SNAPSHOT_SAMPLE_POSITIONS command
	* Handle trigger registration and unregistration in sessiond
	* Start notification subsystem thread in sessiond initialization
	* Clean-up: fix comment type in lttng-consumerd.c
	* Add the sessiond notification-handling subsystem
	* Clean-up: comment fix in agent_thread_manage_registration
	* Add client notification API
	* Add utils_get_count_order_u64 to utils
	* Implement poll mask modification support in poll wrappers
	* Add the container_of() macro to macro.h
	* Add pipe_release utils to the pipe wrapper
	* Add named pipe support to the pipe wrapper
	* Add non_block version of functions to UNIX socket wrapper
	* Add lttng_buffer_view util
	* Add lttng_dynamic_buffer util
	* Clean-up: fix typo in sessiond main.c comment
	* Docs: fix comment describing ust_cmd_queue
	* Port: Link with no-undefined on Windows
	* Port: win32 DLLs don't support hidden symbols
	* Port: add cygwin support to endian compat
	* Fix: Remove unused headers
	* Fix: tests: register thread for RCU operations.
	* Fix: Lazily initialize max poll set size in poll compat
	* Fix: null dereference on error path for create_ctx_type
	* Fix: test_ust_data dereference of null pointer
	* x is never reused, no need to shift it
	* Fix: test_kernel_data dereference of null pointer
	* Man: move [SESSION] before options
	* Fix: consumerd: add missing put_subbuf for ust and kernel errors
	* Fix: sessiond: only send streams to consumer once
	* Fix: consumerd main: needs to be a registered RCU thread
	* Fix: thread_dispatch_ust_registration needs to be a RCU thread
	* Fix: don't abort metadata push on closed metadata
	* lttng-tools: remove bogus interpreter line from utils shell library
	* Fix: consumerd: order of metadata cache vs stream lock
	* Fix: add missing rcu_barrier before daemon teardown
	* Fix: Add missing pthread.h include
	* Fix: support for older versions of Babeltrace in test script
	* Fix: reverse channel and metadata cache lock nesting order
	* Fix: only lock the metadata_cache in userspace consumers
	* Fix: lock nesting order reversed
	* Fix: lttng-relayd: forcefully close stream on relayd shutdown
	* Fix: protect the channel's metadata stream using the metadata cache lock
	* Fix: double unlock of metadata mutex on error
	* Fix: free previous instance of url (alloc_url) on default live url assignation
	* Fix: add element length check in lttng_index_file_open
	* Assert that index_file does not exist before setting a new one
	* Fix: relayd vs consumerd compatibility
	* tests: Implement tests for lttng-ust LTTNG_UST_BLOCKING_RETRY_TIMEOUT
	* lttng-add-context(1): add missing man: prefix
	* lttng-add-context(1): fix style
	* lttng-snapshot(1): fix style
	* lttng-metadata(1): fix style
	* doc/man: put short option's argument too
	* Remove `metadata` command from various help resources
	* List the `regenerate` command in various help resources
	* lttng-load(1): fix synopsis and style
	* Fix: truncate the metadata file in shm-path
	* Load: add message indication that a name override was carried out
	* Load: expose overrides elements in mi
	* Fix: assign values to path, ctrl and data uris during configuration load
	* Load: test that name override does not have side effects
	* Docs: remove invalid short option -U and move option descriptions
	* Fix: add missing refcount of loaded modules
	* Fix: only unload successfully loaded kernel modules
	* Fix: test cases now rely on explicit workloads
	* m4/pprint.m4: update with correct quoting
	* configure.ac: move warning to end of output for the end user
	* doc/man: only require asciidoc-attrs.conf when building the man pages
	* Test fix: increase test count in plan of test_perf_raw
	* Create a dedicated test suite for Perf
	* Tests: accommodate stricter mktemp implementations in tests
	* Add version info to lttng-relayd help
	* Fix: stop sessiond threads on health thread error
	* Fix: stop lttng-relayd threads on health thread error
	* Fix: report an error if unix socket address is too long
	* Remove unmaintained TODO file
	* Remove outdated comment about run_as open being broken
	* Remove run-as compat wrapper from internal code
	* Fix: save: leak of configuration file fd
	* Update master version to 2.10.0-pre
	* Fix: warn when a loaded session can't be set as the default
	* Warning fix: forward declare struct lttng_ust_calibrate
	* lttng-enable-channel(1): remove redundant --discard from synopsis
	* test: load --override-name
	* load: introduce --override-name
	* man: lttng-load fix up
	* Docs: grammar fix in load.h
	* lttng_ctl: add session_name to load override
	* Fix: test presence of override_attr before accessing its member
	* load: objects returned by getters do not need to be freed
	* Remove lttng_load_session_attr_get_override_path_url
	* Docs: change order of set functions in load.h to match get
	* Remove calibrate documentation
	* Remove calibrate from liblttng-ctl
	* Remove calibrate from lttng-sessiond
	* Remove calibrate from Python bindings
	* Remove calibrate from Bash completion script
	* Remove calibrate tests in Python bindings
	* Remove calibrate command from lttng CLI
	* Build fix: remove load-42-stream.lttng from dist target
	* Test: load --override-url
	* Add --override-url option to load command
	* Apply the overrides attributes during configuration load
	* Clean-up: remove copy-pasted comment from save.c
	* lttng-ctl: add override helper to load api
	* Rename override to overwrite for config_load_session
	* Fix: report truncation on snprintf
	* Fix: check for a session daemon before running load command
	* Fix: ignore SIGPIPE
	* Use lttng api for the load command
	* Fix: use ssize_type for the return value of uri_parse_str_urls
	* Docs: grammar fixes in load.h
	* Fix: wrong api comments for load.h
	* Fix: do not overwrite ret if already set and session found
	* lttng-sessiond: auto-load lttng-probe-i2c module
	* Bump lttng-modules ABI minor version
	* Fix: handle backward compatibility with lttng-modules 2.7
	* Clean-up: remove unnecessary autoconf variable substitution
	* Fix: honor negative (unlimited) app socket timeout
	* Build: Replace use of deprecated AM_PATH_XML2
	* Test fix: set app and network socket timeouts to unlimited
	* Test fix: test_fork can hang while waiting for child pids
	* Test fix: test_daemon can hang while waiting for child pids
	* Test fix: redirect python test subprocess output to /dev/null
	* Build fix: macOS Sierra provides clock_gettime
	* Fix: time redefinition warnings on macOS builds
	* Clean-up: remove unused variable user
	* Cleanup: Remove fun from code base
	* Fix: remove in-place backup suffix argument provided to sed
	* Fix: pass a valid length to accept() on unix domain sockets
	* Log signals received by run_as worker
	* Missing word in worker_sighandler() comment
	* Clean-up snapshot command error reporting
	* Fix: RCU lock imbalance on error in cmd_snapshot_list_outputs()
	* Use -M parameter instead of --manpath when invoking man(1)
	* OOT Build fix: reference the source directory's Python test app
	* Fix: pass NULL to config_load_session instead of an empty string
	* Tests: don't copy test_python_logging explicitly
	* OOT build fix: Missing include of src directory
	* Accomodate BSD sed in version.h generation
	* Port: Detect platforms where librt is required
	* Port: Add OSX clock_gettime compat
	* Port: Add OSX support to socket compat
	* Port: Add OSX support to poll compat
	* Port: Add OSX support to fcntl compat
	* Port: Add OSX compat to sessiond-comm/unix.c
	* Port: Add OSX endian.h compat
	* Port: Add OSX libuuid compat
	* Fix: zero-initialize fd_set
	* Clean-up: missing cast to fd_set*
	* Fix: usage of FD_SET on fd_set > 1024 results in corruption
	* Fix: erroneous usage of addr parameter in mmap()
	* Clean-up: remove useless assignment
	* Fix: missing unmap in test error handling
	* Tests: unchecked pthread_join return value
	* Clean-up: remove negative check against unsigned value
	* Fix: unchecked init_pipe return value
	* Tests: Unchecked pthread_create return value
	* Clean-up: remove useless assignment
	* Tests: Add tracepoints to libbar, libfoo and libzzz
	* Fix: Mark ASCIIDOC_ATTRS_CONF as a dependency of man page targets
	* Test the parsing of perf raw context
	* Enable perf PMU counters by raw ID
	* Run userspace perf tests on non-x86 platforms
	* Tests: adjust ust-dl planned test count
	* Test library load/unload events
	* Add missing ust_app_regenerate_statedump_all stub
	* Clean-up: remove unused ust_app_regenerate_metadata_all
	* Add regenerate command to MI schema
	* Manpage for the regenerate statedump command
	* Tests for the regenerate statedump command
	* Allow regenerating the statedump of a running session
	* Kernel ioctl to regenerate the statedump
	* UST command to regenerate the statedump
	* Rename the "metadata regenerate" command to "regenerate metadata"
	* Typo fix: uninitializez ->uninitialized
	* Fix: handle negative (unlimited) system stack size limits
	* Tests: adjust type declaration test count
	* Fix: protocol mismatch between UST and tools
	* ust-ctl: use fixed-size integer rather than enum
	* Test UST's autoincrementing enumeration values
	* Add support for UST's autoincrementing enum entries
	* Tests: eliminate process timeouts from Python tests
	* Fix: English syntax errors in 'lttng status'
	* Test for select, poll and epoll syscall overrides
	* Tests: tap.sh spams tests' output when no plan is set
	* Fix: Set thread stack size to ulimit soft value
	* Fix: location of various standard headers
	* Fix: missing include ctype.h for isdigit()
	* Fix: strerror_r behavior is glibc specific
	* Fix: error.h -> common/error.h
	* Fix: snapshot del-output with name on musl
	* Fix: sessiond ht_match_event() check if filter is NULL
	* configure.ac: fix --enable/disable-kmod option
	* Tests: spawn ht_cleanup thread in unit tests
	* Lazily initialize max poll set size
	* Revert "Assert that a valid clean-up pipe exists on ht_cleanup_push"
	* tests: test ust snapshot with discard buffers
	* tests: test kernel snapshot with discard buffers
	* Allow channel mode override in snapshot sessions
	* Fix: validate number of subbuffers after tweaking properties
	* Use bool type for save command options
	* Clean-up: harmonize popt option declarations in save.c
	* Clean-up: move mi_writer declaration with other declarations
	* Add name omission and output omission on save to lttng-ctl
	* Express overwrite attribute as a byte in communication protocol
	* Assert that a valid clean-up pipe exists on ht_cleanup_push
	* Fix: do not refer to objects as .o
	* Fix: do not link against libtool .o objects
	* Fix: Define MANPATH in config.h
	* Tests: Make warn_processes.sh more portable
	* Fix: add missing script to dist
	* Fix: leak of UST app hash tables
	* Fix: leak of reply buffer on data pending check
	* Fix: call xmlCleanupParser to free global libxml2 allocations
	* Fix: missing "void" parameter of lib constructor and destructor
	* Docs: fix comment typos in lttng-sessiond's main.c
	* Fix: lttng-relayd allow binding of privileged ports for non-root users
	* relayd: optimize receive throughput
	* Clean-up: harmonize kernctl API error checking
	* Introduce LTTNG_IOCTL_CHECK and LTTNG_IOCTL_NO_CHECK macros
	* Fix: enforce assumption that lttng-modules ioctl() return <= 0
	* Fix: reduce scope of kconsumer consumed_pos and produced_pos
	* Docs: document safety of consumer_thread_is_ready access
	* Clean-up: unused ret values in thread_manage_health
	* Clean-up: remove dead code in sessiond's set_option()
	* Fix: set the logger level to prevent unexpected level inheritance
	* Typo: Stoping -> Stopping
	* Typo: occured -> occurred
	* Fix: only perform lttng_consumer_sync_trace_file() in local mode
	* Make lttng_consumer_sync_trace_file static
	* Fix: don't negate posix_fadvise return value to check error
	* Fix Solaris 10 build: use lttng_strnlen() wrapper
	* Rename lttng_error_type to lttng_error_level
	* Cleanup error.h __lttng_print() used for message printing
	* Update coding style document for macro style
	* Fix: coding style document has erroneous semicolon at end of macro
	* Fix: add missing semicolons after MSG, DBG, ERR print macros
	* Tests: inverted condition in test_kernel_data
	* OOT build fix: asciidoc.conf is now a source file
	* lttng-create(1): use attributes for default ports
	* lttng-create(1): add xrefs to creation mode definitions
	* lttng-create(1): use the correct DATAPORT/CTRLPORT variables
	* lttng-create(1): use def list for net protocols
	* lttng-create(1): add relay mode
	* doc/man: put AsciiDoc attributes in their own file
	* test: UST tracing destroy flush behavior with tracefile rotation
	* test: kernel tracing destroy flush behavior with tracefile rotation
	* Add environment variable to allow abort on error
	* Fix: ust-consumer: flush empty packets on snapshot channel
	* Fix: WARN() should print as WARN level, not ERR
	* Fix: error.h: add missing parenthesis around macro parameter
	* Fix: bogus mask on error.h PRINT types
	* Fix: kernel tracing: flush after stop
	* Fix: UST should not generate packet at destroy after stop
	* Tests: remove flaky '*' kernel wildcard test
	* Fix: bad file descriptors on close after rotation error
	* Fix: configure.ac: allow --disable-python-bindings
	* Fix: merge tap tests stdout and stderr
	* Fix: posix_fadvise wrapper returns -ENOSYS on FreeBSD
	* Fix: Double free in utils_partial_realpath error path
	* Fix: remove logically dead code in send_channel_uid_to_ust
	* Fix: unchecked return value in low throughput test
	* Tests: abort() exclusion test on allocation failure
	* Fix: unchecked posix_fadvise() return value
	* Fix: unchecked return value in relayd live.c
	* Fix: unchecked return value in trace_clock_read64_monotonic
	* Clean-up: remove unnecessary blank line
	* Fix: initialize the cur_event variable before using it
	* Fix: Dereference after NULL check in consumer
	* Tests: abort test on memory allocation failure
	* Fix: pointer dereference after NULL check in test_create_ust_event_exclusion
	* Fix: NULL pointer dereference in relay_index_get_by_id_or_create
	* Clean-up verbosity incrementation in set_option
	* Fix: Deference after null check in sessiond set_option
	* Docs: clarify comment in parse_pid_string()
	* Fix: Wrong sizeof argument in pid tracker
	* Fix: tests: incorrect uri index
	* Fix: Integer overflowed argument
	* Fix: macro compares unsigned to 0 (no effect)
	* Fix: Free variable before strdup() in process_event_node
	* Fix: Free variables before strdup()
	* Fix: Add missing free() in spawn_viewer
	* Fix: Add missing free() in utils_partial_realpath
	* Fix: Use distinct variables for ret and discarded_events
	* Fix: Don't try to show manpage when argv is null
	* Fix: Use secure_getenv() in get_man_bin_path
	* Fix: illegal memory access in test_create_ust_event_exclusion
	* Fix: illegal memory access in test_create_ust_event
	* Fix: illegal memory access in test_create_kernel_event
	* Fix: illegal memory access in test_create_ust_channel
	* Fix: illegal memory access in send_viewer_streams
	* Simplify rcu locking in viewer_list_sessions
	* Fix: illegal memory access in viewer_list_sessions
	* Fix: illegal memory access in relayd_add_stream
	* Fix: illegal memory access in relayd_create_session_2_4
	* Fix: illegal memory access in session_create
	* Fix: illegal memory access in consumer_set_subdir
	* Fix: illegal memory access in syscall_init_table
	* Fix: illegal memory access in write_pidfile
	* Fix: illegal memory access in list_lttng_channels
	* Fix: illegal memory access in cmd_snapshot_record
	* Fix: illegal memory access in output_init
	* Fix: illegal memory access in consumer_set_network_uri
	* Fix: illegal memory access in cmd_snapshot_list_outputs
	* Fix: illegal memory access in list_events
	* Fix: illegal memory access in disable_event
	* Fix: illegal memory access in enable_event
	* Fix: illegal memory access in add_uri_to_consumer
	* Fix: illegal memory access in init_ust_event_from_agent_event
	* Simplify free() of channel attribute
	* Fix: illegal memory access in _cmd_enable_event
	* Implement lttng_strncpy safe string copy
	* Add missing symbol to preserve ABI compatibility of liblttng-ctl
	* Fix: loading a session prints an error message but the load is successful
	* Snapshot warning if there are no events in one of the domains
	* Clarify kernel version check error messages
	* Tests: same event name with different descriptor on load
	* Fix: load event state (enabled/disabled) correctly
	* Fix: Error reported if no domain is provided for start/stop
	* Handle unknown domain in MI
	* Handle unknown domain on session start
	* Fix: loading of live session within userspace domains
	* Test: expose session url bug on load with multiple domains
	* OOT build fix: asciidoc.conf is now generated at configure
	* Snapshot: record: use same datetime for snapshot folder output
	* Refactor: move the snapshot type check into output type check
	* ust-metadata.c: nest/indent enumeration entries
	* lttng.c: show basic help when no arguments are provided
	* Define command short descriptions in configure.ac
	* lttng-relayd(8): $HOME -> $LTTNG_HOME
	* doc/man: use propagated default values in man pages
	* Propagate default values from configure.ac to asciidoc.conf
	* Define default values in configure.ac
	* lttng-load(1): use lists to explain the input path behaviour
	* lttng-sessiond(8): fix load directories and behaviour
	* lttng-load(1): specify default search order
	* doc/man: use configured directories in man pages
	* doc/man/asciidoc.conf: add doctype-manpage conditions
	* doc/man: linklttng macro -> man macro
	* doc/man/Makefile.am: add failing dist-hook on --disable-man-pages
	* doc/man/Makefile.am: fix top comment
	* configure.ac: fix --enable-man-pages help string
	* Fix: standardize parser/lexer building
	* Fix: standardize man pages building/installing
	* configure.ac: check for an existing liburcu-cds symbol
	* configure.ac: use macro for wrong liburcu error message
	* Hide parse_application_context utility function
	* Re-add deprecated MI symbols to preserve ABI compatibility
	* Hide new MI symbols introduced as part of 2.8
	* Re-add default size symbols which were erroneously exposed
	* Hide config symbols introduced in 2.8
	* Hide internal _lttng_destroy_session symbol
	* Hide bytecode symbol iterator API symbols
	* Tests: wording of trace_matches is misleading
	* Test lttng-modules clock override plugin
	* Warning fix: uninitialized variable may be used
	* Tests: Replace prove by autotools tap runner
	* Drop installcheck target
	* Fix: distcheck requires that we clean version.h
	* Fix: configure: forbid Python bindings if shared libraries are disabled
	* Fix: tests: don't match command line arguments, match static build binary names
	* Fix: tests: skip tests on static build
	* Fix: tests: don't build dynamic lib tests if support disabled
	* bootstrap: Standardize on autoreconf -vi
	* Move unix.h wrapper from sessiond-comm to common
	* Fix: update tests following renaming of UST statedump event
	* Typo: catched -> caught
	* Add comment describing ioctl number duplication
	* Test: kill sessiond,relayd and background children on SIGTERM/SIGINT
	* Docs: Remove unnecessary exclamation mark
	* Docs: fix wording of dependency
	* Docs: fix "daemon" typo in README.md
	* Fix: Use get_domain_str on add context
	* Warning fix: possible use of uninitialized variable
	* doc/man: add FILES section
	* Test: xsd validation of long path (length > 255)
	* Fix: xsd: urls and paths are not of type name_type but string
	* Refactor: embed mi in "add_output "to remove code duplication
	* Refactor: embed mi in "del_record" to remove code duplication
	* Refactor: embed mi in "record" to remove code duplication
	* Refactor: embed mi in "list_output" to remove code duplication
	* Fix: do not return error on LTTNG_ERR_SNAPSHOT_NODATA
	* Fix: Set loopback adress in set_ip_addr if gethostbyname2 fails
	* Fix: d_type validity is not guaranteed on all nfs versions
	* Fix: doc/man: lttng-add-context(1): add missing option macro
	* doc/man: common-footer.txt: add CI link
	* doc/man: common-footer.txt: add GH organization link
	* doc/man: lttng(1): clarify UST domain and add links to languages
	* doc/man: add escwc macro and use it
	* doc/man: lttng(1): link from COMMAND (synopsis) to COMMANDS section
	* doc/man: use linkgenoptions macro
	* doc/man: add linkgenoptions AsciiDoc macro
	* .gitignore: ignore all generated files in doc/man
	* doc/man: fix external links
	* doc/man: xsl: move manpage-base.xsl -> manpage-callouts.xsl
	* doc/man: xsl: move manpage-ulinks.xsl -> manpage-links.xsl
	* doc/man: xsl: add <URL> after ulink text
	* doc/man: xsl: add (internal) link template
	* doc/man: lttng-enable-channel(1): move limitations to own section
	* Fix: doc/man: lttng-relayd(1) -> lttng-relayd(8)
	* doc/man: add nloption and genoption AsciiDoc macros
	* doc/man: add [role="term"] to terminal callouts
	* Clean-up shm directory tree after freeing the channel
	* Fix: Build man pages if --enable-build-man-pages is used
	* Fix: convey enum value signedness into metadata
	* doc/man: add notes about shell escaping
	* Fix: doc/man/Makefile.am for OOT builds
	* Generate man pages by default
	* Update version to 2.9.0-pre
	* Bump minor kernel tracer ABI version
	* Quote brewery names in release codename description
	* Fix: metadata regenerate, error if too many args
	* Fix: add missing sys/types.h header
	* Fix: build failure when __GLIBC_PREREQ is missing
	* configure.ac: beautify report
	* Update version codename and description to 2.8.0 - Isseki Nicho
	* doc/man: lttng.1.txt: sort commands in categories
	* Data pending message is printed when unnecessary
	* README.md: add CI/Coverity status badges
	* README.md: add lttng-crash in package contents
	* Show lttng-metadata man page in command's --help
	* Add an lttng-metadata man page
	* Remove untrack reference from snapshot man page
	* README.md: add optional dependency on man
	* doc/man: install lttng-health-check.3
	* lttng-relayd: show man page with --help and remove usage
	* doc/man: convert lttng-relayd(8) to AsciiDoc
	* lttng-crash.c: show man page with --help and remove usage
	* doc/man: convert lttng-crash(1) to AsciiDoc
	* lttng-sessiond: show man page with --help and remove usage
	* doc/man: convert lttng-sessiond(8) to AsciiDoc
	* README.md: bolden all dependencies and versions
	* README.md: add asciidoc and xmlto build dependencies
	* lttng.c: sort commands to get a nice list output
	* doc/man: add README.md
	* lttng: add `help` command
	* lttng.c: show man page with --help and remove usage
	* lttng.c: CMD_UNDEFINED is used for invalid args too
	* lttng: remove usage strings from commands
	* lttng: show man page when using command's --help
	* lttng add-context: add --list option
	* doc/man: remove lttng.1 (built from lttng.1.txt)
	* doc/man: create lttng-disable-event(1) and update/fix content
	* doc/man: create lttng-enable-event(1) and update/fix content
	* doc/man: create lttng-snapshot(1) and update/fix content
	* doc/man: create lttng-help(1) and update/fix content
	* doc/man: create lttng-status(1) and update/fix content
	* doc/man: create lttng-untrack(1) and update/fix content
	* doc/man: create lttng-track(1) and update/fix content
	* doc/man: create lttng-calibrate(1) and update/fix content
	* doc/man: create lttng-list(1) and update/fix content
	* doc/man: create lttng-add-context(1) and update/fix content
	* doc/man: create lttng-disable-channel(1) and update/fix content
	* doc/man: create lttng-enable-channel(1) and update/fix content
	* doc/man: create lttng-view(1) and update/fix content
	* doc/man: create lttng-version(1) and update/fix content
	* doc/man: create lttng-stop(1) and update/fix content
	* doc/man: create lttng-start(1) and update/fix content
	* doc/man: create lttng-load(1) and update/fix content
	* doc/man: create lttng-save(1) and update/fix content
	* doc/man: create lttng-set-session(1) and update/fix content
	* doc/man: create lttng-destroy(1) and update/fix content
	* doc/man: create lttng-create(1) and update/fix content
	* doc/man: add common OPTIONS head for command man pages
	* doc/man: add Makefile.am for generating man pages
	* .gitignore: ignore generated man page artifacts
	* doc/man: add XSL files for man pages
	* doc/man: add asciidoc.conf
	* configure.ac: check for asciidoc and xmlto
	* doc/man: lttng(1): update and standardize content
	* doc/man: convert lttng(1) to AsciiDoc
	* Add builtin modules support to kmod modprobe
	* Add comments to kmod functions
	* Add libkmod rmmod support
	* Move libkmod ifdef to beginning of file
	* Drop optional control modules load and unload
	* Fix: live test header endianness
	* Document the live detach command
	* Test the viewer detach command
	* Use of bare attribute directives instead of LTTNG_PACKED
	* Live: command to detach a viewer session
	* Contexts for RT debugging
	* Optional test for the metadata regeneration
	* Add MI output to the metadata regenerate command
	* Tests for metadata regenerate
	* Add TAGS files to .gitignore
	* Fix: systematic overwrite of union values on add context
	* Mismatching signature of ust_metadata_session_statedump() stub
	* Fix: Initialize events discarded and packet lost counters to zero
	* Assert on unknown UST buffer type
	* Command metadata regenerate
	* Store the relay protocol version in the consumer_output
	* Store the version of the tracer in the UID registry
	* Store the instance id and packet_seq_num in indexes
	* kernctl commands to extract the stream instance id
	* Account the lost packets in snapshot mode
	* Test: Add the lttng-runas worker process to the sessiond pids
	* Limit the scope of IFS overwriting
	* Do not overwrite IFS globally but only locally
	* Display discarded and lost events at destroy and stop
	* Fix: tests: use SIGSTOP for crash extraction test
	* Test fix: ignore stderr at every step of randstring
	* Fix: session_find_by_id can return NULL legitimately
	* Fix: mark ltt_sessions_ht_destroy as static
	* Docs: Missing locking assumptions in function headers
	* Test fix: ignore stderr when generating random string
	* Fix: hold session list lock during delete_ust_app
	* Test: prevent the spawning of a daemonized sessiond
	* Missing void in function signature
	* CLI: Show filter expression associated to a syscall
	* Fix: missing dereference when computing extended info position
	* Fix: Only save kernel enablers in session configuration
	* Fix: Only list kernel enablers when listing events
	* Fix: syscalls hash table leaks when listing kernel events
	* Initialize command header to zero
	* Rename filter string to filter expression in liblttng-ctl
	* Fix: use of unsigned variable to check for negative return
	* Clean-up: remove unreachable goto
	* Fix: missing static inline breaks --without-lttng-ust build
	* lttng enable-channel memsets lttng_channel to -1
	* Change padding type from array to fixed-width integer
	* Clean-up: missing space between cast operator and operand
	* Ensure UST channel output mode is LTTNG_UST_MMAP
	* Extract the lost packets and discarded events counters
	* Send extended channel payload to client
	* Add channel discarded events and lost packets stats accessors
	* Add extended info to liblttng-ctl's struct lttng_channel
	* Reuse constant string instead of duplicate literal
	* Clean-up: simplify computation of string position
	* Optimization: lttng UI uses sprintf instead of strcpy
	* Fix: OOT build fails because of missing include path
	* Tests: Consider lttng mi namespace in test_load
	* MI: Remove boolean "exclusion" element
	* MI: add <exclusions> (event exclusion names)
	* CLI: show event exclusion names
	* Add new LTTNG_ERR_OVERFLOW error code
	* Add lttng_event_get_exclusion_name*() to liblttng-ctl
	* Tests: Consider lttng mi namespace in test_mi
	* MI: Implement event context schema change
	* MI: Add application context type to schema
	* MI: add schemaVersion attribute to command schema
	* MI: set machine interface XSD target namespace
	* Add schema information to XML MI output
	* Fix: libxml2 may return 0 because of buffering
	* Bump LTTng MI schema to 3.0
	* MI: add <filter_expression> (event filter expression)
	* Transfer UST exclusion names from sessiond to client
	* Fix: return negative error code in list_lttng_ust_global_events()
	* CLI: show agent event filter string
	* CLI: show event filter string
	* Add lttng_event_get_filter_string() to liblttng-ctl
	* Transfer filter strings from sessiond to client
	* Refactor setup_lttng_msg() to include cmd header
	* Add offset comments to struct lttng_event
	* Add command header to sessiond->client response msg
	* Add internal extended channel structure
	* Metadata for instance_id and packet_seq_num
	* Add a HT to lookup sessions by id
	* Explicitly stop the session on lttng destroy
	* Fix: per-pid ust buffers flush race with application unregister
	* Fix warning when building Python bindings
	* Add CONTRIBUTING.md
	* Revert "Python bindings: remove duplicate structure definitions"
	* Docs: clarify cross-version tracer compatibility
	* Cleanup: Remove unnecessary newline
	* Fix: Use ipv6 loopback adress in test_uri
	* Python bindings: remove duplicate structure definitions
	* Fix: test: handle env variables undefined
	* Fix: report already enabled event error to client
	* Docs: add comment to cmd_add_context()
	* Fix: application context leak when enabling context
	* Fix: string leak when processing of client message fails
	* Fix: missing return code initialization on error
	* Fix: unchecked return value in _lttng_variant_statedump()
	* Fix: Possible use-after-free in create_ctx_type()
	* Fix: filter tests now accept "." in identifiers
	* Fix: Don't notify agent of non-app context addition
	* Create agent on channel creation
	* Introduce application contexts to session configuration schema
	* Fix typos in error descriptions
	* Enable agent application contexts if filter has such dependencies
	* Compare provider and context names in trace_ust_match_context
	* Allow $app.provider:ctxname in filter, enum, variant identifiers
	* Add variant type support to ust registry and metadata
	* Notify java agent of enabled application contexts
	* Add app context support to lttng client
	* Enforce const-correctness in UNIX socket wrappers
	* Remove superflous domain check in context_ust_add
	* Remove superflous domain check in add_uctx_to_channel
	* Use lttng_domain_type enum instead of bare integer
	* Add application context support to lttng-ctl lttng_add_context
	* Cleanup comments in lttng-ctl.c
	* Tests fix: source utils.sh before using conf_proc_count
	* Tests: use configured processor count in getcpu override tests
	* Tests: use configured processor count in snapshot tests
	* Tests: Introduce conf_proc_count()
	* Tests: print a more precise test description in snapshot tests
	* clock offset: print negative value in metadata for lttng-ust metadata
	* Fix: handle negative clock offset for lttng-ust metadata
	* Fix: test: append to LD_LIBRARY_PATH
	* Fix: test: use load_path instead of $1
	* Bump lttng-ust protocol version to 6.1
	* Add CTF enum type support for UST registry
	* Cleanup __lttng_print macro indentation
	* Fix: do not print error and bug messages when quiet (-q) is present
	* Fix: test_ust-dl requires bash
	* Fix: test script requires bash
	* Fix: missing $ in SED variable
	* Tests: fix make targets using objcopy
	* Build: fallback to AC_CHECK_LIBS when looking for popt and uuid
	* tests/unit: fix object files' location
	* configure.ac: fix static build
	* Tests: fix tracefile count when page_size is > 4k
	* configure.ac: use $withval with AC_ARG_WITH
	* Fix: close indexes when rotating the trace files in mmap mode
	* Fix: close indexes when rotating the trace files in splice mode
	* Clarify error message on "add context" failure
	* Fix: Don't spam session daemon logs on invalid UST context
	* Tests: getcpu_override: use event delay when launching with wrapper
	* Tests: getcpu: no events shall be emitted at the same timestamp
	* Tests: Switch test apps to use usleep_safe()
	* Tests: Add a test utils library
	* Fix: redefinition of _GNU_SOURCE
	* Tests: only call usleep if the test in configured to wait
	* Test: add UST dl helper test
	* Test: add UST baddr statedump test
	* lttng: add status command
	* lttng: factor out declaration of commands
	* make check: add warning when LTTng processes are running
	* Missing cpu id kernel context in the kernel tracer ABI
	* Use --without-lttng-ust in error message
	* Use --with/--without for lttng-ust support
	* Only compare "bison -y" to the basename of YACC variable
	* Tests: Add debug output to getcpu_override
	* Tests: Change description of clock-override test
	* Add event exclusion test for identical names
	* Warn when exclusion names are truncated
	* Truncate exclusion names to have a terminal '\0'
	* Ignore exclusion names order when matching events
	* sessiond-comm.h: fix whitespaces
	* Disallow duplicate event exclusion names
	* Add LTTNG_EVENT_EXCLUSION_NAME_AT() helper macro
	* Fix: lay out names in exclusion structure correctly
	* Fix: Check for NULL hash tables on relay daemon teardown
	* Fix: Verify directory's existence before calling mkdir
	* Clean-up: declare variables at beginning of scope
	* Load x86-exceptions lttng-modules probe
	* Load x86-irq-vectors lttng-modules probe
	* Agent: Make the agent protocol consistently network endian
	* Clean-up: Remove unused variables from default.c
	* Fix: Unchecked NULL string in logging statement
	* Fix: include the filter expression in agent events' primary key
	* Add the filter expression to the enable_event agent protocol message
	* Add some IDE project files to the gitignore
	* Fix live timer calculation error
	* Don't initialize defaults in library constructor
	* Initialize lttng_ht_seed on hashtable creation
	* Cleanup: Missing space after cast operator
	* Build: Switch from tar v7 to posix archive format
	* Fix: Retry poll on interruption
	* Port: Explicitly allocate realpath() resolved buffer
	* Select which binaries/extras to build at configure time
	* Move libconsumer under common/consumer/
	* Fix: There is more tests than the plan
	* Remove dead check from configure.ac
	* Fix: Silence warning by casting *sin_addr to *sockaddr
	* Port: fix 'ERR' conflict with Solaris regset.h
	* Relay protocol: check string lengths
	* Fix: Silence warning of function having no return value
	* Fix: Silence warnings when using uid_t and pid_t with printf
	* Port: Add compat for platforms with no MSG_NOSIGNAL or SO_NOSIGPIPE
	* Port: Add Solaris compat to sessiond-comm/unix.c
	* Port: Add Solaris compat for netdb
	* Fix: Silence warning formating pid_t as int
	* Port: Add Solaris dirent compat
	* Port: Add Solaris paths compat
	* Rename config.h to session-config.h
	* Port: Remove _GNU_SOURCE, defined in config.h
	* Port: cleanup and portability fix to configure.ac
	* Port: Don't use SIGUNUSED which is not defined on Solaris
	* Port: Implement prctl wrapper
	* Port: Replace flock with fnctl
	* Port: make bootstrap script work on most shells
	* Port: removed unused clone() compat
	* Port: Add macro for socket linking on solaris
	* Port: Add Solaris support to mman compat
	* Port: Replace dirent->d_type by stat
	* Add missing include for memset()
	* Port: Add Solaris support to socket compat
	* Port: name clash on Solaris, rename sun to s_un
	* Port: move memset of anc_buf inside ifdef
	* Port: Add Solaris fls compat
	* Port: Add Solaris string compat
	* Port: Use LTTNG_PATH_MAX instead of PATH_MAX
	* Port: Use LTTNG_HOST_NAME_MAX instead of HOST_NAME_MAX
	* Port: Use LTTNG_NAME_MAX instead of NAME_MAX
	* Port: Add Solaris support to socket compat
	* Port: Add Solaris support to poll compat
	* Port: Add Solaris support to fcntl compat
	* Port: Add Solaris endian.h compat
	* Fix: Use 'echo' in a portable way
	* Fix: Use result of AC_PROG_* when using sed / grep
	* Cleanup: Remove commented-out constant
	* Fix: use start and stop sessiond from utils.sh
	* Fix: Remove dependency on glibc 2.12 caused by pthread_setname_np
	* Fix: Log and ignore SIGINT and SIGTERM in run_as worker
	* Add logging to the run_as worker
	* Fix: Handle EINTR of waipid in run-as worker
	* Fix: Handle EINTR of waitpid when spawning a session daemon
	* Fix: tests: support systems where PAGE_SIZE is not 4096
	* Test: jul/log4j: use -a instead of '*' to disable all events
	* Reword warning on event disable
	* Clean-up: Remove unused test launchers
	* Help: add -j -l -p option to help string
	* man: update disable-event section
	* Use empty event name on disable -a for ust and agent domain
	* Fix: disable kernel event based on name and event type
	* Tests: Clean-up test-crash on SIGTERM and SIGINT
	* Fix: Possible dereference of null pointers
	* Fix: Break out of loop when searching for a domain's agent
	* Fix: int printed as uint
	* Fix: add subdir-objects to Makefile.am
	* Fix: tests: skip UST perf tests if not root
	* Fix: Check use_clone() instead of worker in run_as
	* Fix: Perform rcu barrier before tearing down the run-as worker
	* Fix: Handle hang-up gracefully in run-as
	* Fix: Only log app handle release on failure
	* Fix: shm-path: handling of snprintf return value
	* Fix: Wrong format specifier used in debug statement
	* Tests: Swap usages of pidof for pgrep --full
	* Tests: indefinitely wait for shm buffers to be unlinked
	* Fix: Hide run-as functions
	* Fix: Hide sessiond-comm functions
	* Cleanup: remove duplicated implementation of rculfhash
	* Fix: relayd: don't call lttng_ht_destroy in RCU read-side C.S.
	* Fix: libc internal mutex races with run_as
	* Fix: Hide readwrite symbols in common lib
	* Fix: Hide pipe symbols in common lib
	* Fix: Hide daemonize symbols in common lib
	* Fix: Hide RCU hashtable wrapper symbols
	* Clean-up: NULL free'd pointers in utils_partial_realpath
	* Fix: prevent dangling pointer in utils_partial_realpath
	* Fix: rcu_read_unlock without parentheses has no side-effect
	* Fix: add missing test file to EXTRA_DIST
	* Format utils.sh messages
	* Tests: use functions from utils.sh
	* Report error if any disable action fails
	* Fix: disable all ust events
	* Bring back event_ust_disable_all_tracepoints
	* Fix: sessiond: disable: match app event by name
	* lttng-crash: support symlink
	* Test: lttng-crash and ust shm path
	* Fix: dereferencing null index pointer
	* Fix: leaking memory from strdup in lttng-crash
	* Fix: memleak in utils_partial_realpath
	* Fix: double free on enable-event
	* Remove dead code from filter grammar test
	* Remove dead code from ir generation filter visitor
	* Remove dead code from session daemon
	* Remove dead code from view command
	* Remove dead code from disable-channel command
	* Remove dead code from disable-event command
	* Fix: error on no/multiple domain options
	* Fix: lttng-crash: segfault when parsing options
	* Remove dead code from the calibrate command
	* Remove dead code from add-context command
	* Print relayd stream indexes
	* Enhance relayd error reporting
	* Fix: relayd: handle consumerd crashes without leak
	* Fix: LPOLLHUP and LPOLLERR when there is still data in pipe/socket
	* Fix: double RCU unlock on event_agent_disable_all
	* Fix: unbalanced RCU read-side lock in enable event command
	* Add rcu_read_ongoing() assertions around process_client_msg
	* Clean-up and simplify event_agent_disable_all
	* Document locking assumption of agent_find_event()
	* Fix: disable agent events by name
	* sessiond: add loglevels_match()
	* Fix: include loglevel type in agent event's primary key
	* Fix: include loglevel type in UST event's primary key
	* sessiond: use `loglevel_value` and `loglevel_type` names
	* Tests: kernel wildcards
	* Tests: fix wildcard test path
	* doc: document untrack command in lttng(1)
	* doc: document track command in lttng(1)
	* Remove dot after enable-event message
	* Fix: don't print the default channel name when enabling agent events
	* Fix: fail gracefully on --exclude on unsupported domains
	* Fix: initialize live_timer to 0 for snapshot session
	* Fix: correct mismatched function signatures
	* Clearer error reporting when failing to launch session daemon
	* Daemonize sessiond on `lttng create`
	* Fix: consumer signal handling race
	* Fix: list_ust_events(): dangling pointer
	* Fix: MI: close domain when listing multiple agent domains
	* Tests: expand UST wildcard tests, move to regression/tools
	* Tests: kernel filtering
	* Fix: use pid element instead of process element
	* Fix: race between kconsumerd and sessiond on tear down
	* Fix: Buggy string comparison in ust registry ht_match_event
	* Fix: Bad cast of lttng_kernel_instrumentation to lttng_event_type
	* Fix: Implicit cast from lttng_loglevel_type to lttng_ust_loglevel_type
	* Fix: lttng-crash: remove tmp working directory
	* Clean up: Coding style conformance adjustments in lttng-crash.c
	* Fix: lttng-crash: DIR leak in delete_trace() on error
	* Fix: Possible passing of NULL pointer to memcpy()
	* Fix: Overwrite of ret in relay_recv_metadata
	* Silence undefined return value warning
	* Silence use-after-free static analysis warning
	* Fix: Wait for in-flight data before closing a stream
	* Fix: unpublish stream on close
	* Fix: lttng-crash: fd leak
	* Fix: Invalid parameter error reported when untracking PID
	* Fix: kernel track/untrack error handling
	* Fix: Python agent tests are always skipped
	* Tests: Fix flaky live test client
	* Fix: Announce empty streams on live attach
	* Fix: relayd: file rotation and live read
	* Fix: relay: viewer_get_next_index handle null vstream
	* Fix: relayd: make viewer streams consider metadata sent
	* Fix: don't expose empty streams
	* Fix: relayd: don't check new metadata on get packet
	* Fix: relayd: don't check for new streams in get packet
	* Fix: ask new streams HUP
	* Fix: reply error if get packet vstream fails
	* Fix: relayd reply error to client if cannot find viewer stream
	* Fix: relayd reply with error if cannot find metadata
	* Fix: ust-app: protect app socket protocol with lock
	* Cleanup: privatize consumer_allocate_relayd_sock_pair
	* Fix: add missing rcu_barrier at end of sessiond main
	* Fix: add missing rcu_barrier at end of consumer main
	* Fix: app cmd leak on sessiond exit
	* Fix: relayd live don't send incomplete stream list
	* Fix: consumer timer misses RCU thread registration
	* Fix: sessiond consumer thread should register as RCU thread
	* Fix: don't chain RCU free
	* Fix: free metadata cache after grace period in consumer
	* Fix: sessiond vs consumerd push/get metadata deadlock
	* Fix: streamline ret/errno of run_as()
	* Fix: Double unlock on error path
	* Data pending comment clarification in session daemon
	* Fix: Relay daemon ownership and reference counting
	* Accept uid and gid parameters in utils_mkdir()/utils_mkdir_recursive()
	* Fix: reference counting of consumer output
	* Fix: sessiond add missing socket close
	* Fix: sessiond should not error on channel creation vs app exit
	* Fix: sessiond ust-app session teardown race
	* Only display agent loglevel if the loglevel type is not ALL
	* Initialize default log level of events on load
	* Don't assume that Log4j and JUL share the same log level mappings
	* Allow the creation of JUL, Log4j and Python channels
	* Fix: Save tracker as part of UST and Kernel domains only
	* Fix: Memory leak of agent
	* Fix: Memory leak of agent event internals
	* Save filter expression as part of agent events and save them
	* Fix: UTF-8 characters may be stored on up to 4 bytes
	* Remove unneeded hash table existence check in agent_destroy
	* Remove unnecessary RCU read lock
	* Use type directly in sizeof instead of a dereferenced pointer
	* Prevent the addition of UST events to agent channels
	* Don't save log level in session configuration when unneeded
	* Remove unneeded RCU lock
	* Remove unneeded RCU lock
	* Fix: Propagate filter status of kernel events to client
	* Fix: Save kernel event filter when saving session configuration
	* Docs: there is no need to SHOUT in comments
	* Fix: Mention Python as part of enable-event's usage()
	* Grammar fix in comment
	* Fix: typo in error message
	* Add agent domains to lttng enable-event usage()
	* Docs: Add documentation explaining the meaning of "internal" events
	* Report memory allocation failure when copying filter bytecode
	* Fix: cmd_enable_event must return positive error codes
	* Ensure that a filter is always passed with its filter expression
	* Save filter expressions as part of agent events
	* Add agent domains to the enable-event section of LTTNG(1)
	* Use lttng_domain_type enumeration instead of bare integers
	* Prevent disable event on internal UST events
	* Remove unneeded RCU read lock
	* Skip internal events when saving a session configuration
	* Clean-up: Coding-style conformance adjustments
	* Docs: Clarify ominous comment wording
	* Hide internal events from session daemon clients
	* Prevent the use of reserved UST event names
	* Tag events created as side-effect of agent events as internal
	* Remove unneeded RCU lock
	* Remove dead code in lttng-sessiond
	* Ensure event names are NULL terminated during validation
	* Fix: assert(0) when listing Python events with MI
	* Fix: set GLOBAL buffer type for kernel domain in list
	* Fix: take RCU read-side lock within hash table functions
	* Tests: Adapt MI test to change in track/untrack behaviour
	* Clean-up: Rename lib_func to cmd_func
	* Fix: Improve the error reporting of the track/untrack command
	* Tests: Fix flacky clock-plugin test
	* Build: look for python >= 3.0 when building python bindings
	* Build: rename use_python to python_binding
	* Fix: regression tests
	* Fix: tests: stderr not correctly redirected
	* Fix: TimeoutExpired in Python tests not defined globally
	* Tests: ust: clock override plugin
	* Cleanup: reuse tracker* element from config
	* Test: save/load: pid_tracker basic test
	* Clean-up: Remove statement which has no side-effect
	* Save/load: pid_tracker feature.
	* Test: mi: track/untrack feature
	* Util: xml_extract: add node_exist option
	* Mi: track/untrack: validation
	* Docs: Grammar fixes in mi_lttng.xsd
	* Fix: Ensure a valid command error code is returned by track/untrack
	* Clean-up: Remove java-doc annotations from function header
	* Mi: track/untrack/listing
	* Fix: intialization of ust_metadata_poll_pipe to garbage value
	* Fix "allocator sizeof operand mismatch" warning
	* Clean-up: Remove java-doc style function header from session.h
	* Clean-up: remove extra space in comment
	* Fix: test_mi test
	* Tests: Java agent: Add configure switches to enable tests
	* Fix: incorrect script name in python logging test
	* Docs: Document Agent reply codes
	* Docs: Remove Java-specific comments from agent.h
	* Docs: Grammar fix in agent header
	* Return "Unknown" error instead of "Fatal" on unhandled agent replies
	* Log agent reply in disable_event()
	* Log agent reply in enable_event()
	* Log agent reply in list_events()
	* Add agent reply code logging helpers
	* Add a LOG() macro which handles dynamic severity levels
	* Fix: Discard disable event command filter payload
	* Fix: Use MSG_NOSIGNAL when calling sendmsg()
	* Send data pending status as part of payload instead of an invalid error
	* Log error code's value when sessiond replies to a client
	* Tests: Java agent: update after Java agent refactoring
	* Set registration done Agent command version back to 0
	* Fix: Don't send agent disable event command twice
	* Tests: Python agent: update after Python agent refactoring
	* Clean-up: Remove redundant variable initialization
	* Fix: incorrect variable being checked in libc-wrapper test
	* Rename Python agent event name to omit "user"
	* Consolidate agent event names regardless of user privilege
	* Clean-up: Move agent_apps_ht_by_sock definition to main.c
	* Fix: Initialize global agent_apps_ht_by_sock on session daemon launch
	* Fix: set session should not set non-existent session
	* Fix: pids should be numbers only
	* Fix: Mishandled NULL short options in lttng-sessiond
	* Use popt "required_argument" and "no_argument" constants
	* Fix: Mishandled NULL short options in utils_generate_optstring()
	* Fix: only launch a new session daemon for the "create" command
	* Fix 'daemon' typo in lttng-ctl-pc.in description
	* Fix: clean-up agent app hash table from the main sessiond thread
	* Fix: Remove undocumented session daemon short options
	* Comment grammar correction
	* Log userspace application hash table allocation failure
	* Fix: RCU read-side lock released too early in destroy_agent_app
	* Fix: misleading logging statement in agent_find_event
	* Fix: Unhandled domain option condition in list_agent_events
	* Fix: Crash on lttng list -j/-l/-p when no events are present
	* Clean-up: spelling fix in a comment
	* Document relay_add_stream RCU locking
	* Fix: Unbalanced rcu_read_unlock() on stream file creation failure
	* Fix: Unbalanced rcu_read_unlock() on directory creation failure
	* Fix: Document the locking assumptions of ctf_trace_find_by_path()
	* Fix: Memory leak in relay_add_stream error path
	* Update master version to v2.8.0-pre

2015-07-15 lttng-tools 2.7.0-rc1 (Pet Fire Safety Day)
	* Update version to v2.7.0-rc1
	* Tests: lttng-ust-getcpu-override-test cache and error-check sysconf()
	* Tests: lttng-ust-getcpu-override coding-style adjustments
	* Add CPU_ID LTTng-UST context to enum lttng_ust_context_type
	* Bump LTTNG_UST_ABI_MAJOR_VERSION to 6
	* Tests: Ust getcpu override plugin
	* Fix: Follow struct dirent allocation guidelines of READDIR(3)
	* Update comments regarding the power of 2 constraint on sub-buffer sizes
	* Build: add Flex version check
	* Build: add Bison version check
	* Fix: handle sys_futex() FUTEX_WAIT interrupted by signal
	* Fix: metadata push -EPIPE should be recoverable
	* Fix: destroy session removes the default config file
	* Build: bump autoconf version requirement to 2.64
	* Fix: Memory leak in setup of relayd_path
	* Fix: update liburcu URL
	* Fix: test: use "$@" to pass and quote argument
	* Refactor: test: wrapper for lttng_snapshot_del_output
	* Refactor: test: wrapper for lttng_snapshot_add_output
	* Refactor: test: wrapper for destroy_lttng_session
	* Refactor: test: wrapper for stop_lttng_tracing
	* Refactor: test: wrapper for start_lttng_tracing
	* Refactor: test: wrapper for enable_ust_lttng_event
	* Refactor: test: wrapper for enable_ust_lttng_channel
	* Refactor: test: wrapper for create_lttng_session
	* Fix: Memory allocated by xmlNodeGetContent() must be freed by xmlFree()
	* Save/load: add support for shared memory path
	* Fix: get_cmdline_by_pid path length assumes a max pid of 65535
	* Clean-up: Remove ifdef-ed out lttng list options
	* Test: mi: test for greater or equal to a minimum of events on ust listing.
	* Fix: update regression tests involving UST
	* Clean-up: Remove ifdef-ed out function:entry feature
	* Fix: Mark MI and Config string declarations as extern
	* Clean-up append_list_to_probes()
	* Fix: modprobe.c: fix tmp_list memory leak
	* Fix: append_list_to_probes(): increment index
	* Docs: LTTNG(1) filtering is now supported by the kernel tracer
	* Fix: live_test regression on large number of cpus
	* Fix: set UST register timeout to -1 as test default
	* Man page: reference lttng-crash under --shm-path option
	* Tests: Don't rely on implicit scalar expression dereference
	* man pages: use standard NAME format
	* Fix python bindings' Makefile for out-of-tree builds
	* Fix: use LIBS instead of AM_LDFLAGS for dl and c linking
	* Fix: Add missing -ldl when checking for lttng-ust
	* clock plugin: increase offset measurement accuracy
	* Implement UST clock override plugin support
	* Fix: ownership of filter and filter_expression
	* Fix: zero memory passed to create channel kernel ioctl
	* Fix: Check that lttng create --live's time is not zero
	* Fix: Validate lttng_create_session_live's timer is > 0
	* UI: Only show live timer when the session is in live mode
	* UI: Only show tracker PID state when enabled
	* Implement kernel filter support
	* syscall tracing: update tests
	* Support lttng-modules syscall wildcards
	* Implement lttng-modules tracepoint wildcard support
	* Fix build when configuring with --disable-lttng-ust
	* Fix: add missing function prototype to trace-ust.h header
	* Implement PID tracker content listing
	* Implement UST PID tracker
	* Cleanup: Remove unimplemented UST domains
	* Implement PID tracking for kernel tracing
	* Fix: leak on error in lttng-crash
	* Man page fixes: missing --version option and typo
	* Docs: add lttng-crash(1) man page
	* Docs: lttng-crash refers to "lttng"
	* Fix: possible use of uninitialized data in loglevel conversion funcs
	* Fix: possible evaluation of garbage values in fini_validation_ctx()
	* Cleanup: Remove stale #ifdef-ed-out code from spawn_viewer()
	* Fix: Possible call to execvp with NULL argument on allocation failure
	* Fix: Possible call to strtoul() with NULL argument
	* Docs: clarify lttng.1 shm-path section
	* Fix: Missing return value check in extract_trace_recursive()
	* Fix: recursive_rmdir: empty all empty subdir
	* Move file creation/unlink from liblttng-ust-ctl to consumerd
	* lttng-crash: support recursive traces
	* shm-path: remove directory hierarchy on destroy
	* Implement --shm-path option for UST sessions (per-uid channels)
	* Cleanup: Reduce scope of connections in main relayd thread
	* Cleanup: Reduce scope of relayd connections in live thread
	* Docs: connection_find_by_sock() must be called with rcu_read_lock
	* Rename current release as 2.7.0-pre
	* Docs: grammar fix in Makefile
	* Change release name to master
	* configure: add type availability checking
	* configure: add check for compiler inline keyword support
	* configure: missing check for needed header
	* configure: missing check of functions
	* Fix: test: log4j: missing static test files for dist and out of tree build
	* Fix: test: java-jul:missing static test files for dist and out of tree build
	* Fix: out-of-tree build: missing xsd file for mi test execution
	* Fix: out-of-tree build: missing xsd file for save-load test execution
	* Cleanup: remove unused end_no_session label in ust_app_flush_session()
	* Cleanup: Remove unused "end" label in push_metadata()
	* Tests: Run health check test_thread_ok as part of root_regression
	* Fix: deadlock between UST registry lock and consumer lock
	* Fix: uninitialized return value
	* Fix: build failure using disable-lttng-ust configure option
	* Cleanup: Remove unused variable
	* Fix: setuid/setgid daemons should not get sensitive env. var./args
	* Fix: grab more than one packet for snapshots
	* Fix: per-uid flush and ust registry locking
	* Docs: Missing optional dependency on lttng-ust in README.md
	* Docs: Grammar fixes in the lttng manpage
	* Fix: add missing UST perf counter support check
	* Fix: tests: integer too large for long type
	* Fix: undefined operation on last_relay_viewer_session_id
	* Fix: print format type mismatch
	* Fix: print format type mismatch
	* Fix: Remove structurally dead code from relayd
	* Cleanup: Remove logically dead code
	* Cleanup: Remove unused label
	* Fix: Remove unused argument in debug statement
	* Fix: exit threads not only on goto restart
	* Fix: poll: show the correct number of fds
	* Fix: call lttng_poll_set_max_size before start threads
	* Fix: compat poll: add missing empty revents checks
	* Fix: various compat poll/epoll issues
	* Add debugging output to ht-cleanup thread
	* Fix: mi: snapshot: missing error handling for session name
	* Fix: ust-app: per-PID app unregister vs tracing stop races
	* Fix: data pending: allow empty streams
	* Fix: ust snapshot: cleanup after error
	* Fix: Mismatching return type in ust_app_ht_alloc() stub
	* Cleanup: lock file already taken is error, not warning
	* Fix: ust-app null pointer check needed for main refactoring
	* Cleanup: relayd: centralize thread stopping function
	* Cleanup: Replace all perror() uses by the PERROR macro
	* Refactor relayd main/set_options/cleanup
	* Refactor consumerd main/cleanup
	* Refactor sessiond main/cleanup/ht-cleanup
	* Missing error handling: consumer_signal_init should return its error status
	* Cleanup: consumerd: lines over 80 columns
	* Cleanup: consumerd: use PERROR rather than perror
	* Cleanup: lttng-consumerd: remove stale TODO comment
	* Misleading error handling: utils_create_pid_file() should return 0 on success
	* Missing error handling: consumerd parse_args should return errors to caller
	* Missing error handling: ust_app_ht_alloc should return error status
	* Fix: ust app leak on UST buffer creation error
	* Fix: leak on UST buffer registry creation error
	* Fix: agents ht leaks on destroy session
	* Fix: add missing RCU read unlock
	* Fix: help message for Python agent mentions Java
	* Fix: don't destroy the sockets if the snapshot was successful
	* Fix: Missing RCU read locks in syscall_list_channel()
	* Fix: Missing RCU read lock in kernel_destroy_session()
	* Fix: channel names are not validated
	* Cleanup: Missing whitespace
	* Fix: Apply consumer URI changes to all domains
	* Cleanup: Fix a typo in the MI tests
	* Test fix: Don't invoke the system's lttng client
	* Tests: Add a test to check disabled events are loaded in the correct state
	* Fix: Don't leave events enabled if they were saved in a disabled state
	* Fix: "Any" loglevel's value is -1 and not 0
	* Test fix: LTTNG_SESSION_CONFIG_XSD_PATH expects an absolute path
	* Fix: Memory leak on error in alloc_argv_from_user_opts()
	* Cleanup: Unchecked close() return value in utils_create_lock_file()
	* Cleanup: No check of the return value of lttng_ht_del()
	* Cleanup: Mixed enums used for return code in send_sessiond_channel()
	* Cleanup: Cast poll() return value to void
	* Fix: Unreachable error logging in set_option()
	* Fix: OOM leaks in sessiond modprobe.c
	* Cleanup: sessiond modprobe.c: coding style
	* Cleanup: test_utils_expand_path.c prototypes
	* Fix: test_utils_expand_path.c: out of memory error handling
	* Fix: test test_ust_data.c: check OOM
	* Fix: test libc-wrapper: check malloc OOM
	* Cleanup: test libc-wrapper: main parameters
	* Fix: lttng-ctl: use zmalloc(), missing OOM check
	* Fix: filter-parser.y: use zmalloc(), missing OOM check
	* Fix: utils.c: check str*dup OOM
	* Cleanup: implement zmalloc as static inline
	* Fix: rculfhash: use zmalloc()
	* Fix: ini.c: use zmalloc()
	* Fix: lttng lttng.c: check strdup OOM
	* Fix: lttng conf.c: use zmalloc()
	* Fix: lttng view.c missing strdup OOM check
	* Fix: use zmalloc() in lttng view.c
	* Fix: use zmalloc() in lttng list.c
	* Fix: oom error check, realloc oom leak
	* Fix: use zmalloc in lttng enable_events.c
	* Fix: missing strdup oom check in lttng create.c
	* Fix: lttng add_context.c: use zmalloc
	* Cleanup: add missing static to function modprobe_remove_lttng()
	* Fix: add missing str*dup oom check in sessiond main.c
	* Fix: add missing sessiond kernel-consumer missing str*dup oom checks
	* Fix: add missing strdup OOM check
	* Fix: add missing synchronization point for before app test case
	* Fix: tests: wait output hide Terminate errors
	* Fix: tests: remove killall, add missing SIGTERM handlers
	* Fix: high throughput test: reset bw limit on sigterm
	* Fix: tests: add missing wait, document missing synchro
	* Document test anti-patterns
	* Fix: test flaky sleep and wait patterns
	* Fix: tests: don't use pidof to wait for test apps
	* Fix: Live tracing does not honor live timer after first tracefile with tracefile rotation
	* Fix: Handle empty daemon configuration file lines
	* Docs: Add -f/--config option to lttng-sessiond man page
	* Cleanup: spaghetti function return path
	* Fix: relayd: unbalanced RCU read-side lock/unlock
	* Fix: relayd: unbalanced RCU read lock/unlock
	* Fix: lttng-relayd: unhandled out of memory error
	* Fix: relayd viewer stream: unhandled out of memory error
	* Build fix: Apps defining _LGPL_SOURCE must link to urcu-bp
	* Define _LGPL_SOURCE in test apps' tracepoint provider files
	* Define _LGPL_SOURCE in test applications
	* Fix: Missing rcu_read_lock in cmd_list_events()
	* Fix: Missing rcu_read_lock in list_lttng_agent_events()
	* Fix: Missing rcu_read_lock in cmd_list_channels()
	* Fix: Missing rcu_read_locks in cmd_list_domains()
	* Fix: Missing rcu_read_lock in cmd_snapshot_list_outputs()
	* Fix: Missing rcu_read_lock in save_domains()
	* Fix: Missing rcu_read_lock in ust_app_get_nb_stream()
	* Fix: UST subbuffers silently dropped on moderate trace traffic
	* Fix: Missing rcu_read_lock in get_session_max_subbuf_size()
	* Fix: create/destroy a splice_pipe per stream
	* Note find_ust_app_context must be called with RCU read lock
	* Fix: empty indexes_ht before destroying it.
	* Fix: removed useless key from relay_index
	* Fix: Ambiguous agent event filter bytecode ownership
	* Fix: filter bytecode and string memory leak on error
	* Fix: define _LGPL_SOURCE in C files
	* Fix: HT must not be destroyed with a rcu_read_lock held
	* Fix: agent events HT should be destroyed from the cleanup thread
	* Fix: missing rcu_read_lock in trace_ust_destroy_session()
	* Fix: missing rcu_read_lock when calling trace_ust_find_agent()
	* Fix: missing rcu_read_lock in cmd_start_trace()
	* Cleanup: remove "disabled" flag for new release cycle
	* Fix: filter attach vs event enable race
	* Fix: Mark libxml2 as a mandatory dependency
	* Fix: Warn the user when enabling an event in a new domain
	* Fix: Don't report an error when listing a session with no channels
	* Bypass 0 byte allocation when no domains are enabled
	* Fix: Add missing URCU_TLS access to error_log_time
	* Fix: check userspace perf counter name when looking up contexts
	* Update maintainer section of the man pages
	* Update maintainer section of README.md
	* Fix: add README.md to documentation files
	* Fix: UST consumer sync all available metadata
	* Test: remove bogus argument from prove invocation
	* Fix: typo in pythong test Makefile
	* Fix: memory leak in libconfig
	* Add Python agent support
	* Fix: return EINVAL if agent registration fails
	* Use lttng-modules ABI version ioctl
	* Fix: syscall list ioctl number conflict
	* Update master ChangeLog with 2.5.1 release

2014-10-20 lttng-tools 2.6.0-rc1 (Harry Belafonte records Banana Boat Song)
	* Machine Interface added to lttng command line (--mi)
	* Java Log4j agent support (--log4j)
	* Kernel per syscall tracing
	* Multiple fixes.

2014-10-20 lttng-tools 2.5.1
	* Fix: handle sysconf possible negative returned value
	* Fix: channel deref. after NULL check in kernel consumer
	* Fix: check for kernel session metadata during init
	* Fix: incorrect cast in ust consumer assert
	* Fix: bad handling of incoming data in consumer thread
	* Fix: disable event for JUL domain
	* Fix: send disable ALL command code if event is *
	* Fix: make sure no index is in flight before using inactivity beacons
	* Fix: Parenthesize previous statement when adding conditions to a filter
	* Fix: parse_prob_opts return the actual success of the function
	* Fix: Man page typos
	* Fix: disable JUL event on destroy
	* Fix: unbalanced ustconsumer32_data.pid_mutex lock

2014-07-16 lttng-tools 2.5.0 (Take Your Poet to Work Day)
	* Fix: validate file path creds in autoload mode
	* Fix: change session file loading order
	* Fix: add Loading Sessions section to lttng-sessiond.8
	* Fix: add default session conf. dir to manpage
	* Fix: on session load, add it to the .lttngrc
	* Fix: clarify session conf. directory in man
	* Fix: filter error path could free invalid ptr
	* Fix: Create a lock file to prevent multiple session daemons
	* Fix: relayd stream set close_flag on stream close
	* Fix: ustctl_get_stream_id without UST support
	* Fix: avoid freeing invalid ptr in filter bytecode
	* Fix: get the stream_id when generating live beacons
	* Fix: use biggest subbuffer size for snapshot max-size
	* Fix: Possible memory leak when multiple config files are loaded
	* Fix: Clamp verbosity value read from config file
	* Fix: Unchecked strdup return values in set_option

2014-06-27 lttng-tools 2.5.0-rc2
	* Test: add JUL disable event tests
	* Fix: disable JUL event on UST side
	* Fix: accept override flag even without a load path
	* Fix: bad error code path when loading session
	* Fix: set session in output mode if URL are set afterwards
	* Fix: add a kernel context list to the channel
	* Fix: Add vpid, vppid and vtid info in add-context help
	* Fix: wrong behavior of save command when no session name is provided
	* Fix: missing context type string in save for ust context
	* Fix: wrong casting of return value
	* Fix: add dependency to libcommon for python binding
	* Fix: remove the default GIT_VERSION

2014-05-28 lttng-tools 2.5.0-rc1 (International Hamburger Day)
	* Save/load session feature
	* Daemon configuration file support
	* UST perf counter support with add-context
	* Kernel tracer probe user define list
	* Multiple fixes! The diff is just too big to put here.

2014-07-16 lttng-tools 2.4.2 (Take Your Poet to Work Day)
	* Fix: Create a lock file to prevent multiple session daemons
	* Fix: relayd stream set close_flag on stream close
	* Fix: ustctl_get_stream_id without UST support
	* Fix: get the stream_id when generating live beacons
	* Fix: missing include for getpwuid()
	* Fix: add a get HOME dir fallback to getpwuid
	* Fix: don't set enabled flag is session start fails
	* Fix: logger name dropped from filter condition when loglevels are used
	* Fix: memory leak in lttng_enable_event_with_exclusions
	* Fix: check malloc return value
	* Fix: static array larger than necessary
	* Fix: set session in output mode if URL are set afterwards
	* Fix: Add vpid, vppid and vtid info in add-context help
	* Fix: alignment problems on targets not supporting unaligned access.
	* Fix: possible use after free in consumer
	* Fix: improve and update lttng.h comments
	* Fix: JUL filtering for event *
	* Fix: deny overwrite mode and num subbuf less than 2
	* Fix: remove bad option in enable channel --help
	* Fix: implicit conversion from enumeration
	* Fix: clarify man page lttng.1
	* Fix: Copy-pasted PERROR messages may be misleading
	* Fix: incorrect printf format
	* Fix: handle ENOENT when creating a kernel event
	* Fix: move JUL filter creation to a function
	* Fix: JUL filtering done on the UST level
	* Fix: Don't include the binary in the live test's EXTRA_DIST
	* Fix: add JUL filter to UST event on logger_name
	* Fix: Racy event validation in tests
	* Fix: rework utils_parse_size_suffix

2014-04-08 lttng-tools 2.4.1 (OpenSSL heartbleed day)
	* Fix: don't delete stream from connection recv list
	* Fix: use after free of a relayd stream
	* Fix: don't print stream name in error message
	* Fix: take session list lock when listing tp
	* Fix: add consumer wake up pipe to avoid race
	* Fix: don't spawn relayd if URL is provided
	* Fix: don't ask data pending if session was not started
	* Fix: missing test file in EXTRA dist
	* Fix: allow empty URL for live session creation
	* Fix: missing valid return code when adding an URI to consumer
	* Fix: syntax error in lttng.1
	* Fix: check relayd fd leak in lttng cmdline
	* Fix: remove unused tp in high-throughput test
	* Use autoconf AM_MAINTAINER_MODE.
	* Fix: clang 'constant-out-of-range-compare' warning
	* Fix: Unchecked session pointer when destroying a connection in relayd

2014-02-28 lttng-tools 2.4.0 (Public Sleeping Day)
	* Fix: improve lttng with live by spawning relayd
	* Fix: relayd should listen for viewers on localhost only by default
	* Fix: handle loglevel range ALL in list command
	* Tests: add JUL test for multiple loglevel
	* Fix: index JUL event by name *and* loglevel
	* Fix: JUL to enable user and root tracepoints
	* Fix: handle the registration done command for JUL
	* Test fix: use temp file sync. of test app
	* Fix: keep metadata channel attr in UST session
	* Tests fix: Missing waitpid in fork test
	* Fix: add loglevel type to lttng list <name>
	* Fix: minor rephrasing of the lttng.1 man page
	* Fix: Warn user if JUL port is already being used
	* Fix: add some sane default values to --live opt
	* Fix: possible NULL deref. in sessiond error path
	* Fix: flag that kernel streams FDs has been sent
	* Fix: forbid session name creation if contains /
	* Fix: don't start session if no channel
	* Fix: add missing relayd option to man page
	* Fix: report error if consumer can't be spawned
	* Fix: lttng list -u <name> should only list UST
	* Fix: kernel channel destroy on consumer if sent
	* Fix: only create UST metadata on start trace
	* Revert "Fix: wrong condition on startup for low-activity streams"
	* Fix: missing big endian conversion for one index field
	* Fix: wrong condition on startup for low-activity streams
	* Fix: perror on index directory creation error
	* Comments fix: lttngerr.h -> error.h (./Changelog:754)
	* Fix: consumerd errors on exit
	* Fix: scanf unbounded input
	* Fix: miscellaneous memory handling fixes
	* Fix: add missing VALGRIND ifdef checks and documentation

2014-02-14 lttng-tools 2.4.0-rc5
	* Fix: steal channel key in the consumer to avoid race
	* Fix: change ERR statement to DBG in kernel read subbuffer
	* Fix: handle snapshot ENODATA in live timer
	* Fix: relayd leak on error in consumer splice()
	* Fix: protect close_write_flag with the rotation lock
	* Man: clarify loglevel for JUL domain
	* Fix: Define __STDC_LIMIT_MACROS to fix C++ builds
	* Fix: bad indentation of lttng list in man page
	* Fix: wrong data structure used in commit df41f83
	* Fix: add missing optional dependency to babeltrace in README
	* Fix: cleanup inconsistent use of spaces/tabs in README
	* Fix: only set the new_streams flag if a viewer is attached
	* Fix: lttng-live documentation
	* Fix: remove dead code in relayd live code
	* Fix: use after free error code path
	* Fix: wrong sizeof argument in live viewer create session
	* Fix: zero out the reply structure in viewer_connect
	* Fix: write index only if fd is valid
	* Fix: cleanup relayd on any I/O error in read subbuffer mmap
	* Fix: memory/fd leak when cleaning streams in channel
	* Fix: destroy streams in consumer del channel
	* Fix: add missing urcu wfqueue headers in relayd
	* Fix: in lttng_read/write deny count bigger than the possible returned value
	* Fix: fd leak when closing metadata stream
	* Fix: read subbuffer mmap/splice signedness issue
	* Doc: live protocol clarifications
	* Fix: remove unused create_viewer_session option
	* Fix: don't sleep(1) on the consumer ready flag
	* Fix: free viewer session in connection_free()
	* Fix: add missing ctf trace delete before destroy
	* Fix: don't delete ctf trace while in snapshot mode
	* Fix: add flag to create session command and fix tests
	* Fix: cleanup indef guards following the rename
	* Fix: merge issue with thread quit pipe
	* Fix: use uint32_t for metadata_flag in viewer's ABI
	* Fix: check for new streams in all attached sessions
	* Fix: Move static functions up in the code
	* Fix: allow attach command to multiple sessions
	* Fix: handle session hang up in get_new_streams
	* Fix: force the client to create a viewer session before attaching
	* Fix: Namespace lttng-viewer-abi
	* Fix: relayd connection object refactor
	* Fix: big relayd cleanup and refactor
	* Fix: code refactoring of viewer streams in relayd
	* Fix: handle new streams in live mode in relayd
	* Fix: notify the viewer if new streams got added
	* Fix: send the streams sent message after metadata
	* Add extern C to the health-check header
	* Fix: memory leak in unit test
	* Man: add JUL DOMAIN section to lttng.1
	* Fix: handle invalid URL passed to lttng_create_session_live
	* Fix: add --jul-tcp-port to sessiond man page
	* Fix: measure UST clock offset with best sample (v2)
	* Fix: remove free in unit test not needed anymore
	* Fix: relay create session for version before 2.4
	* Fix: memory leak when UST events are enabled with exclusions

2014-01-29 lttng-tools 2.4.0-rc4
	* Fix: add -b, --background option
	* health check tests: test relayd and consumerd
	* tests: Add stop_lttng_relayd_nocheck
	* Fix: add missing JUL loglevel handling
	* relayd: add testpoints
	* relayd: use same pipe for live and main
	* Cleanup relayd live comment
	* Fix: relayd: add LPOLLERR to events
	* Fix: relayd: notify parent of readiness when all threads ready
	* Fix: tests: start relayd in background mode (-b)
	* lttng-relayd: implement background cmd line option
	* sessiond: add missing testpoints
	* tests: use --background for session daemon
	* sessiond: add --background argument
	* Use lib common daemonize
	* Fix: sessiond: wait for health check readiness
	* Fix: relayd: initialize lttcomm inet
	* Consumer: add testpoints
	* Fix: consumerd: HT init/teardown with program
	* Cleanup: lttng-ctl-health comment
	* Add daemonize() to libcommon
	* Fix: tests: wait for consumerd to complete
	* Fix: consumerd: use DBG rather than DBG2
	* Fix: consumerd: only return readiness when health is ready
	* Fix: consumerd should initialize lttcomm
	* Fix health check: signal parent before exit testpoint
	* Test health: add test_thread_ok
	* health check: change --relayd-path arg to --relayd-path=arg
	* relayd: add LTTNG_RELAYD_HEALTH env var
	* Add sessiond/SESSIOND_ prefix to sessiond testpoints
	* Fix: zero out data structure before using it
	* Fix: delete metadata stream before destroying it
	* Fix: report to client when snapshot will be empty

2014-01-14 lttng-tools 2.4.0-rc3
	* Fix: metadata stream should be always flagged as ready
	* Fix: wrong check before destroying the viewer metadata stream
	* Fix: race with the viewer and readiness of streams
	* Fix: missing reset when listing UST fields for multiple PIDs
	* Fix: filter: check binary op nesting
	* Fix: relayd cmd line option for live port
	* Fix: remove break in epoll loop of apps. thread
	* Fix: wrong comment in snapshot public API
	* Fix: clear the CTF traces when all the streams are closed

2013-12-10 lttng-tools 2.4.0-rc2
	* Fix: close connection on incompatible version check
	* Fix: fields alignements in live protocol
	* Tests: add regression test for Java JUL support
	* Fix: possible use after free
	* Fix: remove unused code in session daemon
	* Fix: string format with unsigned value
	* Fix: remove useless assert
	* Fix: bad logical check of error codes
	* Fix: resource leak in enable-event command
	* Fix: unchecked return value in ust app delete
	* Fix: dereference after null check in UST registry
	* Fix: Resource leak in ust registry
	* Fix: backported from urcu commit 92af1a30
	* Tests: fix racy tests and misleading output messages
	* Tests: fix bad argument parsing in test app
	* Fix: remove assert on fd in the read/write layer
	* Fix: missing lock/unlock when sending index
	* Fix: update back the metadata len sent on failure
	* Fix: don't fail on push metadata if no channel
	* Rename LTTng index in CTF index
	* Fix: set the enable all event command type
	* Fix: implicit conversion of enum types in sessiond
	* Fix: implicit conversion of enum types in consumer
	* Fix: comparison of unsigned enum expression >= 0
	* Fix: comparison of unsigned value agains < 0
	* Fix: create a fast and a long UST snapshot test
	* Tests: fix racy UST snapshot post mortem test
	* Tests: remove useless sleep when spawning sessiond
	* Add travis-ci configuration file
	* Add libuuid as dependency in README
	* Tests: add valid test cases to test_utils_expand_path
	* Tests: add symlink tests for test_utils_expand_path
	* Fix: utils_expand_path now works for paths that ends with '/.' or '/..'
	* Fix: comment indentation
	* Add missing copyright to utils.c
	* Fix: use non block waitpid to lookup child state

2013-11-15 lttng-tools 2.4.0-rc1
	* Live streaming support
	* Health check support in consumer and relayd
	* Event exclusion support
	* Java Util Logging support
	* Multiple fixes! The diff is just too big to put here.

2013-11-13 lttng-tools 2.3.1
	* Fix: typo in --sig-parent help
	* Fix: application SIGBUS when starting in parallel with sessiond
	* Fix: missing LTTNG_OK return value for snapshot
	* Fix: arguments in the wrong order for fd-limit
	* Fix: Some corrections to the lttng man page
	* Fix: recv creds comm should handle partial receive
	* Fix: set app socket timeout just after accept()
	* Fix typo in lttng snapshot add-output example of lttng(1)

2013-09-03 lttng-tools 2.3.0
	* Fix: remove periodical flush test from make check

2013-08-30 lttng-tools 2.3.0-rc3
	* Fix: hashtable: take split_count_order into account
	* Fix: remove wrong doing asserts in sessiond
	* Tests: fix periodical flush tests to stop app
	* Fix: correctly close metadata on sessiond thread shutdown
	* Fix: delete the trace directory used for the test
	* Fix: remove bad check after epoll wait in consumer
	* Fix: missing data pending signess conversion
	* Fix: consumer data pending for empty streams
	* Fix: hash table growth (for small tables) should be limited (v2)
	* Fix: run_as gid/uid test should return result to parent
	* Fix: missing check for metadata data pending
	* Tests: change buffers UID test to PID
	* Tests: fix health tests to use custom socket timeout
	* Fix: remove health test from fast regression
	* Use socket timeout value for tcp timeout if available
	* Fix: set the health delta tcp timeout aware
	* Get the maximum TCP timeout in sessiond
	* Fix: don't report error if UST app dies
	* Fix: support VPATH build for tests
	* Improve comments after review
	* Rename consumer socket fd to fd_ptr
	* Lock consumer data before fd check during destroy
	* Use single callsite for send/recv ops. for consumer in sessiond
	* Use consumer fd reference in consumer socket obj
	* Update bash completion
	* Add --list-commands option to the snapshot command
	* Reorder functions _lttng_cmd_* functions in bash completion
	* Use parse_size_suffix in snapshot
	* Fix: snapshot record error handling
	* Fix: improve error message when UST support is disabled
	* Fix: add missing short filter option in help
	* Fix: typo in configure.ac for version check
	* Fix: remove calibrate syscall option from code
	* Fix: snapshot should fail if no successful snapshot is taken
	* Fix: check UST float field mantissa length
	* Fix: add UST context in the same order the user enabled them
	* Introduce configure --with-lttng-system-rundir
	* Add .dirstamp to gitignore file
	* Fix: snapshot with multiple UIDs
	* Prepare for automake deprecation of missing subdir-objects
	* Fix: typos in --help and manpage
	* Fix: add-context without -c apply to all channels
	* Fix: channels can be _enabled_ after tracing is started, but not created
	* Fix filter parser segmentation fault with bison 3.0
	* Fix: typo in error msg
	* Fix: imprecise error message about root sessiond/tracing group
	* Fix: don't skip chmod if tracing group is not found
	* Tracepoint probes don't need extern C
	* Fix: Snapshot should be taken asap in core handler script
	* Fix: reset out_fd_offset when we rotate the trace file
	* Fix: LTTNG_ERR_NEED_ROOT_SESSIOND error message
	* inet/inet6 sockets: apply timeout
	* Implement timeout for connect ipv4/ipv6
	* Introduce LTTNG_NETWORK_SOCKET_TIMEOUT env. var
	* bash completion: add calls to _lttng_complete_sessions
	* bash completion: Fix copy-paste typo
	* Extras: Remove deprecated consumer commands in bash completion
	* bash completion: Remove underscores in handler function names
	* bash completion: Remove --event for add-context
	* Update gitignore
	* relayd: use version macros from build rather than scanf
	* sessiond: use version major/minor from build for communication with relayd
	* build: export major/minor/patchlevel numbers
	* Fix: Dead code when checking return value from (ust_app|kernel)_snapshot_record
	* Test: enable kernel events after start
	* Fix: kernel ctl error codes are based on errno
	* Fix: format string mismatch
	* test: test_periodical_metadata_flush shrink timer period, kill app
	* Fix: format string type mismatch
	* snapshot howto: update text
	* Add snapshot howto

2013-07-19 lttng-tools 2.3.0-rc2
	* Add core-handler README to dist tarball
	* extras: core-handler: simplify, allow usage from tracing group
	* Cleanup: add missing dot
	* Fix: documentation: create name and options
	* Add core dump snapshot handler script
	* Fix: sym name len (kernel)
	* Fix: tests: provide channel name when a non-default channel exists: per-pid
	* Fix: tests: provide channel name when a non-default channel exists
	* Fix: data pending race
	* Fix hang in make check snapshots/test_ust
	* Cleanup: ust-consumer: wrong indentation
	* Fix: print dots while waiting for data availability
	* Fix: remove sleep(1) added by "Fix: (slight UI change) refuse missing -c if non-default channel exists"
	* Fix: (slight UI change) refuse missing -c if non-default channel exists
	* Fix: push metadata on stop for per-UID buffers
	* README: update python documentation
	* Manpage: other layout cleanups
	* Manpage: cleanup layout of view
	* Manpage: cleanup layout of version
	* Manpage: cleanup layout of stop
	* Manpage: cleanup layout of start
	* Manpage: cleanup layout of snapshot
	* Manpage: cleanup layout of set-session
	* Manpage: cleanup layout of list
	* Manpage: cleanup layout of disable-event
	* Manpage: cleanup layout of disable-channel
	* Manpage: cleanup layout of enable-event
	* Manpage: cleanup layout of enable-channel
	* Manpage: cleanup layout of destroy
	* Manpage: cleanup layout of create
	* Manpage: cleanup layout of calibrate
	* Manpage: cleanup layout of add-context
	* Documentation: create --snapshot in manpage

2013-07-17 lttng-tools 2.3.0-rc1
	* Fix: add missing snapshot header to dist tarball
	* Documentation: fix thread quit pipe comment
	* Test for presence of bison and flex when building from git
	* Test UST snapshot with large metadata
	* Add test application with large metadata
	* Cleanup: remove redundant assignment
	* Fix: use per-uid buffer registry for UID buffer snapshots
	* cmd.c: fix typos in snapshot commands
	* Test snapshot per-uid post-mortem
	* Remove leftover fprintf
	* Fix deadlock: don't take channel lock in timer
	* Introduce channel timer lock
	* document lttng_ustconsumer_request_metadata locking constraints
	* consumer: remove unused lttng_ustconsumer_push_metadata
	* Document metadata_socket_lock nesting
	* lttng_ustconsumer_recv_metadata does not need all those locks
	* document metadata_switch_timer() deadlock
	* Fix: add missing metadata socket lock
	* document metadata_switch_timer() locking constraints
	* consumer: remove timeout for UST metadata
	* Introduce pipe for UST metadata cache and stream
	* consumer: replace DBG2() instances by DBG()
	* Introduce utils_create_pipe_cloexec_nonblock()
	* ust consumer: data_pending check is endpoint active
	* Fix: kernel consumer: data_pending check if endpoint active
	* consumer: explicitly set endpoint status to active at init
	* document consumer_metadata_cache_flushed use of consumer_data.lock
	* consumer: introduce channel lock
	* Merge branch 'master' of git://git.lttng.org/lttng-tools
	* Fix: update lttng snapshot help output
	* Man: fix part of snapshot documentation
	* Fix: set tracefile size test with PID buffers
	* Fix: Babelstats fail to parse output with no process name or pid
	* Missing NULL pointer init in tap.c
	* Fix: Unchecked asprintf/vasprintf return values
	* Add snapshots test to fast regression
	* Fix: kernel data unit test
	* Fix: snapshot returned valid LTTNG_ERR code
	* Add the number of snapshot taken to the output path
	* Fix: RCU read side lock unbalanced
	* Fix: zeroed snapshot output at init
	* Support del-output with an output name
	* Update man page with snapshot command
	* New UST default buffers is now per UID
	* Bump UST ABI major version for 2.3 release
	* Add snapshot mode to lttng list session
	* Fix: support temporary snapshot max size and name
	* Support snapshot max-size limitation
	* Tests: per-UID UST snapshot
	* Fix: snapshot support for UST and kernel in same session
	* Implement lttng create --snapshot command
	* Add create session snapshot API in lttng-sessiond
	* Add snapshot output init call that uses URIs
	* Fix: consumer err_sock cloexec
	* Callsite: add "ip" context
	* Fix: possible consumer sockets double close on cleanup
	* Automatically load kvm-x86 and kvm-x86-mmu probes.
	* Fix: consumer: use uint64_t for all sessiond_id
	* Fix: add gpl and lgpl files to tarball
	* Fix: don't install libtap system wide
	* Fix: close consumer sockets in sessiond cleanup
	* Fix: set globally visible flag to kernel stream
	* Fix: lttng: memory leak in snapshot record command
	* Fix: kernel-consumer: double-close
	* Fix: consumer: incorrect size zmalloc
	* Fix: don't try to send stream to relayd if not in streaming
	* Fix: relayd refcount updates for stream
	* Fix: don't send error to sessiond on orderly shutdown
	* Fix: bad pathname used when sending kernel stream to relayd
	* Fix: add globally visible flag in stream
	* Fix: destroy metadata stream on setup metadata error path
	* Fix: send kernel stream to relayd only if needed
	* Fix: destroy streams for kernel snapshot sessions as well
	* Fix: close and destroy metadata stream after a kernel snapshot
	* Fix: print errno message on connect() error
	* Fix: possible double-close on stream out_fd
	* Fix: session ID signess to uin64_t in sessiond
	* Tests: fix validation trace path in kernel snapshot
	* Tests: Add UST snapshot local and streaming
	* Add UST snapshot support
	* Fix: consumer_add_relayd_socket() report errors to sessiond
	* Fix: add missing enum lttcomm_return_code entries
	* Fix: UST per-UID channels persist across application teardown
	* Fix: kernel snapshot metadata handling and error paths
	* Fix: coding style and debug statement
	* Fix: put subbuffer back in kernel snapshot error path
	* Fix: overflow in uri_to_str_url
	* Fix: detect the correct version of LTTng-UST
	* Fix: sessiond: use uint64_t for all session ids
	* Tests: add kernel snapshot streaming to root regression
	* Tests: remove debug output from test
	* Tests: Add kernel snapshot streaming
	* Fix: use snapshot consumer output for kernel
	* Fix: periodical flush check trace before stop
	* Fix: consumer: 64-bit index for relayd rather than 32-bit (v2)
	* Fix UST channel/stream output assignation
	* Fix: send per-pid session id in channel creation
	* Fix: consumer double-close on error
	* Update URCU detection to correctly check for a 0.7 version
	* Fix: snapshot path
	* Add utils function to format current time as a string
	* Fix: set hidden attribute to utils_* calls
	* Fix: consumer handling of metadata for relayd
	* Add kernel snapshot support
	* Support flight recorder mode for a session
	* Implement snapshot commands in lttng-sessiond
	* Add snapshot command to lttng UI
	* Initial import of the snapshot ABI/API in lttng-ctl
	* Use the consumer stream API in consumer_del_stream()
	* Add consumer-stream.c/.h in libconsumer
	* Move multiple URLs parsing fct from lttng-ctl to uri.c
	* Add a lttng-ctl header to facilitate code separation

2013-06-25 lttng-tools 2.2.0 (National Catfish Day)
	* STABLE VERSION
	* Fix: if relayd is unreachable, disable consumer for the session
	* Fix: possible infinite loop in disable ust event
	* Fix: don't enable a channel if a session was already started
	* Fix: bad type for the relayd id
	* Fix: add debug statement in kernel flush metadata
	* Fix: destroy default created channel if add-context fails
	* Fix: clarify tracefile size/count in lttng.1 man
	* Fix: don't stop a session that was not previously started
	* Fix: update lttng.1 man page
	* Fix: bad protocol flow between sessiond and consumerd
	* Fix: kernel memory leak in error path

2013-06-20 lttng-tools 2.2.0-rc3
	* Multiple memory and fd leak fixes in sessiond and consumerd
	* Test: stress test added to the repository but not in make check
	* Using LTTNG_HOME environment variable if exists, with fallback to HOME
	* Implement health check for app registration dispatch
	* Implement health check for app notification thread
	* Revert "Improve channel listing output format"
	* Fix: use lttng pipe to send new stream to thread
	* Change consumer_metadata_pipe to be a lttng_pipe
	* Change consumer_data_pipe to be a lttng_pipe
	* Add wrappers for pipe
	* Add --version command-line option to lttng.
	* Add --with-lttng-ust-prefix config option.
	* Fixes from coverity scan.
	* Stability fixes
	* RCU hash table are now destroyed in a seperate thread in sessiond

2013-05-09 lttng-tools 2.2.0-rc2
	* Fix: split UST per UID/PID default values
	* Fix: don't start the relayd with a wrong --output dir
	* Fix: Erroneous automatic session name when streaming
	* Fix: wrong data port when listing session's URI
	* Fix: don't create a channel on an enable channel
	* Tests: Add missing test_utils_parse_size_suffix to unit tests
	* Fix: print lttng strerror on enable event with filter
	* Fix: change relayd protocol version to 2.2
	* Fix: reset current size for tracefile rotation
	* Fix: remove extra -I for python bindings
	* lttng UI: round up trace file size to subbuf size if needed
	* Fix lttng UI: fix arg parsing, round size to next power of two
	* Fix: check errors in lttng command argument values
	* Implement get_count_order in lttng utils
	* lttng cli: Accept human readable sizes for --subbuf-size
	* Unit tests: don't rebuild units under test
	* Fix: consumerd metadata channel/cache/timer races
	* Fix: consumerd channel destroy race
	* Cleanup: document RCU read-side lock better
	* consumer relayd interaction: fix segfaults
	* Fix: change order of fd get to fix error path
	* Fix: fd leak when creating UST metadata channel
	* Fix: fd leak on error
	* Fix consumerd fd leak
	* Fix RCU-related hangs: incorrect lttng_ht_destroy use
	* rculfhash: check for callers from RCU read-side C.S.
	* Fix: don't call hash table destroy under rcu read-side c.s.
	* Documentation: import updated comments from urcu
	* Fix: segfault in buffer_reg_channel_destroy()
	* Fix: add missing goto error in UST consumer
	* Fix: no need to use run_as_open in the relayd
	* Fix: typo in enable-channel man and help
	* Fix: add some missing hidden attribute
	* Fix: per-uid buffers should only be flushed once on stop
	* Cleanup: Use own mutex within timer setup/teardown
	* Fix: channel management thread should hold a refcount
	* Fix: move metadata cache setup before ownership passing
	* Fix: consumer metadata switch timer error handling
	* Fix: set ptr to NULL to suppress old gcc warnings
	* Fix: linking order of libraries
	* Fix: multiple type mismatch in debug statement
	* Fix: remove mention of trace directory layout in quickstart doc
	* Fix: remove unused path variables from session obj
	* Fix: update lttng.1 man and enable-channel help with read timer size
	* Fix: use channel per domain default values
	* Fix: typos in the code base
	* Fix: deny multiple event types with enable-event
	* Fix: deny the same port for data and control URL
	* Fix: reset consumer destination when changing URIs
	* Fix: don't allow different control and data destination
	* Fix: typos in error strings
	* Improve channel listing output format
	* Fix: enable-channel accepts mismatched option
	* Fix: validate buffer type for UST channel creation

2013-03-28 lttng-tools 2.2.0-rc1
	* Add UST per UID buffers support
	* UST metadata generation are created on the sessiond side
	* Move LTTng-UST buffer ownership from application to consumer
	* Add a UST registry of events and channel in the sessiond
	* UST periodical metadata flush
	* Refactor tests to use prove and tap
	* Support for trace file rotation for the relayd and on disk
	* Support per-context filtering
	* Add channel wakeup fd to monitor close
	* Deprecate enable/disable-consumer
	* Multiple fixes and memory leak fix.

2012-12-20 lttng-tools 2.1.0 (13th Baktun)
	* STABLE VERSION 2.1.0-stable - "Basse Messe"
	* Multiple minor fixes
	* Multiple memory and fd leaks
	* Fix: Off by one in seq num for data pending command
	* Fix: flag metadata stream on quiescent control cmd
	* Fix: prioritize control socket communication in relayd
	* Fix: poll and epoll fd set reallocation
	* Fix: add missing goto pending if data is inflight
	* Fix: remove ua_sess->started assert on stop trace
	* Set classes of traffic in high_throughput_limit
	* Fix: use the poll wait ret value when iterating on fd(s)
	* Fix: force the poll() return value to be nb_fd
	* Fix: Wrong check of node when cleaning up ht
	* Fix: set started flag of ust app after ustctl
	* Fix: memory leak in add relayd socket error path
	* Fix: add packed attribute to filter structure
	* Fix: Add missing health code update for consumer command
	* Add LTTNG_PACKED macro
	* Fix data pending for inflight streaming
	* Map session id of relayd and sessiond in consumer
	* Add the relayd create session command
	* Make the consumer sends a ACK after each command
	* Remove MSG_WAITALL on every recvmsg() socket typ
	* Fix: Add missing relayd ht cleanup and ht destroy
	* Fix: Relayd and sessiond version check
	* Fix: protect consumer_find_channel with rcu locking
	* Fix: don't steal key when adding a metadata stream
	* Consumer hold stream mutex for add stream

2012-12-03 lttng-tools 2.1.0-rc9
	* Fix: set the stream ht static in consumer file
	* Update sessiond man page with new env var
	* Update lttng.1 man page
	* Fix: enable-consumer for all domains missing dir
	* Fix: Add missing fct prototypes when disabling UST
	* Fix a typo in lttng-probe-module name
	* Assign values to enum lttcomm_sessiond_command
	* Fix: run health test only if root
	* Clarify empty string/NULL filter errors
	* Fix: add missing padding for UST filter

2012-11-22 lttng-tools 2.1.0-rc8
	* Fix: Uninit. variable in lttng view
	* Add already enabled UST event error code
	* lttng.h API update: set filter becomes enable event with filter
	* Change the UST event hash table match function
	* Pass lttng_event struct to the set_filter API call
	* Adding context to an event is no longer possible
	* Add UST overlap tests
	* Add filter sequence number to UST
	* Fix: Typo from a previous patch in an assert()
	* Fix: Warn if session is running with lttng view
	* Fix: Add bash requirement to README for make check
	* Fix: add the notion of domain to lttng.1 man page
	* Enable additional kernel probes
	* Update CodingStyle
	* Use the new functions for default subbuf sizes
	* Add default subbuf sizes getter functions
	* Add max() and min() macro in common

2012-11-13 lttng-tools 2.1.0-rc7
	* Fix: Add pointer check when freeing poll events
	* Fix: FD leak on thread error
	* Fix: Wrong fd used by kernel_wait_quiescent
	* Support new lttng-ust error code
	* Fix: Don't set filter if enable event fails
	* Fix: Wrong data port when listing session
	* Fix: Enable event after start command
	* Fix: Teardown of thread_manage_clients on failure of listen/create_poll
	* Add a timeout to UST application socket
	* Fix: Consumerd error socket connect race
	* Fix: Set CLOEXEC flag on every created sockets
	* Remove consumer poll timeout in data thread
	* Fix: RCU hash table seed
	* Fix: Do not install health tests helper libraries
	* Fix: Create default channel on add-context if none
	* Support new liblttng-ust-ctl error code
	* Fix: Add EPIPE error handling on buffer splice
	* Fix: Channel creation error return code was not set
	* Fix: Wrong poll events on UST application socket
	* Fix: Remove dependency to urcu-cds in tools tests
	* Fix: Missing librt dependency in configure check for lttng-ust-ctl
	* Fix: Don't append datetime to default session name
	* Fix: Deny session creation name 'auto'
	* Fix: Add space for stream name CPU number
	* Fix: Add output option to enable-channel command

2012-11-02 lttng-tools 2.1.0-rc6
	* Tests: Add filtering tests for uncovered cases
	* Fix: Sync issue when deleting a data stream
	* Rename data_available to data_pending
	* Fix: consumer health state
	* Fix: Add the ACCOUNTING flag to ht creation and set bucket size to 0
	* Fix: Bad return error code handling
	* Fix: Use after free() of the rundir string
	* Fix: Cleanup UST app session on ustctl create session error
	* Fix: add missing pthread_join in sessiond
	* Fix: free running directory string
	* Fix: UST app clean list node usage
	* Add liblttng-ctl destructor to cleanup memory
	* Fix: Cleanup URIs on teardown
	* Fix: relayd memleaks
	* Fix: Memory leaks of allocated URIs
	* Fix: consumer output memory leak on creation
	* Fix: missing addrlen initialization before accept(2)
	* Fix: relayd trace file padding memleak
	* Fix: Remove useless consumer subdir string concatenation
	* Fix: lttng create allocated path memleak
	* Fix: Cppcheck memleakOnRealloc mistake
	* Fix: Synchronization issue for data available command
	* Fix: consumer relayd cleanup on disconnect
	* Fix: Handle the unary bitwise negation operator (~) in the XML printer
	* Fix: Possible memory leaks when creating filter IR root node
	* Fix: Delete stream on write error in consumer
	* Fix: Error handling when sending relayd sockets to consumer
	* Add stream lock comment for nesting
	* Fix: Mutex and RCU lock nesting in consumer
	* Fix: Uninitialized ret code
	* Fix: Remove bad condition and fix overflow issue
	* Fix: consumerd pthread error flow
	* Fix: Set a single return point and mutex unlock
	* Fix: Remove useless NULL and zero assignment
	* Fix: segfault on create session with two URLs

2012-10-22 lttng-tools 2.1.0-rc5
	* Fix: Remove network stream ID ABI calls
	* Tests: Add filtering tests
	* Wait for data availability when stopping a session
	* Relayd data available command support
	* Lib lttng-ctl data available command support
	* Consumer daemon data available command support
	* Add data structure for the data available command
	* Change the metadata hash table node
	* Make stream hash tables global to the consumer
	* Move add data stream to the data thread
	* Rename consumer threads and spawn them in daemon
	* Fix: relayd close stream command was not working
	* Fix: Relayd and consumerd socket leaks
	* Fix: Missing -ENODATA handling in the consumer
	* Fix: Empty metadata buffer(s) on HUP|ERR
	* ABI with support for compat 32/64 bits
	* Fix: Stream allocation and insertion consistency
	* Fix: output number of bytes written by relayd
	* Add hash table argument to helper functions
	* Fix: Add missing call rcu and read side lock
	* Tests: Fix LD_PRELOAD library lookup path for health tests
	* Fix: Add arbitrary wait period for kernel streaming test
	* Fix coding style and add/change debug statements
	* Fix: Build out of src tree
	* Tests: Add health check tests to configure
	* Tests: Add health check thread stall test
	* Tests: Add health check thread exit test
	* Tests: Add a health check utility program
	* Add testpoints in lttng-sessiond for each threads
	* New testpoint mechanism to instrument binaries for testing
	* Fix: off-by-one in comm proto between lttng-ctl and sessiond
	* Fix: Metadata stream leak when received in consumer
	* Fix: consumer_allocate_stream error handling
	* Fix: consumer should await for initial streams
	* Fix: Missing rcu read side lock in consumer

2012-09-26 lttng-tools 2.1.0-rc4
	* Fix: Change sempahore to pthread conditions
	* Fix: relayd relay_send_version: handle sscanf return code
	* Fix relayd: NULL ptr deref
	* Fix: relayd: possible NULL ptr deref, memory leak, accept fd leak
	* Tests: add print bytecode to filter grammar test
	* Cleanup: assign values to bytecode opcodes
	* Fix: Filter: Fix allocation length error
	* Fix: Filter: add missing ast free
	* Tests: Add high throughput with bandwidth limits test
	* Fix: Returned code when listing kernel channel
	* Tests: Rename helper functions to have consistent names
	* Tests: Cleanup redundant code and use printing helper functions
	* Tests: Add helper functions for printing status and banner
	* Tests: Add a check for color support when printing status
	* Fix: Lib lttng-ctl on error returns lttng code
	* Fix: lttng_set_event_filter() was returning bad error code
	* Fix: printing [no write] on lttng list -uf
	* Fix: Disable event on filter error with lttng
	* Fix: Wrong returned error code on UST enable event
	* Add consumer commands to lttng.1 man page
	* Add lttng_health_check(3) man page
	* Fix: Remove LPOLLNVAL from consumer metadata revents
	* Fix: Mismatch of field name between ust and tools
	* Add the written value when listing fields
	* Fix: Consumer return value check after mmap/splice
	* Don't send the subbuffer padding for streaming
	* Fix: Returned error code in consumer on read buffer

2012-09-12 lttng-tools 2.1.0-rc3
	* Fix: Relayd fix ret value when adding a connection
	* Add new thread in consumer for metadata handling
	* Fix: consumer recv command error path
	* Fix filter: fix recent regressions
	* Update lttng-ust-abi.h from upstream lttng-ust
	* Fix: Accept bytecode of length 65536 bytes
	* Fix: Generation of bytecode longer than 32768 bytes fails
	* Fix: Filter bytecode alloc buffer size must be a power of 2
	* Add lttng-ctl SWIG python bindings
	* Add C++ support to API header files
	* Librarify filter in liblttng-ctl and hide symbols
	* Set hidden visibility for calls used in lttng-ctl
	* Notify the user if a filter is already enabled
	* Install lttng-error.h and include it in lttng.h
	* Add lttng-error.h containing every API err. code
	* Fix: missing hostname context

2012-08-22 lttng-tools 2.1.0-rc2
	* Fix: put back 2.0 output text for lttng create cmd
	* Fix: remove set subdir call that uses bad ptr
	* Filter: Handle the unary bitwise not operator (~) with an unsupported
	* Fix: missing mutex unlock on register consumer err
	* Remove underscore from ifndef of lttng.h
	* Remove unused define in lttng.h
	* Standardize lttng command line usage text
	* Merge duplicate code in consumer for destroy relayd
	* Merge duplicate code in consumer for add relayd
	* Fix: Possible buffer overflows in strncat() usage
	* Move code out of main.c and fix some issues

2012-08-17 lttng-tools 2.1.0-rc1
	* Feature: Network Streaming
	* Add the lttng-relayd binary for network streaming
	* Support user space tracer filtering
	* Multiple fixes

2012-04-19 lttng-tools 2.0.1
	* Fix: test script for kernel module validation
	* Fix: report error to client on consumerd error
	* Fix: add missing ht_destroy at consumer teardown
	* Fix: consumer fd recv thread should write into non-blocking pipe
	* Fix: work-around glibc __nptl_setxid vs clone hang
	* Fix: consumer fd recv poll should be sensitive to POLLPRI too
	* Fix consumer lttng_consumer_poll_socket poll revents check bug
	* Fix: increase consumer open files limit
	* Update README: document dep on modprobe for kernel tracing
	* Fix: wait for sessiond to stop in tests
	* Fix: remove unused return variable
	* Don't report back error on syscalls fail for -a -k
	* Fix: destroy context hash table being NULL
	* Fix: make lttng expand path for trace output opt
	* Fix: return value signedness
	* Fix: man page environment variable name error
	* Fix: check return value on getenv USER

2012-03-20 lttng-tools 2.0.0
	* Fist STABLE version
	* Add version name: Annedd'ale

2012-03-20 lttng-tools 2.0.0-rc4
	* Fix: add small detail to enable-channel man page
	* Fix: warned of arbitrary time for ust-nprocesses test
	* Fix. add limitation to man page
	* Fix: minor changes to lttng.1
	* Fix: add exit values to lttng.1 man page
	* Fix: add delay before validating apps in test nproc
	* Fix: error handling in lttng enable-event
	* Fix: document structure init. to 0 in lttng.h
	* Fix: uninitialized variable
	* Keep track of FD used for UST applications (v2)
	* Fix: lttng view, error message and exit code
	* Small fixes to lttng man pages (v2)
	* Fix: handle EINTR for sendmsg syscall
	* Fix: lttng UI exit value and error message
	* Fix: session lock use after free
	* Fix kernel_list_events memleaks
	* Fix debug message use uninitialized variable
	* Fix: trace_ust_destroy_metadata should check for NULL pointer
	* Fix: various memleaks
	* Fix: hash table allocation out of order on error
	* fix: lttng_ht_destroy memleak

2012-03-16 lttng-tools 2.0.0-rc3
	* Fix: missing headers for make dist
	* Fix: install lttng-consumerd in lib/lttng/libexec/
	* Fix: Redefine MAP_STACK to 0 if not defined by the architecture
	* Fix: consumer CPU hotplug support
	* Fix: double PID registration race
	* Make libcompat independent not to confuse automake
	* Clarify the license of lttng-ust-abi.h
	* Fix: License header
	* Fix: wrong return value on consumer socket creation
	* Fix: test for UST invalid channel parameters at channel creation
	* Fix: recvmsg should handle EINTR
	* Fix: error.h non-static variables for liblttng-ctl
	* Fix: missing _GNU_SOURCE define
	* Fix: improve need root for kernel tracing error message
	* Fix: start/stop lttng message error

2012-03-02 lttng-tools 2.0.0-rc2
	* Fix: meaningful error message
	* Fix: UST consumer need to iterate on streams, just change their key
	* Fix: add missing rcu read lock across RCU HT iteration
	* Fix: kernel session closes fd 0 after create
	* Fix: sendmsg EPIPE should be quiet by default (expected)
	* Fix: thread_registration_apps should set its local sock to -1 when passing it
	* Fix: clock -> sock typo
	* Fix: consumer race: should allow reuse of FD key
	* Fix: Use PERROR all across lttng-tools, never make it quiet
	* Fix: test all close return values in sessiond
	* Fix: All perror turned into PERROR to show file and line number
	* Fix: large audit of close() use in sessiond main.c
	* Fix: main.c client/apps sockets and kernel_trace_fd close(0)
	* Fix: incorrect close of fd 0 for syscall kernel event destroy
	* Fix: sessiond has incorrect missing 0 value in FD check
	* Fix: sessiond app listening: use posix-compliant poll flags
	* Fix: consumer printf type should match ssize_t (%zd)
	* Fix: make ust consumer posix compliant for poll flags
	* Fix security permission on lttng run directory
	* Fix: Display right loglevel_type in error message
	* Fix documentation in lttng.h
	* Fix: lttng UST and kernel consumer: fix ret vs errno mixup
	* Fix: restart consumerd and sessiond when interrupted in poll()
	* Fix: handling bad channel when sending to consumer
	* Fix useless variable
	* Fix add-context returned error
	* fix: add missing break in command handling
	* fix: command handling: do not check domain for commands not requiring domain
	* fix: if tracing group does not exist, do not report a client error
	* Fix: run_as error handling
	* Fix usage note on -a
	* Revert FreeBSD compatibility layer
	* Fix: documented number of subbuffers is incorrect
	* Document that num-subbuf and subbuf-size need to be power of 2
	* Merge branch 'master' of git://git.lttng.org/lttng-tools

2012-02-20 lttng-tools 2.0.0-rc1
	* Fix lttcomm_close_unix_sock to actually close the socket
	* lttng-sessiond: Set group permissions explicitly

2012-02-16 lttng-tools 2.0-pre23
	* configure.ac: Fix consumerd64-libdir typo
	* Fix existing session daemon check
	* Fix missing session locks
	* Fix return value on ust app session create
	* Fix double start/stop trace
	* Fix ust app session started state on start trace
	* modprobe statedump, signal and timer lttng module
	* Fix hyphens in man pages

2012-02-14 lttng-tools 2.0-pre22
	* Add the bash-completion file to the dist tarball
	* Add the LICENSE file too
	* Package used for the Ubuntu LTS (feature freeze)

2012-02-13 lttng-tools 2.0-pre21
	* Fix licensing for hashtable/utils.c
	* Print loglevel value in list -u
	* Remove "<all> from MSG() when no loglevel is selected
	* Initial import of man lttng.1 and lttng-sessiond.8
	* Fix memory leak  master

2012-02-09 lttng-tools 2.0-pre20
	* New lttng view command
	* Multiple loglevel fixes
	* Fix list command
	* Fix session syscall listing
	* Multiple fixes across the code base

2012-02-02 lttng-tools 2.0-pre19
	* Update lttng ust ABI/API copy
	* Implement UST calibrate and change default
	* Add MSG_WAITALL to recvmsg of sessiond-comm
	* Check kernel version for tests
	* Add a '--list-options' option to each command.
	* First import of extras/ with lttng bash completion
	* Remove default defines from lttng.h
	* Fix lttng sessiond spawn wait race
	* Add CMD_WARNING error code
	* Fix context mapping for UST and kernel
	* Add kernel work-around for boot_id
	* Rewrites lttng-ctl's set_session_daemon_path
	* Fix memory lean in all lttng cli commands
	* Update loglevel ABI
	* Add padding to all ABIs for future development.
	* Improve error handling of lttng cli
	* Multiple fixes across the code base (nothing critical)

2012-01-23 lttng-tools 2.0-pre18
	* Complete change of the source directory tree
	* Move compat to common and create an internal lib
	* Rename lttngerr.h to error.h
	* Add kernel module version validation
	* Add UST version validation
	* Change SIGCHLD to SIGUSR1 when lttng waiting on sessiond
	* Fix off-by-one and double list size instead of steady increment

2012-01-19 lttng-tools 2.0-pre17
	* Add and support the new hash table library
	* Add lttng hash table support to liblttng-consumer
	* RCU support for consumer's hash tables
	* UST consumer close shm fd after mapping it
	* Remove CLONE_VM flag for runas making gdb debugging impossible
	* Make MSG() print on stdout instead of stderr
	* Don't init kernel tracer if not root (UID=0)
	* Multiple fixes found when reaching max. number of open files
	* Add some UST tests
	* Multiple segfaults and assert error fixed

2011-12-23 lttng-tools 2.0-pre16
	* Per-user lttng-sessiond now fully functionnal
	* Fix nested double usage of hashtable iterators
	* Support creds passing between lttng and sessiond
	* Rename sessiond internal "uid" fields to "id"
	* Create all trace directories and files with client user credentials
	* Create output directory at session creation command
	* Only allow the user or group owning the session (or root) to control a session
	* Add disable kernel tracing option to sessiond

2011-12-13 lttng-tools 2.0-pre15
	* (MAJOR) User-space tracing support for global domain (lttng-ust 2.0)
	* UST consumer 32/64 bit support
	* Multiple bug fixes
	* Multiple segfault, race and double lock fixes
	* API change for lttng_list_domains, lttng_start/stop and lttng_destroy
	* UST loglevel support
	* ABIs now support 256 char event names
	* Dependency on libpopt >= 1.13
	* Dependency on URCU >= 0.6.7
	* Rename kernel-ctl.c/.h to kernel.c/.h
	* Change malloc to zmalloc in lttng-sessiond code
	* RCU hashtable support for all UST data structure
	* New libconsumer for UST, kernel and one generic
	* Change "--all" option from lttng command line
	* Remove function entry option to discourage its use

2011-09-30 lttng-tools 2.0-pre14
	* Syscall tracing support
	* Multiple bug fixes (nothing critical)
	* Add userspace RCU hash table to tree for dev
	* Update UST ABI
	* Fix epoll that did not handle EINTR
	* Liburcu >= 0.6.5 is needed from this release
	* Enabling all events also enable syscall tracing
	* Debug messages are now on stderr
	* Add basic data structure for UST support but not ready yet.

2011-08-25 lttng-tools 2.0-pre13
	* Memory leaks fixes and double lock list
	* Add UST registration with sychronisation
	* Use poll/epoll compatibility layer for the sessiond
	* Major code cleanup of ltt-sessiond/main.c
	* Increase listen() connexion limit
	* Fix bad enable-channel command
	* Rename trace.c/.h to trace-kernel
	* Multiple fixes on the poll management with the new epoll API

2011-08-25 lttng-tools 2.0-pre12
	* Multiple fixes
	* Fix kconsumerd handling custom channel output
	* Add lttng_register_consumer to register a custom consumer
	* Add multiples tests of the session daemon
	* Default kernel channel size/number changed
	* Support for UST application registration
	* Import LTTng UST 2.0 ABI
	* Send data to kconsumerd before tracing start
	* Export API of lib kernel consumer (liblttngkconsumerd)

2011-08-12 lttng-tools 2.0-pre11
	* New lttng API using the lttng_handle
	* Multiple fixes of kernel consumer
	* Register the consuming function and add a library context
	* Kernel consumer fix mmap/munmap
	* lttng-sessiond-comm header has been privatize
	* Kernel traces are written in the kernel/ directory
	* Add underscore to enable-channel command options

2011-07-29 lttng-tools 2.0-pre6
	* Fix enable multiple events
	* Add function entry feature

2011-07-28 lttng-tools 2.0-pre5
	* Fix Add context command
	* Fix auto session path creation
	* Fix bad strncmp at channel creation

2011-07-23 lttng-tools 2.0-pre4
	* Fix kprobe attributes
	* Fix channel creation when not found at event enable
	* Add safe list iteration
	* Add two tests into the git tree
	* Kernel consumer can be put in debug mode with -vv
	* Trace path is now created on the client side

2011-07-23 lttng-tools 2.0-pre3
	* Fix perf hw cache counter config values

2011-07-22 lttng-tools 2.0-pre2
	* Multiple fixes
	* New add-context options for perf counter and context
	* Using the install bin path from autotool for execl() call
	* Update quickstart guide

2011-07-20 lttng-tools 2.0-pre1
	* First prerelease of lttng-tools.
	* Working with the LTTng v2.0-pre1 modules and Babeltrace v0.1
