#!/bin/bash
#
# Copyright (C) - 2017 Jonathan Rajotte <jonathan.rajotte-julien@efficiso.com>>
#
# This library is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; version 2.1 of the License.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA

TEST_DESC="Notification"

CURDIR=$(dirname $0)/
TESTDIR=$CURDIR/../../../

TESTPOINT=$(readlink -f ${CURDIR}/.libs/libpause_consumer.so)

TESTAPP_PATH="$TESTDIR/utils/testapp"
TESTAPP_NAME="gen-ust-events"
TESTAPP_BIN="$TESTAPP_PATH/$TESTAPP_NAME/$TESTAPP_NAME"
TESTAPP_STATE_FILE="$(mktemp -u)"

NR_ITER=1000
NR_USEC_WAIT=5

SESSION_NAME="my_session"
CHANNEL_NAME="my_channel"


DIR=$(readlink -f $TESTDIR)

PAGE_SIZE=$(getconf PAGE_SIZE)

NUM_TEST_UST=50
NUM_TEST_KERNEL=50
NUM_TESTS=$(($NUM_TEST_UST + $NUM_TEST_KERNEL))

source $TESTDIR/utils/utils.sh

consumerd_pipe=()
file_sync_after_first_event=$(mktemp -u)

# MUST set TESTDIR before calling those functions
plan_tests $NUM_TESTS

print_test_banner "$TEST_DESC"

app_pids=()

function kernel_event_generator_toogle_state
{
	kernel_event_generator_suspended=$((kernel_event_generator_suspended==0))

}
function kernel_event_generator
{
	state_file=$1
	kernel_event_generator_suspended=0
	trap kernel_event_generator_toogle_state SIGUSR1
	trap "exit" SIGTERM SIGINT
	while (true); do
		if [[ $kernel_event_generator_suspended -eq "1" ]]; then
			touch $state_file
			sleep 0.5
		else
			if [[ -f $state_file ]]; then
				rm $state_file 2> /dev/null
			fi
			echo -n "1000" > /proc/lttng-test-filter-event
		fi
	done
}

function ust_event_generator_toogle_state
{
	ust_event_generator_suspended=$((ust_event_generator_suspended==0))

}
function ust_event_generator
{
	state_file=$1
	ust_event_generator_suspended=0
	trap ust_event_generator_toogle_state SIGUSR1
	trap "exit" SIGTERM SIGINT
	while (true); do
		if [[ $ust_event_generator_suspended -eq "1" ]]; then
			touch $state_file
			sleep 0.5
		else
			if [[ -f $state_file ]]; then
				rm $state_file 2> /dev/null
			fi
			taskset  -c 0 $TESTAPP_BIN $NR_ITER $NR_USEC_WAIT > /dev/null 2>&1
		fi
	done
}

function start_client {
	local pid=-1
	local output_file=$1
	local session_name=$2
	local channel_name=$3
	local domain_type=$4
	local buffer_usage_type=$5
	local buffer_usage_threshold_type=$6
	local buffer_usage_threshold_value=$7
	local nr_expected_notification=$8

	${CURDIR}/base_client ${session_name} ${channel_name} ${domain_type} ${buffer_usage_type} ${buffer_usage_threshold_type} ${buffer_usage_threshold_value} ${nr_expected_notification} > ${output_file} &
	pid=$!

	app_pids+=("$pid")
}

function wait_for_message ()
{
	local directory=$1
	local file_pattern=$2
	local message=$3

	for file in $directory/${file_pattern}*; do
		while(true); do
			# Check for "error" message
			grep -q "error:" ${file}
			app_error=$?
			if [ $app_error -eq "0" ] ; then
				# An error occurred
				fail "Waiting message: error logged see file content: ${message}, ${file}"
				return 1
			fi

			grep -q "${message}" ${file}
			if [[ "$?" -ne "0" ]]; then
				# Lookup failed restart loop
				diag "Lookup failed sleep and retry grep for: ${message}, ${file}"
				sleep 0.25
				continue
			fi
			break
		done
	done
	pass "Message received: ${message}"
	return 0
}

function print_errors ()
{
	local directory=$1
	local file_pattern=$2

	for file in $directory/${file_pattern}*; do
		# Check for "error" message
		error_message=$(grep "error:" ${file})
		if [[ "${error_message}x" != "x" ]]; then
			diag "Errors for application ${file}:"
			diag "${error_message}"
		fi
	done
}

function comm_consumerd ()
{
	local message=$1
	local pipe=$2
	echo -ne "${message}" > "${pipe}"
}

function stop_consumerd ()
{
	local pipe=$1
	comm_consumerd "1" "$pipe"
}

function resume_consumerd ()
{
	local pipe=$1
	comm_consumerd "\0" "$pipe"
}

function test_multi_app ()
{
	local domain_type=$1
	local event_generator_pid=$2

	local app_pids=()
	local low_output_file_pattern="low_app_output_file_"
	local high_output_file_pattern="high_app_output_file_"
	local output_dir=$(mktemp -d)

	local testpoint_base_path=$(readlink -f "$output_dir/lttng.t_p_n_multi_app")
	local testpoint_pipe_path=$(mktemp -u "${testpoint_base_path}.XXXXXX")

	local nr_notification_expected=5
	local nr_client_app=50
	local domain_string=""
	local event_name=""

	case $domain_type in
		ust)
			domain_string=LTTNG_DOMAIN_UST
			event_name="tp:tptest"
			;;
		kernel)
			domain_string=LTTNG_DOMAIN_KERNEL
			event_name="lttng_test_filter_event"
			;;
		*)
			fail "Invalid domain type"
			exit 1
			;;
	esac

	# Setup
	LTTNG_SESSIOND_ENV_VARS="LTTNG_TESTPOINT_ENABLE=1 CONSUMER_PAUSE_PIPE_PATH=${testpoint_pipe_path} LD_PRELOAD=${TESTPOINT}"
	start_lttng_sessiond

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	enable_${domain_type}_lttng_channel_ok $SESSION_NAME $CHANNEL_NAME --subbuf-size=$PAGE_SIZE
	enable_${domain_type}_lttng_event_ok $SESSION_NAME $event_name $CHANNEL_NAME

	# Fetch consumerd testpoint pipe information
	# This is needed since the testpoint create a pipe with the consumer type suffixed
	consumerd_pipe=()
	for f in "$testpoint_pipe_path"*; do
		consumerd_pipe+=("$f")
	done

	for (( i = 0; i < $nr_client_app; i++ )); do
		low_app_output_file=$output_dir/${low_output_file_pattern}${i}
		high_app_output_file=$output_dir/${high_output_file_pattern}${i}
		start_client $low_app_output_file $SESSION_NAME $CHANNEL_NAME $domain_string LOW RATIO 0.0 $nr_notification_expected
		start_client $high_app_output_file $SESSION_NAME $CHANNEL_NAME $domain_string HIGH RATIO 0.420 $nr_notification_expected
	done

	wait_for_message $output_dir "${low_output_file_pattern}" "sync: ready"
	wait_for_message $output_dir "${high_output_file_pattern}" "sync: ready"

	# Test notification reception
	for (( i = 0; i < $nr_notification_expected; i++ )); do

		# Stop consumerd consumption to force high notification
		start_lttng_tracing_ok $SESSION_NAME
		for pipe in "${consumerd_pipe[@]}"; do
			stop_consumerd "${pipe}"
		done

		wait_for_message $output_dir "${high_output_file_pattern}" "notification: high $i"

		# Put application in suspend mode to prevent double low
		# notification and synchronize on state file.
		kill -s SIGUSR1 $event_generator_pid
		while [ ! -f "${TESTAPP_STATE_FILE}" ]; do
			sleep 0.5
		done

		# Resume consumerd
		for pipe in "${consumerd_pipe[@]}"; do
			resume_consumerd "${pipe}"
		done
		# Stop tracing forcing full buffer consumption
		stop_lttng_tracing $SESSION_NAME

		# Check for notifications reception
		wait_for_message $output_dir "${low_output_file_pattern}" "notification: low $i"
		ret=$?
		ok $ret "Notifications $i received"
		if [[ $ret -ne "0" ]]; then
			# Error occurred bail out
			break;
		fi

		# Put application in active mode and synchronize on state file.
		kill -s SIGUSR1 $event_generator_pid
		while [ -f "${TESTAPP_STATE_FILE}" ]; do
			sleep 0.5
		done
	done

	wait_for_message $output_dir "${low_output_file_pattern}" "exit: 0"
	ret=$?
	ok $ret "Application for low notification terminated normally"
	if [[ $ret -ne "0" ]]; then
		print_errors $output_dir "${low_output_file_pattern}"
	fi

	wait_for_message $output_dir "${high_output_file_pattern}" "exit: 0"
	ret=$?
	ok $ret "Application for high notification terminated normally"
	if [[ $ret -ne "0" ]]; then
		print_errors $output_dir "${high_output_file_pattern}"
	fi

	rm -rf $output_dir

	destroy_lttng_session_ok $SESSION_NAME
	stop_lttng_sessiond

	for pipe in "${consumerd_pipe[@]}"; do
		rm -rf "${pipe}"
	done
}

function test_multi_app_ust ()
{
	diag "Multi client app UST notification"
	ust_event_generator $TESTAPP_STATE_FILE &
	local generator_pid=$!

	test_multi_app ust $generator_pid

	kill -s SIGTERM $generator_pid 2> /dev/null
	wait $generator_pid 2> /dev/null
	rm -rf ${TESTAPP_STATE_FILE} 2> /dev/null
}

function test_multi_app_kernel ()
{
	diag "Multi client app kernel notification"
	modprobe lttng-test

	kernel_event_generator $TESTAPP_STATE_FILE &
	local generator_pid=$!

	test_multi_app kernel $generator_pid


	kill -s SIGTERM $generator_pid 2> /dev/null
	wait $generator_pid 2> /dev/null
	rm -rf ${TESTAPP_STATE_FILE} 2> /dev/null

	rmmod lttng-test
}

function test_on_register_evaluation_ust ()
{
	diag "On register notification UST"

	# Start app in infinite loop
	ust_event_generator $TESTAPP_STATE_FILE &
	local generator_pid=$!

	test_on_register_evaluation ust $generator_pid

	kill -s SIGTERM $generator_pid 2> /dev/null
	wait $generator_pid 2> /dev/null
	rm -rf ${TESTAPP_STATE_FILE} 2> /dev/null

}

function test_on_register_evaluation_kernel()
{
	diag "On register notification kernel"

	modprobe lttng-test

	kernel_event_generator $TESTAPP_STATE_FILE &
	local generator_pid=$!

	test_on_register_evaluation kernel $generator_pid


	kill -s SIGTERM $generator_pid 2> /dev/null
	wait $generator_pid 2> /dev/null
	rm -rf ${TESTAPP_STATE_FILE} 2> /dev/null

	rmmod lttng-test
}

function test_on_register_evaluation ()
{
	local domain_type=$1
	local event_generator_pid=$2

	local app_pids=()
	local high_output_file_pattern="high_app_output_file_on_register_evaluation"

	local output_dir=$(mktemp -d)
	local testpoint_base_path=$(readlink -f "$output_dir/lttng.t_p_n_register_evaluation")
	local testpoint_pipe_path=$(mktemp -u "${testpoint_base_path}.XXXXXX")
	local domain_string=""
	local event_name=""

	case $domain_type in
		ust)
			domain_string=LTTNG_DOMAIN_UST
			event_name="tp:tptest"
			;;
		kernel)
			domain_string=LTTNG_DOMAIN_KERNEL
			event_name="lttng_test_filter_event"
			;;
		*)
			fail "Invalid domain type"
			exit 1
			;;
	esac

	# Setup
	LTTNG_SESSIOND_ENV_VARS="LTTNG_TESTPOINT_ENABLE=1 CONSUMER_PAUSE_PIPE_PATH=${testpoint_pipe_path} LD_PRELOAD=${TESTPOINT}"
	start_lttng_sessiond

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	enable_${domain_type}_lttng_channel_ok $SESSION_NAME $CHANNEL_NAME --subbuf-size=$PAGE_SIZE
	enable_${domain_type}_lttng_event_ok $SESSION_NAME $event_name $CHANNEL_NAME

	# Fetch consumerd testpoint pipe information
	# This is needed since the testpoint create a pipe with the consumer type suffixed
	consumerd_pipe=()
	for f in "$testpoint_pipe_path"*; do
		consumerd_pipe+=("$f")
	done

	high_app_output_file=${high_output_file_pattern}.first_receiver
	high_app_output_path=$output_dir/${high_app_output_file}
	start_client $high_app_output_path $SESSION_NAME $CHANNEL_NAME $domain_string HIGH RATIO 0.420 1

	wait_for_message $output_dir "${high_app_output_file}" "sync: ready"

	# Stop consumerd consumption to force high notification
	start_lttng_tracing_ok $SESSION_NAME

	for pipe in "${consumerd_pipe[@]}"; do
		stop_consumerd "${pipe}"
	done

	wait_for_message $output_dir "${high_app_output_file}" "notification: high 0"

	# Start a second receiver, the receiver should receive a high
	# notification on subscription
	high_app_output_file=${high_output_file_pattern}.second_receiver
	high_app_output_path=$output_dir/${high_app_output_file}
	start_client $high_app_output_path $SESSION_NAME $CHANNEL_NAME $domain_string HIGH RATIO 0.420 1
	wait_for_message $output_dir "${high_app_output_file}" "sync: ready"
	wait_for_message $output_dir "${high_app_output_file}" "notification: high 0"

	# Resume consumerd
	for pipe in "${consumerd_pipe[@]}"; do
		resume_consumerd "${pipe}"
	done

	wait_for_message $output_dir "${high_output_file_pattern}" "exit: 0"
	ret=$?
	ok $ret "Application for high notification terminated normally"
	if [[ $ret -ne "0" ]]; then
		# Keep the file
		print_errors "${high_output_file_pattern}"
	fi

	rm -rf $output_dir

	destroy_lttng_session_ok $SESSION_NAME
	stop_lttng_sessiond

	kill -s SIGTERM $generator_pid 2> /dev/null
	wait $generator_pid 2> /dev/null

	for pipe in "${consumerd_pipe[@]}"; do
		rm -rf "${pipe}"
	done

}


TESTS=(
	test_multi_app_ust
	test_on_register_evaluation_ust
)

if [ "$(id -u)" == "0" ]; then
	TESTS+=(
	test_multi_app_kernel
	test_on_register_evaluation_kernel
)
else
        skip 0 "Root access is needed. Skipping all kernel multi-app notification tests." $NUM_TEST_KERNEL
fi


for fct_test in ${TESTS[@]};
do
	TRACE_PATH=$(mktemp -d)

	${fct_test}
	if [ $? -ne 0 ]; then
		break;
	fi

	# Only delete if successful
	rm -rf $TRACE_PATH
done
