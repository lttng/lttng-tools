#!/bin/bash
#
# SPDX-FileCopyrightText: 2015 Philippe Proulx <pproulx@efficios.com>
# SPDX-FileCopyrightText: 2014 David Goulet <dgoulet@efficios.com>
#
# SPDX-License-Identifier: GPL-2.0-only

TEST_DESC="Python support"

CURDIR=$(dirname $0)/
TESTDIR=$CURDIR/../../..
NR_ITER=5
NR_SEC_WAIT=0
TESTAPP_NAME="gen-py-events"
TESTAPP_BIN="$TESTAPP_NAME.py"
TESTAPP_PATH="$TESTDIR/utils/testapp/$TESTAPP_NAME/"
SESSION_NAME="python-test"
EVENT_NAME="python-ev-test1"
EVENT_NAME2="python-ev-test2"
OUTPUT_DEST="/dev/null"

python_versions=(@PYTHON2_AGENT@ @PYTHON3_AGENT@)
run_test=@RUN_PYTHON_AGENT_TEST@

if [[ -z "$run_test" ]]; then
	NUM_TESTS=1
else
	NUM_TESTS=$(((208 * ${#python_versions[@]})+2))
fi

source $TESTDIR/utils/utils.sh

function run_app
{
	local python=$1
	local debug_tp=$2
	local fire_second_tp=$3
	local ready_file=$4
	local go_file=$5
	local opt=""

	if [[ -n "$debug_tp" ]] && [ "$debug_tp" -eq "1" ]; then
		opt="${opt} -d"
	fi

	if [[ -n "$fire_second_tp" ]] && [ "$fire_second_tp" -eq "1" ]; then
		opt="${opt} -e"
	fi

	if [[ -n "$ready_file" ]]; then
		opt="${opt} -r ${ready_file}"
	fi

	if [[ -n "$go_file" ]]; then
		opt="${opt} -g ${go_file}"
	fi

	$python $TESTAPP_PATH/$TESTAPP_BIN -n $NR_ITER -s $NR_SEC_WAIT $opt
}

function run_app_background
{
	run_app "$@" &
	tracee_pids+=("${!}")
}

function enable_python_loglevel_only()
{
	sess_name=$1
	event_name="$2"
	loglevel=$3
	channel_name=$4

	if [ -z "$channel_name" ]; then
		# default channel if none specified
		chan=""
	else
		chan="--channel $channel_name"
	fi

	_run_lttng_cmd "$(lttng_client_log_file)" "$(lttng_client_err_file)"  enable-event \
		--loglevel-only "$loglevel" "$event_name" $chan --session "$sess_name" --python
	ok $? "Enable Python event $event_name for session $sess_name with loglevel-only $loglevel"
}

function enable_python_filter()
{
	local sess_name="$1"
	local event_name="$2"
	local filter="$3"

	_run_lttng_cmd "$(lttng_client_log_file)" "$(lttng_client_err_file)" enable-event \
		"$event_name" --session "$sess_name" --python --filter "$filter"
	ok $? "Enable event $event_name with filter $filter for session $sess_name"
}

function enable_python_filter_loglevel_only()
{
	local sess_name="$1"
	local event_name="$2"
	local filter="$3"
	local loglevel="$4"

	_run_lttng_cmd "$(lttng_client_log_file)" "$(lttng_client_err_file)" enable-event \
		--loglevel-only "$loglevel" "$event_name" --session "$sess_name" \
		--python --filter "$filter"
	ok $? "Enable event $event_name with filter \"$filter\" and loglevel-only $loglevel for session $sess_name"
}

# MUST set TESTDIR before calling those functions

function test_python_before_start ()
{
	local ready_file=$(mktemp -u -t)
	local go_file=$(mktemp -u -t)

	diag "Test Python application BEFORE tracing starts"
	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	enable_python_lttng_event $SESSION_NAME $EVENT_NAME

	# Run 5 times with a 1 second delay
	run_app_background $1 "" "" $ready_file $go_file

	# Wait for ready file
	while [ ! -e ${ready_file} ]; do
		sleep 0.5
		if ! ps -p "${tracee_pids[@]}" > /dev/null 2>&1 ; then
			# Avoid hanging indefinitely. This can happen if
			# the lttngust python module can't be found and the
			# test application bails out.
			diag "Background application failed unexpected"
			break
		fi
	done

	start_lttng_tracing_ok $SESSION_NAME

	# Wait for the applications started in background
	echo "1" > ${go_file}
	wait "${tracee_pids[@]}"

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting all events.
	trace_match_only $EVENT_NAME $NR_ITER $TRACE_PATH
	if [ $? -ne 0 ]; then
		return $?
	fi

	rm $go_file
}

function test_python_after_start ()
{
	diag "Test Python application AFTER tracing starts"

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	enable_python_lttng_event $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME

	# Run 5 times with a 1 second delay
	run_app $1

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting all events.
	trace_match_only $EVENT_NAME $NR_ITER $TRACE_PATH
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_loglevel ()
{
	diag "Test Python application with loglevel"

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	enable_python_lttng_event_loglevel $SESSION_NAME $EVENT_NAME "INFO"
	start_lttng_tracing_ok $SESSION_NAME

	# Run 5 times with a 1 second delay
	run_app $1

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting all events.
	trace_match_only $EVENT_NAME $NR_ITER $TRACE_PATH
	if [ $? -ne 0 ]; then
		return $?
	fi

	diag "Test Python applications with lower loglevel"

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	enable_python_lttng_event_loglevel $SESSION_NAME $EVENT_NAME "CRITICAL"
	start_lttng_tracing_ok $SESSION_NAME

	# Run 5 times with a 1 second delay
	run_app $1

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting 0 events.
	trace_match_only $EVENT_NAME 0 $TRACE_PATH
	if [ $? -ne 0 ]; then
		return $?
	fi

	diag "Test Python applications with higher loglevel"

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	enable_python_lttng_event_loglevel $SESSION_NAME $EVENT_NAME "DEBUG"
	start_lttng_tracing_ok $SESSION_NAME

	# Run 5 times with a 1 second delay
	run_app $1

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting all events.
	trace_match_only $EVENT_NAME $NR_ITER $TRACE_PATH
	return $?
}

function test_python_loglevel_multiple ()
{
	diag "Test Python application with multiple loglevel"

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	enable_python_lttng_event_loglevel $SESSION_NAME $EVENT_NAME "INFO"
	enable_python_lttng_event_loglevel $SESSION_NAME $EVENT_NAME "DEBUG"
	start_lttng_tracing_ok $SESSION_NAME

	# Run 5 times with a 1 second delay and fire two TP.
	run_app $1 1

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting all events times two.
	trace_match_only $EVENT_NAME $(($NR_ITER * 2)) $TRACE_PATH
	if [ $? -ne 0 ]; then
		return $?
	fi

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
	enable_python_lttng_event_loglevel $SESSION_NAME '*' "INFO"
	enable_python_lttng_event_loglevel $SESSION_NAME '*' "DEBUG"
	start_lttng_tracing_ok $SESSION_NAME

	# Run 5 times with a 1 second delay and fire two TP.
	run_app $1 1

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting all events times two.
	trace_match_only $EVENT_NAME $(($NR_ITER * 2)) $TRACE_PATH
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_multi_session_loglevel()
{
	diag "Test Python with multiple session"

	create_lttng_session_ok $SESSION_NAME-1 $TRACE_PATH/$SESSION_NAME-1
	enable_python_loglevel_only $SESSION_NAME-1 '*' "INFO"
	start_lttng_tracing_ok $SESSION_NAME-1

	create_lttng_session_ok $SESSION_NAME-2 $TRACE_PATH/$SESSION_NAME-2
	enable_python_loglevel_only $SESSION_NAME-2 '*' "DEBUG"
	start_lttng_tracing_ok $SESSION_NAME-2

	# Run 5 times with a 1 second delay and fire second TP.
	run_app $1 1 1

	stop_lttng_tracing_ok $SESSION_NAME-1
	stop_lttng_tracing_ok $SESSION_NAME-2
	destroy_lttng_session_ok $SESSION_NAME-1
	destroy_lttng_session_ok $SESSION_NAME-2

	# Expecting NR_ITER events being the main event and the second tp one.
	trace_matches $EVENT_NAME $NR_ITER $TRACE_PATH/$SESSION_NAME-1
	if [ $? -ne 0 ]; then
		return $?
	fi
	trace_matches $EVENT_NAME2 1 $TRACE_PATH/$SESSION_NAME-1
	if [ $? -ne 0 ]; then
		return $?
	fi

	# Expectin NR_ITER events being the debug TP.
	trace_match_only $EVENT_NAME $NR_ITER $TRACE_PATH/$SESSION_NAME-2
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_multi_session_disable()
{
	diag "Test Python with multiple session with disabled event"

	create_lttng_session_ok $SESSION_NAME-1 $TRACE_PATH/$SESSION_NAME-1
	enable_python_lttng_event $SESSION_NAME-1 $EVENT_NAME
	enable_python_lttng_event $SESSION_NAME-1 $EVENT_NAME2
	disable_python_lttng_event $SESSION_NAME-1 $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME-1

	create_lttng_session_ok $SESSION_NAME-2 $TRACE_PATH/$SESSION_NAME-2
	enable_python_lttng_event $SESSION_NAME-2 $EVENT_NAME2
	start_lttng_tracing_ok $SESSION_NAME-2

	# Run 5 times with a 1 second delay and fire second TP.
	run_app $1 0 1

	stop_lttng_tracing_ok $SESSION_NAME-1
	stop_lttng_tracing_ok $SESSION_NAME-2
	destroy_lttng_session_ok $SESSION_NAME-1
	destroy_lttng_session_ok $SESSION_NAME-2

	# Validate test. Expecting one event of the second TP.
	trace_match_only $EVENT_NAME2 1 $TRACE_PATH/$SESSION_NAME-1
	if [ $? -ne 0 ]; then
		return $?
	fi

	# Validate test. Expecting one event of the second TP.
	trace_match_only $EVENT_NAME2 1 $TRACE_PATH/$SESSION_NAME-2
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_multi_session_disable_wildcard()
{
	diag "Test Python with multiple session with disabled wildcard event"

	create_lttng_session_ok $SESSION_NAME-1 $TRACE_PATH/$SESSION_NAME-1
	enable_python_lttng_event $SESSION_NAME-1 '*'

	create_lttng_session_ok $SESSION_NAME-2 $TRACE_PATH/$SESSION_NAME-2
	enable_python_lttng_event $SESSION_NAME-2 '*'

	disable_python_lttng_event $SESSION_NAME-1 '*'

	start_lttng_tracing_ok $SESSION_NAME-1
	start_lttng_tracing_ok $SESSION_NAME-2

	run_app $1

	stop_lttng_tracing_ok $SESSION_NAME-1
	stop_lttng_tracing_ok $SESSION_NAME-2
	destroy_lttng_session_ok $SESSION_NAME-1
	destroy_lttng_session_ok $SESSION_NAME-2

	# Validate test. Expecting NO event of the first TP.
	trace_match_only $EVENT_NAME 0 $TRACE_PATH/$SESSION_NAME-1
	if [ $? -ne 0 ]; then
		return $?
	fi

	# Validate test. Expecting all events of the first TP.
	trace_match_only $EVENT_NAME $NR_ITER $TRACE_PATH/$SESSION_NAME-2
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_multi_session_disable_wildcard_begin()
{
	ev_name='*ev-test1'
	diag "Test Python with multiple session with disabled wildcard (at the beginning) event"

	create_lttng_session_ok $SESSION_NAME-1 $TRACE_PATH/$SESSION_NAME-1
	enable_python_lttng_event $SESSION_NAME-1 "$ev_name"

	create_lttng_session_ok $SESSION_NAME-2 $TRACE_PATH/$SESSION_NAME-2
	enable_python_lttng_event $SESSION_NAME-2 "$ev_name"

	disable_python_lttng_event $SESSION_NAME-1 "$ev_name"

	start_lttng_tracing_ok $SESSION_NAME-1
	start_lttng_tracing_ok $SESSION_NAME-2

	run_app $1 0 1

	stop_lttng_tracing_ok $SESSION_NAME-1
	stop_lttng_tracing_ok $SESSION_NAME-2
	destroy_lttng_session_ok $SESSION_NAME-1
	destroy_lttng_session_ok $SESSION_NAME-2

	# Validate test. Expecting NO event of the first TP.
	trace_match_only $EVENT_NAME 0 $TRACE_PATH/$SESSION_NAME-1
	if [ $? -ne 0 ]; then
		return $?
	fi

	# Validate test. Expecting all events of the first TP.
	trace_match_only $EVENT_NAME $NR_ITER $TRACE_PATH/$SESSION_NAME-2
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_multi_session_disable_wildcard_middle()
{
	ev_name='python-*-test1'
	diag "Test Python with multiple session with disabled wildcard (at the middle) event"

	create_lttng_session_ok $SESSION_NAME-1 $TRACE_PATH/$SESSION_NAME-1
	enable_python_lttng_event $SESSION_NAME-1 "$ev_name"

	create_lttng_session_ok $SESSION_NAME-2 $TRACE_PATH/$SESSION_NAME-2
	enable_python_lttng_event $SESSION_NAME-2 "$ev_name"

	disable_python_lttng_event $SESSION_NAME-1 "$ev_name"

	start_lttng_tracing_ok $SESSION_NAME-1
	start_lttng_tracing_ok $SESSION_NAME-2

	run_app $1 0 1

	stop_lttng_tracing_ok $SESSION_NAME-1
	stop_lttng_tracing_ok $SESSION_NAME-2
	destroy_lttng_session_ok $SESSION_NAME-1
	destroy_lttng_session_ok $SESSION_NAME-2

	# Validate test. Expecting NO event of the first TP.
	trace_match_only $EVENT_NAME 0 $TRACE_PATH/$SESSION_NAME-1
	if [ $? -ne 0 ]; then
		return $?
	fi

	# Validate test. Expecting all events of the first TP.
	trace_match_only $EVENT_NAME $NR_ITER $TRACE_PATH/$SESSION_NAME-2
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_multi_session_disable_wildcard_end()
{
	ev_name='python-*'
	diag "Test Python with multiple session with disabled wildcard (at the end) event"

	create_lttng_session_ok $SESSION_NAME-1 $TRACE_PATH/$SESSION_NAME-1
	enable_python_lttng_event $SESSION_NAME-1 "$ev_name"

	create_lttng_session_ok $SESSION_NAME-2 $TRACE_PATH/$SESSION_NAME-2
	enable_python_lttng_event $SESSION_NAME-2 "$ev_name"

	disable_python_lttng_event $SESSION_NAME-1 "$ev_name"

	start_lttng_tracing_ok $SESSION_NAME-1
	start_lttng_tracing_ok $SESSION_NAME-2

	run_app $1 0 1

	stop_lttng_tracing_ok $SESSION_NAME-1
	stop_lttng_tracing_ok $SESSION_NAME-2
	destroy_lttng_session_ok $SESSION_NAME-1
	destroy_lttng_session_ok $SESSION_NAME-2

	# Validate test. Expecting NO event of the first TP.
	trace_match_only $EVENT_NAME 0 $TRACE_PATH/$SESSION_NAME-1
	if [ $? -ne 0 ]; then
		return $?
	fi

	# Validate test. Expecting all events of the first TP.
	trace_matches $EVENT_NAME $NR_ITER $TRACE_PATH/$SESSION_NAME-2
	if [ $? -ne 0 ]; then
		return $?
	fi

	trace_matches $EVENT_NAME2 1 $TRACE_PATH/$SESSION_NAME-2
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_disable_all()
{
	diag "Test Python with multiple session with disabled all event"

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH/$SESSION_NAME
	enable_python_lttng_event $SESSION_NAME '*'
	enable_python_lttng_event $SESSION_NAME $EVENT_NAME
	enable_python_lttng_event $SESSION_NAME $EVENT_NAME2

	disable_python_lttng_event $SESSION_NAME -a

	start_lttng_tracing_ok $SESSION_NAME

	run_app $1 0 1

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting NO event of the first TP and second TP.
	trace_match_only $EVENT_NAME 0 $TRACE_PATH/$SESSION_NAME
	trace_match_only $EVENT_NAME2 0 $TRACE_PATH/$SESSION_NAME
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_multi_session()
{
	diag "Test Python with multiple session"

	create_lttng_session_ok $SESSION_NAME-1 $TRACE_PATH/$SESSION_NAME-1
	enable_python_lttng_event $SESSION_NAME-1 $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME-1

	create_lttng_session_ok $SESSION_NAME-2 $TRACE_PATH/$SESSION_NAME-2
	enable_python_lttng_event $SESSION_NAME-2 $EVENT_NAME2
	start_lttng_tracing_ok $SESSION_NAME-2

	# Run 5 times with a 1 second delay and fire second TP.
	run_app $1 0 1

	stop_lttng_tracing_ok $SESSION_NAME-1
	stop_lttng_tracing_ok $SESSION_NAME-2
	destroy_lttng_session_ok $SESSION_NAME-1
	destroy_lttng_session_ok $SESSION_NAME-2

	# Validate test. Expecting all events of first TP
	trace_match_only $EVENT_NAME $NR_ITER $TRACE_PATH/$SESSION_NAME-1
	if [ $? -ne 0 ]; then
		return $?
	fi

	# Validate test. Expecting one event of the second TP.
	trace_match_only $EVENT_NAME2 1 $TRACE_PATH/$SESSION_NAME-2
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_destroy_session()
{
	diag "Test Python two session with destroy"

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH/first-sess
	enable_python_lttng_event $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME

	# Run 5 times with a 1 second delay
	run_app $1 0 1

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting at least one event num 1
	validate_trace $EVENT_NAME $TRACE_PATH/first-sess
	if [ $? -ne 0 ]; then
		return $?
	fi

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH/second-sess
	enable_python_lttng_event $SESSION_NAME $EVENT_NAME2
	start_lttng_tracing_ok $SESSION_NAME

	run_app $1 0 1

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting only one event num 2
	trace_match_only $EVENT_NAME2 1 $TRACE_PATH/second-sess
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_filtering()
{
	diag "Test Python filtering"

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH/$SESSION_NAME
	# Enable all event with a filter.
	enable_python_filter $SESSION_NAME '*' 'msg == "python-ev-test2 fired [INFO]"'
	start_lttng_tracing_ok $SESSION_NAME

	# Run 5 times with a 1 second delay and fire second TP.
	run_app $1 0 1

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting one event of the second TP only.
	trace_match_only $EVENT_NAME2 1 $TRACE_PATH/$SESSION_NAME
	if [ $? -ne 0 ]; then
		return $?
	fi

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH/$SESSION_NAME
	# Enable first Logger but filter msg payload for the INFO one while
	# triggering the debug and second TP.
	enable_python_filter $SESSION_NAME $EVENT_NAME 'msg == "python-ev-test1 fired [INFO]"'
	start_lttng_tracing_ok $SESSION_NAME

	# Run 5 times with a 1 second delay, fire debug and second TP.
	run_app $1 1 1

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting NR_ITER event of the main INFO tp.
	trace_match_only $EVENT_NAME $NR_ITER $TRACE_PATH/$SESSION_NAME
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_disable()
{
	diag "Test Python disable event"

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH/$SESSION_NAME
	# Enable all event with a filter.
	enable_python_lttng_event $SESSION_NAME $EVENT_NAME
	enable_python_lttng_event $SESSION_NAME $EVENT_NAME2
	disable_python_lttng_event $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME

	# Run 5 times with a 1 second delay and fire second TP.
	run_app $1 0 1

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting one event of the second TP only.
	trace_match_only $EVENT_NAME2 1 $TRACE_PATH/$SESSION_NAME
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_disable_enable()
{
	diag "Test Python disable event followed by an enable"

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH/$SESSION_NAME
	# Enable all event with a filter.
	enable_python_lttng_event $SESSION_NAME $EVENT_NAME
	disable_python_lttng_event $SESSION_NAME $EVENT_NAME
	enable_python_lttng_event $SESSION_NAME $EVENT_NAME
	start_lttng_tracing_ok $SESSION_NAME

	# Run 5 times with a 1 second delay and fire second TP.
	run_app $1 0 1

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting NR_ITER event of the main INFO tp.
	trace_match_only $EVENT_NAME $NR_ITER $TRACE_PATH/$SESSION_NAME
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_filter_loglevel()
{
	local BOGUS_EVENT_NAME="not_a_real_event"
	local FILTER="int_loglevel > 30 || int_loglevel < 30"
	local ALL_EVENTS="."

	diag "Test Python a filter with a loglevel"

	create_lttng_session_ok $SESSION_NAME $TRACE_PATH/$SESSION_NAME
	# Enable an event with a filter and the loglevel-only option.
	enable_python_filter_loglevel_only $SESSION_NAME $BOGUS_EVENT_NAME "$FILTER" "INFO"
	disable_python_lttng_event $SESSION_NAME $BOGUS_EVENT_NAME
	enable_python_filter_loglevel_only $SESSION_NAME $BOGUS_EVENT_NAME "$FILTER" "INFO"
	start_lttng_tracing_ok $SESSION_NAME

	# Run 5 times with a 1 second delay and fire second TP.
	run_app $1 0 1

	stop_lttng_tracing_ok $SESSION_NAME
	destroy_lttng_session_ok $SESSION_NAME

	# Validate test. Expecting no events.
	trace_match_only $ALL_EVENTS 0 $TRACE_PATH/$SESSION_NAME
	if [ $? -ne 0 ]; then
		return $?
	fi
}

function test_python_trigger_notify_action
{
	uid=$(id --user)
	tmp_expected_stdout=$(mktemp -t test_list_triggers_python_cli_expected_stdout.XXXXXX)

	diag "Test Python trigger with notify action"

	lttng_add_trigger_ok "my_python_trigger" \
		--condition event-rule-matches --type=python --action notify

	cat > "${tmp_expected_stdout}" <<- EOF
	- name: my_python_trigger
	  owner uid: ${uid}
	  condition: event rule matches
	    rule: * (type: python:logging)
	    errors: none
	  actions:
	    notify
	      errors: none
	  errors: none
	EOF

	list_triggers_matches_ok "Python trigger listing" "${tmp_expected_stdout}"

	lttng_remove_trigger_ok "my_python_trigger"

	rm -f "${tmp_expected_stdout}"
}


function test_app_path_with_separators
{
	local PYTHON="${1}"

	diag "Test LTTNG_UST_APP_PATH and LTTNG_UST_CTL_PATH with separators"
	CTL_PATH="$(mktemp -d -t "tmp.${FUNCNAME[0]}.ctl.XXXXXX")"
	CTL_PATH2="$(mktemp -d -t "tmp.${FUNCNAME[0]}.ctl2.XXXXXX")"
	TRACE_PATH="$(mktemp -d -t "tmp.${FUNCNAME[0]}.trace.XXXXXX")"

	env_vars=(
		LTTNG_UST_CTL_PATH="${CTL_PATH}:${CTL_PATH2}"
	)
	# shellcheck disable=SC2119
	LTTNG_SESSIOND_ENV_VARS="${env_vars[*]}" start_lttng_sessiond

	create_lttng_session_ok "${SESSION_NAME}" "${TRACE_PATH}"
	enable_python_lttng_event_loglevel "${SESSION_NAME}" "${EVENT_NAME}" "INFO"
	start_lttng_tracing_ok "${SESSION_NAME}"

	LTTNG_UST_APP_PATH="${CTL_PATH}:${CTL_PATH2}" "${PYTHON}" "$TESTAPP_PATH/$TESTAPP_BIN" -n 100 -s 0

	stop_lttng_tracing_ok "${SESSION_NAME}"
	destroy_lttng_session_ok "${SESSION_NAME}" --no-wait

	validate_trace_count "${EVENT_NAME}" "${TRACE_PATH}" 100 0

	# shellcheck disable=SC2119
	stop_lttng_sessiond

	# Cleanup
	rm -rf "${CTL_PATH}" "${CTL_PATH2}" "${TRACE_PATH}"
}

plan_tests $NUM_TESTS

print_test_banner "$TEST_DESC"

if [[ ${#python_versions[@]} -eq 0 ||  "x$run_test" != "xyes" ]]; then
	skip_agent=0
else
	skip_agent=1
fi

tracee_pids=()
skip $skip_agent "Python agent test skipped." $NUM_TESTS ||
{
	start_lttng_sessiond

	tests=(
		test_python_multi_session_disable_wildcard
		test_python_multi_session_disable_wildcard_begin
		test_python_multi_session_disable_wildcard_middle
		test_python_multi_session_disable_wildcard_end
		test_python_multi_session_disable
		test_python_disable
		test_python_disable_enable
		test_python_disable_all
		test_python_filtering
		test_python_multi_session_loglevel
		test_python_destroy_session
		test_python_loglevel
		test_python_loglevel_multiple
		test_python_before_start
		test_python_after_start
		test_python_multi_session
		test_python_filter_loglevel
		test_python_trigger_notify_action
	)
	standalone_tests=(
		test_app_path_with_separators
	)


	for python_version in ${python_versions[*]};
	do
		for fct_test in ${tests[@]};
		do
			TRACE_PATH=$(mktemp -d -t tmp.test_python_logging_trace_path.XXXXXX)

			diag "(Python $python_version)"
			${fct_test} $python_version
			if [ $? -ne 0 ]; then
				break;
			fi
			rm -rf $TRACE_PATH
		done
	done
	stop_lttng_sessiond

	for python_version in "${python_versions[@]}"; do
		for fct_test in "${standalone_tests[@]}"; do
			diag "(Python $python_version)"
			"${fct_test}" "${python_version}"
		done
	done
}
